<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac</name>
    </assembly>
    <members>
        <member name="T:Autofac.Builder.BuildCallbackManager">
            <summary>
            Provides support for accessing/invoking the set of build callbacks, invoked on scope/container build.
            </summary>
        </member>
        <member name="M:Autofac.Builder.BuildCallbackManager.RunBuildCallbacks(Autofac.ILifetimeScope)">
            <summary>
            Executes the newly-registered build callbacks for a given scope/container..
            </summary>
            <param name="scope">The new scope/container.</param>
        </member>
        <member name="T:Autofac.Builder.BuildCallbackService">
            <summary>
            Represent a collection of callbacks that can be run after a container or scope is 'built'.
            </summary>
        </member>
        <member name="M:Autofac.Builder.BuildCallbackService.AddCallback(System.Action{Autofac.ILifetimeScope})">
            <summary>
            Add a callback to the set that will get executed.
            </summary>
            <param name="callback">The callback to run.</param>
        </member>
        <member name="M:Autofac.Builder.BuildCallbackService.Execute(Autofac.ILifetimeScope)">
            <summary>
            Execute the callback for each build callback registered in this service.
            </summary>
            <param name="scope">The scope that has been built.</param>
        </member>
        <member name="T:Autofac.Builder.BuildCallbackServiceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Builder.BuildCallbackServiceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Builder.BuildCallbackServiceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Builder.BuildCallbackServiceResources.BuildCallbacksAlreadyRun">
            <summary>
              Looks up a localized string similar to This set of build callbacks has already run..
            </summary>
        </member>
        <member name="T:Autofac.Builder.ConcreteReflectionActivatorData">
            <summary>
            Reflection activator data for concrete types.
            </summary>
        </member>
        <member name="M:Autofac.Builder.ConcreteReflectionActivatorData.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Builder.ConcreteReflectionActivatorData"/> class.
            </summary>
            <param name="implementer">Type that will be activated.</param>
        </member>
        <member name="P:Autofac.Builder.ConcreteReflectionActivatorData.Activator">
            <summary>
            Gets the instance activator based on the provided data.
            </summary>
        </member>
        <member name="T:Autofac.Builder.ContainerBuildOptions">
            <summary>
            Parameterises the construction of a container by a <see cref="T:Autofac.ContainerBuilder"/>.
            </summary>
        </member>
        <member name="F:Autofac.Builder.ContainerBuildOptions.None">
            <summary>
            No options - the default behavior for container building.
            </summary>
        </member>
        <member name="F:Autofac.Builder.ContainerBuildOptions.ExcludeDefaultModules">
            <summary>
            Prevents inclusion of standard modules like support for
            relationship types including <see cref="T:System.Collections.Generic.IEnumerable`1"/> etc.
            </summary>
        </member>
        <member name="F:Autofac.Builder.ContainerBuildOptions.IgnoreStartableComponents">
            <summary>
            Does not call <see cref="M:Autofac.IStartable.Start"/> on components implementing
            this interface (useful for module testing.)
            </summary>
        </member>
        <member name="T:Autofac.Builder.DeferredCallback">
            <summary>
            Reference object allowing location and update of a registration callback.
            </summary>
        </member>
        <member name="M:Autofac.Builder.DeferredCallback.#ctor(System.Action{Autofac.Core.Registration.IComponentRegistryBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Builder.DeferredCallback"/> class.
            </summary>
            <param name="callback">
            An <see cref="T:System.Action`1"/> that executes a registration action
            against an <see cref="T:Autofac.Core.Registration.IComponentRegistryBuilder"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="callback" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:Autofac.Builder.DeferredCallback.Callback">
            <summary>
            Gets or sets the callback to execute during registration.
            </summary>
            <value>
            An <see cref="T:System.Action`1"/> that executes a registration action
            against an <see cref="T:Autofac.Core.Registration.IComponentRegistryBuilder"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="value" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:Autofac.Builder.DeferredCallback.Id">
            <summary>
            Gets the callback identifier.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> that uniquely identifies the callback action
            in a set of callbacks.
            </value>
        </member>
        <member name="T:Autofac.Builder.DynamicRegistrationStyle">
            <summary>
            Registration style for dynamic registrations.
            </summary>
        </member>
        <member name="T:Autofac.Builder.IConcreteActivatorData">
            <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
        </member>
        <member name="P:Autofac.Builder.IConcreteActivatorData.Activator">
            <summary>
            Gets the instance activator based on the provided data.
            </summary>
        </member>
        <member name="T:Autofac.Builder.IHideObjectMembers">
            <summary>
            Hides standard Object members to make fluent interfaces
            easier to read.
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx.
            </summary>
        </member>
        <member name="M:Autofac.Builder.IHideObjectMembers.GetType">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Builder.IHideObjectMembers.GetHashCode">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Builder.IHideObjectMembers.ToString">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Builder.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Standard System.Object member.
            </summary>
            <param name="other">The other.</param>
            <returns>Standard result.</returns>
        </member>
        <member name="T:Autofac.Builder.IRegistrationBuilder`3">
            <summary>
            Data structure used to construct registrations.
            </summary>
            <typeparam name="TLimit">The most specific type to which instances of the registration
            can be cast.</typeparam>
            <typeparam name="TActivatorData">Activator builder type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
        </member>
        <member name="P:Autofac.Builder.IRegistrationBuilder`3.RegistrationData">
            <summary>
            Gets the registration data.
            </summary>
        </member>
        <member name="P:Autofac.Builder.IRegistrationBuilder`3.ActivatorData">
            <summary>
            Gets the activator data.
            </summary>
        </member>
        <member name="P:Autofac.Builder.IRegistrationBuilder`3.RegistrationStyle">
            <summary>
            Gets the registration style.
            </summary>
        </member>
        <member name="P:Autofac.Builder.IRegistrationBuilder`3.ResolvePipeline">
            <summary>
            Gets the resolve pipeline for this registration.
            </summary>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.ExternallyOwned">
            <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OwnedByLifetimeScope">
            <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default).
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerDependency">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default).
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])">
            <summary>
            Configure the component so that every dependent component or call to Resolve() within
            a ILifetimeScope tagged with any of the provided tags value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceType">Service type.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <param name="serviceKey">Key to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1(System.Object[])">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <param name="serviceKeys">Keys to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``1">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``2">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``3">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <typeparam name="TService3">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.As(System.Type[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Service types to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.As(Autofac.Core.Service[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Services to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.Named(System.String,System.Type)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.Named``1(System.String)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.Keyed(System.Object,System.Type)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.Keyed``1(System.Object)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
            <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnPreparing(System.Func{Autofac.Core.PreparingEventArgs,System.Threading.Tasks.ValueTask})">
            <summary>
            Add an async handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
            <param name="handler">An event handler; the resolve process will not continue until the returned task completes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
            <summary>
            Add a handler for the Activating event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivating(System.Func{Autofac.Core.IActivatingEventArgs{`0},System.Threading.Tasks.ValueTask})">
            <summary>
            Add an async handler for the Activating event.
            </summary>
            <param name="handler">An event handler; the resolve process will not continue until the returned task completes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
            <summary>
            Add a handler for the Activated event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivated(System.Func{Autofac.Core.IActivatedEventArgs{`0},System.Threading.Tasks.ValueTask})">
            <summary>
            Add a handler for the Activated event.
            </summary>
            <param name="handler">An event handler; the resolve process will not continue until the returned task completes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.PropertiesAutowired(Autofac.Core.IPropertySelector,System.Boolean)">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container and follow specific criteria will be wired to instances of the appropriate service.
            </summary>
            <param name="propertySelector">Selector to determine which properties should be injected.</param>
            <param name="allowCircularDependencies">Determine if circular dependencies should be allowed or not.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.String,System.Object)">
            <summary>
            Associates data with the component.
            </summary>
            <param name="key">Key by which the data can be located.</param>
            <param name="value">The data value.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Associates data with the component.
            </summary>
            <param name="properties">The extended properties to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
            <summary>
            Associates data with the component.
            </summary>
            <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
            <param name="configurationAction">
            The action used to configure the metadata.
            </param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.IRegistrationBuilder`3.ConfigurePipeline(System.Action{Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder})">
            <summary>
            Provides access to the registration's pipeline builder, allowing custom middleware to be added.
            </summary>
            <param name="configurationAction">An action that can configure the registration's pipeline.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="T:Autofac.Builder.MetadataConfiguration`1">
            <summary>
            Used with the WithMetadata configuration method to
            associate key-value pairs with an <see cref="T:Autofac.Core.IComponentRegistration"/>.
            </summary>
            <typeparam name="TMetadata">Interface with properties whose names correspond to
            the property keys.</typeparam>
            <remarks>This feature was suggested by OJ Reeves (@TheColonial).</remarks>
        </member>
        <member name="P:Autofac.Builder.MetadataConfiguration`1.Properties">
            <summary>
            Gets the set of properties that have been provided.
            </summary>
        </member>
        <member name="M:Autofac.Builder.MetadataConfiguration`1.For``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Set one of the property values.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyAccessor">An expression that accesses the property to set.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="T:Autofac.Builder.MetadataKeys">
            <summary>
            Internal metadata keys.
            </summary>
        </member>
        <member name="F:Autofac.Builder.MetadataKeys.RegistrationOrderMetadataKey">
            <summary>
            Key containing the registration order.
            </summary>
        </member>
        <member name="F:Autofac.Builder.MetadataKeys.AutoActivated">
            <summary>
            Key containing a value indicating whether the registration has been auto activated.
            </summary>
        </member>
        <member name="F:Autofac.Builder.MetadataKeys.StartOnActivatePropertyKey">
            <summary>
            Key containing a value indicating whether the registration should be started on activation.
            </summary>
        </member>
        <member name="F:Autofac.Builder.MetadataKeys.ContainerBuildOptions">
            <summary>
            Key containing the container build options.
            </summary>
        </member>
        <member name="F:Autofac.Builder.MetadataKeys.RegisteredPropertyKey">
            <summary>
            Event handler for <see cref="E:Autofac.Core.Registration.ComponentRegistryBuilder.Registered"/>.
            </summary>
        </member>
        <member name="F:Autofac.Builder.MetadataKeys.RegistrationSourceAddedPropertyKey">
            <summary>
            Event handler for <see cref="E:Autofac.Core.Registration.ComponentRegistryBuilder.RegistrationSourceAdded"/>.
            </summary>
        </member>
        <member name="T:Autofac.Builder.ReflectionActivatorData">
            <summary>
            Builder for reflection-based activators.
            </summary>
        </member>
        <member name="M:Autofac.Builder.ReflectionActivatorData.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Builder.ReflectionActivatorData"/> class.
            </summary>
            <param name="implementer">Type that will be activated.</param>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ImplementationType">
            <summary>
            Gets or sets the implementation type.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorFinder">
            <summary>
            Gets or sets the constructor finder for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorSelector">
            <summary>
            Gets or sets the constructor selector for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredParameters">
            <summary>
            Gets the explicitly bound constructor parameters.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredProperties">
            <summary>
            Gets the explicitly bound properties.
            </summary>
        </member>
        <member name="T:Autofac.Builder.RegistrationBuilder">
            <summary>
            Static factory methods to simplify the creation and handling of IRegistrationBuilder{L,A,R}.
            </summary>
            <example>
            To create an <see cref="T:Autofac.Core.IComponentRegistration"/> for a specific type, use:
            <code>
            var cr = RegistrationBuilder.ForType(t).CreateRegistration();
            </code>
            The full builder syntax is supported.
            <code>
            var cr = RegistrationBuilder.ForType(t).Named("foo").ExternallyOwned().CreateRegistration();
            </code>
            </example>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.ForDelegate``1(System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>
            Creates a registration builder for the provided delegate.
            </summary>
            <typeparam name="T">Instance type returned by delegate.</typeparam>
            <param name="delegate">Delegate to register.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.ForDelegate(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Creates a registration builder for the provided delegate.
            </summary>
            <param name="delegate">Delegate to register.</param>
            <param name="limitType">Most specific type return value of delegate can be cast to.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.ForType``1">
            <summary>
            Creates a registration builder for the provided type.
            </summary>
            <typeparam name="TImplementer">Implementation type to register.</typeparam>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.ForType(System.Type)">
            <summary>
            Creates a registration builder for the provided type.
            </summary>
            <param name="implementationType">Implementation type to register.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Create an <see cref='T:Autofac.Core.IComponentRegistration'/> from a <see cref='T:Autofac.Builder.RegistrationBuilder'/>.
            There is no need to call this method when registering components through a <see cref="T:Autofac.ContainerBuilder"/>.
            </summary>
            <remarks>
            When called on the result of one of the <see cref='T:Autofac.ContainerBuilder'/> methods,
            the returned registration will be different from the one the builder itself registers
            in the container.
            </remarks>
            <example>
            <code>
            var registration = RegistrationBuilder.ForType&lt;Foo&gt;().CreateRegistration();
            </code>
            </example>
            <param name="builder">The registration builder.</param>
            <returns>An IComponentRegistration.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Autofac.Builder.RegistrationData,Autofac.Core.IInstanceActivator,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Core.Service[])">
            <summary>
            Create an IComponentRegistration from data.
            </summary>
            <param name="id">Id of the registration.</param>
            <param name="data">Registration data.</param>
            <param name="activator">Activator.</param>
            <param name="pipelineBuilder">The component registration's resolve pipeline builder.</param>
            <param name="services">Services provided by the registration.</param>
            <returns>An IComponentRegistration.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Autofac.Builder.RegistrationData,Autofac.Core.IInstanceActivator,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Core.Service[],Autofac.Core.IComponentRegistration)">
            <summary>
            Create an IComponentRegistration from data.
            </summary>
            <param name="id">Id of the registration.</param>
            <param name="data">Registration data.</param>
            <param name="activator">Activator.</param>
            <param name="pipelineBuilder">The component registration's resolve pipeline builder.</param>
            <param name="services">Services provided by the registration.</param>
            <param name="target">Optional; target registration.</param>
            <returns>An IComponentRegistration.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="activator" /> or <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder.RegisterSingleComponent``3(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Register a component in the component registry. This helper method is necessary
            in order to execute OnRegistered hooks and respect PreserveDefaults.
            </summary>
            <remarks>Hoping to refactor this out.</remarks>
            <param name="cr">Component registry to make registration in.</param>
            <param name="builder">Registration builder with data for new registration.</param>
        </member>
        <member name="T:Autofac.Builder.RegistrationBuilderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilderResources.ComponentDoesNotSupportService">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not assignable to service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Builder.RegistrationBuilder`3">
            <summary>
            Data structure used to construct registrations.
            </summary>
            <typeparam name="TLimit">The most specific type to which instances of the registration
            can be cast.</typeparam>
            <typeparam name="TActivatorData">Activator builder type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.#ctor(Autofac.Core.Service,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Builder.RegistrationBuilder`3"/> class.
            </summary>
            <param name="defaultService">The default service.</param>
            <param name="activatorData">The activator data.</param>
            <param name="style">The registration style.</param>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.ActivatorData">
            <summary>
            Gets the activator data.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationStyle">
            <summary>
            Gets the registration style.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationData">
            <summary>
            Gets the registration data.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.ResolvePipeline">
            <summary>
            Gets the resolve pipeline builder, that can be used to add middleware to the pipeline.
            </summary>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.ExternallyOwned">
            <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OwnedByLifetimeScope">
            <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default).
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerDependency">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default).
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.SingleInstance">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerLifetimeScope">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])">
            <summary>
            Configure the component so that every dependent component or call to Resolve() within
            a ILifetimeScope tagged with any of the provided tags value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <param name="serviceKey">Key to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As``1">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As``2">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As``3">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <typeparam name="TService3">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As(System.Type[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Service types to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As(System.Type)">
            <summary>
            Configure a single service that the component will provide.
            </summary>
            <param name="service">Service type to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As(Autofac.Core.Service[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Services to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As(Autofac.Core.Service)">
            <summary>
            Configure a single service that the component will provide.
            </summary>
            <param name="service">Service to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.Named(System.String,System.Type)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.Named``1(System.String)">
            <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.Keyed(System.Object,System.Type)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <param name="serviceType">The service type provided by the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.Keyed``1(System.Object)">
            <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
            <param name="serviceKey">Key to associate with the component.</param>
            <typeparam name="TService">The service type provided by the component.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
            <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnPreparing(System.Func{Autofac.Core.PreparingEventArgs,System.Threading.Tasks.ValueTask})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
            <summary>
            Add a handler for the Activating event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivating(System.Func{Autofac.Core.IActivatingEventArgs{`0},System.Threading.Tasks.ValueTask})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
            <summary>
            Add a handler for the Activated event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivated(System.Func{Autofac.Core.IActivatedEventArgs{`0},System.Threading.Tasks.ValueTask})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.PropertiesAutowired(Autofac.Core.IPropertySelector,System.Boolean)">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container and follow specific criteria will be wired to instances of the appropriate service.
            </summary>
            <param name="propertySelector">Selector to determine which properties should be injected.</param>
            <param name="allowCircularDependencies">Determine if circular dependencies should be allowed or not.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.String,System.Object)">
            <summary>
            Associates data with the component.
            </summary>
            <param name="key">Key by which the data can be located.</param>
            <param name="value">The data value.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Associates data with the component.
            </summary>
            <param name="properties">The extended properties to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
            <summary>
            Associates data with the component.
            </summary>
            <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
            <param name="configurationAction">
            The action used to configure the metadata.
            </param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.ConfigurePipeline(System.Action{Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder})">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Builder.RegistrationData">
            <summary>
            Data common to all registrations made in the container, both direct (IComponentRegistration)
            and dynamic (IRegistrationSource).
            </summary>
        </member>
        <member name="M:Autofac.Builder.RegistrationData.#ctor(Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Builder.RegistrationData"/> class.
            </summary>
            <param name="defaultService">The default service that will be used if no others
            are added.</param>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Services">
            <summary>
            Gets the services explicitly assigned to the component.
            </summary>
        </member>
        <member name="M:Autofac.Builder.RegistrationData.AddServices(System.Collections.Generic.IEnumerable{Autofac.Core.Service})">
            <summary>
            Add multiple services for the registration, overriding the default.
            </summary>
            <param name="services">The services to add.</param>
            <remarks>If an empty collection is specified, this will still
            clear the default service.</remarks>
        </member>
        <member name="M:Autofac.Builder.RegistrationData.AddService(Autofac.Core.Service)">
            <summary>
            Add a service to the registration, overriding the default.
            </summary>
            <param name="service">The service to add.</param>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Ownership">
            <summary>
            Gets or sets the instance ownership assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Lifetime">
            <summary>
            Gets or sets the lifetime assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Sharing">
            <summary>
            Gets or sets the sharing mode assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Metadata">
            <summary>
            Gets the extended properties assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Options">
            <summary>
            Gets or sets the options for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.DeferredCallback">
            <summary>
            Gets or sets the callback used to register this component.
            </summary>
            <value>
            A <see cref="T:Autofac.Builder.DeferredCallback"/> that contains the delegate
            used to register this component with an <see cref="T:Autofac.Core.IComponentRegistry"/>.
            </value>
        </member>
        <member name="M:Autofac.Builder.RegistrationData.CopyFrom(Autofac.Builder.RegistrationData,System.Boolean)">
            <summary>
            Copies the contents of another RegistrationData object into this one.
            </summary>
            <param name="that">The data to copy.</param>
            <param name="includeDefaultService">When true, the default service
            will be changed to that of the other.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="that" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Builder.RegistrationData.ClearServices">
            <summary>
            Empties the configured services.
            </summary>
        </member>
        <member name="T:Autofac.Builder.RegistrationExtensions">
            <summary>
            Adds registration syntax for less commonly-used features.
            </summary>
            <remarks>
            These features are in this namespace because they will remain accessible to
            applications originally written against Autofac 1.4. In Autofac 2, this functionality
            is implicitly provided and thus making explicit registrations is rarely necessary.
            </remarks>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type,Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2, and
            this method is generally not required.</remarks>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder,Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder)">
            <summary>
            Registers a factory delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.NamedParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by name.
            </summary>
            <typeparam name="TDelegate">Factory delegate type.</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.PositionalParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by position.
            </summary>
            <typeparam name="TDelegate">Factory delegate type.</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Builder.RegistrationExtensions.TypedParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by type.
            </summary>
            <typeparam name="TDelegate">Factory delegate type.</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Builder.RegistrationOrderExtensions">
            <summary>
            Extension methods for controlling and accessing registration order.
            </summary>
        </member>
        <member name="M:Autofac.Builder.RegistrationOrderExtensions.GetRegistrationOrder(Autofac.Core.IComponentRegistration)">
            <summary>
            Gets the registration order value from the registration.
            </summary>
            <param name="registration">The registration.</param>
            <returns>The original registration order value.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationOrderExtensions.InheritRegistrationOrderFrom``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.IComponentRegistration)">
            <summary>
            Indicates that a registration should inherit its registration order from another registration.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TActivatorData">The activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">The registration style type.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="source">The source registration to take the order from.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="T:Autofac.Builder.SimpleActivatorData">
            <summary>
            An activator builder with no parameters.
            </summary>
        </member>
        <member name="M:Autofac.Builder.SimpleActivatorData.#ctor(Autofac.Core.IInstanceActivator)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Builder.SimpleActivatorData"/> class.
            </summary>
            <param name="activator">The activator to return.</param>
        </member>
        <member name="P:Autofac.Builder.SimpleActivatorData.Activator">
            <summary>
            Gets the activator.
            </summary>
        </member>
        <member name="T:Autofac.Builder.SingleRegistrationStyle">
            <summary>
            Registration style for individual components.
            </summary>
        </member>
        <member name="P:Autofac.Builder.SingleRegistrationStyle.Id">
            <summary>
            Gets or sets the ID used for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.SingleRegistrationStyle.RegisteredHandlers">
            <summary>
            Gets the handlers to notify of the component registration event.
            </summary>
        </member>
        <member name="P:Autofac.Builder.SingleRegistrationStyle.PreserveDefaults">
            <summary>
            Gets or sets a value indicating whether default registrations should be preserved.
            By default, new registrations override existing registrations as defaults.
            If set to true, new registrations will not change existing defaults.
            </summary>
        </member>
        <member name="P:Autofac.Builder.SingleRegistrationStyle.Target">
            <summary>
            Gets or sets the component upon which this registration is based.
            </summary>
        </member>
        <member name="T:Autofac.Builder.StartableManager">
            <summary>
            Helper functions for starting 'startable' components.
            </summary>
        </member>
        <member name="M:Autofac.Builder.StartableManager.StartStartableComponents(System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.IComponentContext)">
            <summary>
            Executes the startable and auto-activate components in a context.
            </summary>
            <param name="properties">The set of properties used during component registration.</param>
            <param name="componentContext">
            The <see cref="T:Autofac.IComponentContext"/> in which startable services should execute.
            </param>
        </member>
        <member name="T:Autofac.ContainerBuilder">
             <summary>
             Used to build an <see cref="T:Autofac.IContainer"/> from component registrations.
             </summary>
             <example>
             <code>
             var builder = new ContainerBuilder();
            
             builder.RegisterType&lt;Logger&gt;()
                 .As&lt;ILogger&gt;()
                 .SingleInstance();
            
             builder.Register(c => new MessageHandler(c.Resolve&lt;ILogger&gt;()));
            
             var container = builder.Build();
             // resolve components from container...
             </code>
             </example>
             <remarks>Most <see cref="T:Autofac.ContainerBuilder"/> functionality is accessed
             via extension methods in <see cref="T:Autofac.RegistrationExtensions"/>.</remarks>
             <seealso cref="T:Autofac.IContainer"/>
             <see cref="T:Autofac.RegistrationExtensions"/>
        </member>
        <member name="M:Autofac.ContainerBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ContainerBuilder"/> class.
            </summary>
        </member>
        <member name="M:Autofac.ContainerBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ContainerBuilder"/> class.
            </summary>
            <param name="properties">The properties used during component registration.</param>
        </member>
        <member name="M:Autofac.ContainerBuilder.#ctor(Autofac.Core.Registration.IComponentRegistryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ContainerBuilder"/> class.
            </summary>
            <param name="componentRegistryBuilder">The builder to use for building the underlying <see cref="T:Autofac.Core.IComponentRegistry" />.</param>
        </member>
        <member name="M:Autofac.ContainerBuilder.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.Registration.IComponentRegistryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ContainerBuilder"/> class.
            </summary>
            <param name="properties">The properties used during component registration.</param>
            <param name="componentRegistryBuilder">The builder to use for building the underlying <see cref="T:Autofac.Core.IComponentRegistry" />.</param>
        </member>
        <member name="P:Autofac.ContainerBuilder.ComponentRegistryBuilder">
            <summary>
            Gets the builder to use for building the underlying <see cref="T:Autofac.Core.IComponentRegistry" />.
            </summary>
        </member>
        <member name="P:Autofac.ContainerBuilder.Properties">
            <summary>
            Gets the set of properties used during component registration.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that can be used to share
            context across registrations.
            </value>
        </member>
        <member name="M:Autofac.ContainerBuilder.RegisterCallback(System.Action{Autofac.Core.Registration.IComponentRegistryBuilder})">
            <summary>
            Register a callback that will be invoked when the container is configured.
            </summary>
            <remarks>This is primarily for extending the builder syntax.</remarks>
            <param name="configurationCallback">Callback to execute.</param>
        </member>
        <member name="M:Autofac.ContainerBuilder.RegisterBuildCallback(System.Action{Autofac.ILifetimeScope})">
            <summary>
            Register a callback that will be invoked when the container (or lifetime scope) is built.
            </summary>
            <param name="buildCallback">Callback to execute.</param>
            <returns>The <see cref="T:Autofac.ContainerBuilder"/> instance to continue registration calls.</returns>
            <remarks>
            The argument to the registered build callback will be an instance of the derived <see cref="T:Autofac.IContainer" /> if this
            builder is being used to build a fresh container, or an <see cref="T:Autofac.ILifetimeScope" /> if it's being used to
            create custom registrations for a new lifetime scope.
            </remarks>
        </member>
        <member name="M:Autofac.ContainerBuilder.Build(Autofac.Builder.ContainerBuildOptions)">
            <summary>
            Create a new container with the component registrations that have been made.
            </summary>
            <param name="options">Options that influence the way the container is initialised.</param>
            <remarks>
            Build can only be called once per <see cref="T:Autofac.ContainerBuilder"/>
            - this prevents ownership issues for provided instances.
            Build enables support for the relationship types that come with Autofac (e.g.
            Func, Owned, Meta, Lazy, IEnumerable.) To exclude support for these types,
            first create the container, then call Update() on the builder.
            </remarks>
            <returns>A new container with the configured component registrations.</returns>
        </member>
        <member name="M:Autofac.ContainerBuilder.UpdateRegistry(Autofac.Core.Registration.IComponentRegistryBuilder)">
            <summary>
            Configure an existing registry with the component registrations
            that have been made. Primarily useful in dynamically adding registrations
            to a child lifetime scope.
            </summary>
            <remarks>
            Update can only be called once per <see cref="T:Autofac.ContainerBuilder"/>
            - this prevents ownership issues for provided instances.
            </remarks>
            <param name="componentRegistry">An existing registry to make the registrations in.</param>
        </member>
        <member name="T:Autofac.ContainerBuilderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ContainerBuilderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ContainerBuilderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ContainerBuilderResources.BuildCanOnlyBeCalledOnce">
            <summary>
              Looks up a localized string similar to Build() or Update() can only be called once on a ContainerBuilder..
            </summary>
        </member>
        <member name="P:Autofac.ContainerBuilderResources.ErrorAutoActivating">
            <summary>
              Looks up a localized string similar to An error occurred while attempting to automatically activate registration &apos;{0}&apos;. See the inner exception for information on the source of the failure..
            </summary>
        </member>
        <member name="T:Autofac.ContainerExtensions">
            <summary>
            Extensions to the container to provide convenience methods for tracing.
            </summary>
        </member>
        <member name="M:Autofac.ContainerExtensions.SubscribeToDiagnostics(Autofac.IContainer,Autofac.Diagnostics.DiagnosticTracerBase)">
            <summary>
            Subscribes a diagnostic tracer to Autofac events.
            </summary>
            <param name="container">The container with the diagnostics to which you want to subscribe.</param>
            <param name="tracer">A diagnostic tracer that will be subscribed to the lifetime scope's diagnostic source.</param>
            <remarks>
            <para>
            This is a convenience method that attaches the <paramref name="tracer"/> to the
            <see cref="T:System.Diagnostics.DiagnosticListener"/> associated with the <paramref name="container"/>. If you
            have an event listener that isn't a <see cref="T:Autofac.Diagnostics.DiagnosticTracerBase"/> you can
            use standard <see cref="T:System.Diagnostics.DiagnosticListener"/> semantics to subscribe to the events
            with your custom listener.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.ContainerExtensions.SubscribeToDiagnostics``1(Autofac.IContainer)">
            <summary>
            Subscribes a diagnostic tracer to Autofac events.
            </summary>
            <typeparam name="T">
            The type of diagnostic tracer that will be subscribed to the lifetime scope's diagnostic source.
            </typeparam>
            <param name="container">The container with the diagnostics to which you want to subscribe.</param>
            <returns>
            The diagnostic tracer that was created and attached to the diagnostic source. Use
            this instance to enable or disable the messages that should be handled.
            </returns>
            <remarks>
            <para>
            This is a convenience method that attaches a tracer to the
            <see cref="T:System.Diagnostics.DiagnosticListener"/> associated with the <paramref name="container"/>. If you
            have an event listener that isn't a <see cref="T:Autofac.Diagnostics.DiagnosticTracerBase"/> you can
            use standard <see cref="T:System.Diagnostics.DiagnosticListener"/> semantics to subscribe to the events
            with your custom listener.
            </para>
            </remarks>
        </member>
        <member name="T:Autofac.Core.ActivatedEventArgs`1">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="M:Autofac.Core.ActivatedEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
            <param name="instance">The instance.</param>
            <param name="service">The service being resolved.</param>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Service">
            <summary>
            Gets the service being resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Context">
            <summary>
            Gets the context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Component">
            <summary>
            Gets the component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Parameters">
            <summary>
            Gets the paramters provided when resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Instance">
            <summary>
            Gets the instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="T:Autofac.Core.ActivatingEventArgs`1">
            <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
        </member>
        <member name="M:Autofac.Core.ActivatingEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatingEventArgs`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="service">The service.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Service">
            <summary>
            Gets the service being resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Context">
            <summary>
            Gets the context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Component">
            <summary>
            Gets the component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Instance">
            <summary>
            Gets or sets the instance that will be used to satisfy the request.
            </summary>
            <remarks>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </remarks>
        </member>
        <member name="M:Autofac.Core.ActivatingEventArgs`1.ReplaceInstance(System.Object)">
            <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
            <param name="instance">The object to use instead of the activated instance.</param>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Parameters">
            <summary>
            Gets the parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Autofac.Core.DefaultPropertySelector">
            <summary>
            Provides default property selector that applies appropriate filters to ensure only
            public settable properties are selected (including filtering for value types and indexed
            properties).
            </summary>
        </member>
        <member name="M:Autofac.Core.DefaultPropertySelector.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DefaultPropertySelector"/> class
            that provides default selection criteria.
            </summary>
            <param name="preserveSetValues">Determines if values should be preserved or not.</param>
        </member>
        <member name="P:Autofac.Core.DefaultPropertySelector.PreserveSetValues">
            <summary>
            Gets a value indicating whether the value should be set if the value is already
            set (ie non-null).
            </summary>
        </member>
        <member name="P:Autofac.Core.DefaultPropertySelector.OverwriteSetValueInstance">
            <summary>
            Gets an instance of DefaultPropertySelector that will cause values to be overwritten.
            </summary>
        </member>
        <member name="P:Autofac.Core.DefaultPropertySelector.PreserveSetValueInstance">
            <summary>
            Gets an instance of DefaultPropertySelector that will preserve any values already set.
            </summary>
        </member>
        <member name="M:Autofac.Core.DefaultPropertySelector.InjectProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Provides default filtering to determine if property should be injected by rejecting
            non-public settable properties.
            </summary>
            <param name="propertyInfo">Property to be injected.</param>
            <param name="instance">Instance that has the property to be injected.</param>
            <returns>Whether property should be injected.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Delegate.DelegateActivator">
            <summary>
            Activate instances using a delegate.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.#ctor(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Delegate.DelegateActivator"/> class.
            </summary>
            <param name="limitType">The most specific type to which activated instances can be cast.</param>
            <param name="activationFunction">Activation delegate.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.ConfigurePipeline(Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Invokes the delegate and returns the instance.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Delegate.DelegateActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.NullFromActivationDelegateFor">
            <summary>
              Looks up a localized string similar to A delegate registered to create instances of &apos;{0}&apos; returned null..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.InstanceActivator">
            <summary>
            Base class for instance activators.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.InstanceActivator.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.InstanceActivator"/> class.
            </summary>
            <param name="limitType">Most derived type to which instances can be cast.</param>
        </member>
        <member name="P:Autofac.Core.Activators.InstanceActivator.LimitType">
            <summary>
            Gets the most specific type that the component instances are known to be castable to.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.InstanceActivator.ToString">
            <summary>
            Gets a string representation of the activator.
            </summary>
            <returns>A string describing the activator.</returns>
        </member>
        <member name="M:Autofac.Core.Activators.InstanceActivator.CheckNotDisposed">
            <summary>
            Asserts that the activator has not been disposed.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.InstanceActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.InstanceActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.InstanceActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.InstanceActivatorResources.InstanceActivatorDisposed">
            <summary>
              Looks up a localized string similar to Instances cannot be created by this activator as it has already been disposed..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator">
            <summary>
            Provides a pre-constructed instance.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator"/> class.
            </summary>
            <param name="instance">The instance to provide.</param>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.ConfigurePipeline(Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.DisposeInstance">
            <summary>
            Gets or sets a value indicating whether the activator disposes the instance that it holds.
            Necessary because otherwise instances that are never resolved will never be
            disposed.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.DisposeAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.InstanceAlreadyActivated">
            <summary>
              Looks up a localized string similar to The provided instance of &apos;{0}&apos; has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing?.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.AutowiringParameter">
            <summary>
            Supplies values based on the target parameter type.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.AutowiringParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="pi" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.AutowiringPropertyInjector">
            <summary>
            Provide helper methods for injecting property values.
            </summary>
        </member>
        <member name="F:Autofac.Core.Activators.Reflection.AutowiringPropertyInjector.InstanceTypeNamedParameter">
            <summary>
            Name of the parameter containing the instance type provided when resolving an injected service.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.AutowiringPropertyInjector.InjectProperties(Autofac.IComponentContext,System.Object,Autofac.Core.IPropertySelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Inject properties onto an instance, filtered by a property selector.
            </summary>
            <param name="context">The component context to resolve dependencies from.</param>
            <param name="instance">The instance to inject onto.</param>
            <param name="propertySelector">The property selector.</param>
            <param name="parameters">The set of parameters for the resolve that can be used to satisfy injectable properties.</param>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.BoundConstructor">
            <summary>
            Represents the outcome of a single bind attempt by a <see cref="T:Autofac.Core.Activators.Reflection.ConstructorBinder"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BoundConstructor.ForBindSuccess(Autofac.Core.Activators.Reflection.ConstructorBinder,System.Func{System.Object[],System.Object},System.Func{System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.BoundConstructor"/> class for a successful bind.
            </summary>
            <param name="binder">The binder that generated this binding.</param>
            <param name="factory">The instance factory.</param>
            <param name="valueRetrievers">The set of value-retrieval functions.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BoundConstructor.ForBindFailure(Autofac.Core.Activators.Reflection.ConstructorBinder,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.BoundConstructor"/> class, for an unsuccessful bind.
            </summary>
            <param name="binder">The binder that generated this binding.</param>
            <param name="firstNonBindableParameter">The first parameter that prevented binding.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BoundConstructor.#ctor(Autofac.Core.Activators.Reflection.ConstructorBinder,System.Func{System.Object[],System.Object},System.Func{System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.BoundConstructor"/> class for a successful bind.
            </summary>
            <param name="binder">The binder that generated this binding.</param>
            <param name="factory">The instance factory.</param>
            <param name="valueRetrievers">The set of value-retrieval functions.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BoundConstructor.#ctor(Autofac.Core.Activators.Reflection.ConstructorBinder,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.BoundConstructor"/> class, for an unsuccessful bind.
            </summary>
            <param name="binder">The binder that generated this binding.</param>
            <param name="firstNonBindableParameter">The first parameter that prevented binding.</param>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructor.Binder">
            <summary>
            Gets the binder that created this binding.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructor.TargetConstructor">
            <summary>
            Gets the constructor on the target type. The actual constructor used
            might differ, e.g. if using a dynamic proxy.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructor.ArgumentCount">
            <summary>
            Gets the total number of arguments for the bound constructor.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructor.CanInstantiate">
            <summary>
            Gets a value indicating whether the binding is valid.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BoundConstructor.Instantiate">
            <summary>
            Invoke the constructor with the parameter bindings.
            </summary>
            <returns>The constructed instance.</returns>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructor.Description">
            <summary>
            Gets a description of the constructor parameter binding.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BoundConstructor.ToString">
            <summary>Returns a System.String that represents the current System.Object.</summary>
            <returns>A System.String that represents the current System.Object.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.BoundConstructorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructorResources.BoundConstructor">
            <summary>
              Looks up a localized string similar to Bound constructor &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructorResources.CannotInstantitate">
            <summary>
              Looks up a localized string similar to The binding cannot be instantiated: {0}.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructorResources.ExceptionDuringInstantiation">
            <summary>
              Looks up a localized string similar to An exception was thrown while invoking the constructor &apos;{0}&apos; on type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.BoundConstructorResources.NonBindableConstructor">
            <summary>
              Looks up a localized string similar to Cannot resolve parameter &apos;{1}&apos; of constructor &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.ConstructorBinder">
            <summary>
            Provides the functionality to bind a single constructor at resolve time.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ConstructorBinder.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.ConstructorBinder"/> class.
            </summary>
            <param name="constructorInfo">The constructor.</param>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ConstructorBinder.Constructor">
            <summary>
            Gets the constructor this binder is responsible for binding.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ConstructorBinder.Parameters">
            <summary>
            Gets the set of parameters to bind against.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ConstructorBinder.ParameterCount">
            <summary>
            Gets the number of parameters.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ConstructorBinder.Bind(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.IComponentContext)">
            <summary>
            Binds the set of parameters to the constructor. <see cref="P:Autofac.Core.Activators.Reflection.BoundConstructor.CanInstantiate"/> indicates success.
            </summary>
            <param name="availableParameters">The set of all parameters.</param>
            <param name="context">The current component context.</param>
            <returns>The bind result.</returns>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ConstructorBinder.GetConstructorInvoker">
            <summary>
            Get the constructor factory delegate.
            </summary>
            <remarks>Will return null if the constructor contains an invalid parameter.</remarks>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.DefaultConstructorFinder">
            <summary>
            Finds constructors that match a finder function.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.DefaultConstructorFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.DefaultConstructorFinder" /> class.
            </summary>
            <remarks>
            Default to selecting all public constructors.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.DefaultConstructorFinder.#ctor(System.Func{System.Type,System.Reflection.ConstructorInfo[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.DefaultConstructorFinder" /> class.
            </summary>
            <param name="finder">The finder function.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.DefaultConstructorFinder.FindConstructors(System.Type)">
            <summary>
            Finds suitable constructors on the target type.
            </summary>
            <param name="targetType">Type to search for constructors.</param>
            <returns>Suitable constructors.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.DefaultValueParameter">
            <summary>
            Provides parameters that have a default value, set with an optional parameter
            declaration in C# or VB.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.DefaultValueParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the <paramref name="valueProvider" /> parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is <see langword="false" />,
            will be set to <see langword="null" />.</param>
            <returns><see langword="true" /> if a value can be supplied; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="pi" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.IConstructorFinder">
            <summary>
            Find suitable constructors from which to select.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.IConstructorFinder.FindConstructors(System.Type)">
            <summary>
            Finds suitable constructors on the target type.
            </summary>
            <param name="targetType">Type to search for constructors.</param>
            <returns>Suitable constructors.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.IConstructorSelector">
            <summary>
            Selects the best constructor from a set of available constructors.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.IConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.BoundConstructor[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <param name="parameters">Parameters to the instance being resolved.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.IConstructorSelectorWithEarlyBinding">
            <summary>
            Defines an interface that indicates a constructor selector can attempt to
            determine the correct constructor early, as the container is built,
            without needing to understand the set of parameters in each resolve.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.IConstructorSelectorWithEarlyBinding.SelectConstructorBinder(Autofac.Core.Activators.Reflection.ConstructorBinder[])">
            <summary>
            Given the set of all found constructors for a registration, try and
            select the correct single <see cref="T:Autofac.Core.Activators.Reflection.ConstructorBinder"/> to use.
            </summary>
            <param name="constructorBinders">
            The set of binders for all constructors found by
            <see cref="T:Autofac.Core.Activators.Reflection.IConstructorFinder"/> on the registration.
            </param>
            <returns>
            The single, correct binder to use. If the method returns null, this
            indicates the selector requires resolve-time parameters, and the default
            <see cref="M:Autofac.Core.Activators.Reflection.IConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.BoundConstructor[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})"/> method will
            be invoked.
            </returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector">
            <summary>
            Selects a constructor based on its signature.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector"/> class.
            </summary>
            <param name="signature">Signature to match.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.BoundConstructor[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <param name="parameters">Parameters to the instance being resolved.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.SelectConstructorBinder(Autofac.Core.Activators.Reflection.ConstructorBinder[])">
            <summary>
            Selects the best constructor from the available constructor bindings.
            </summary>
            <param name="constructorBinders">Available constructors.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.AtLeastOneBindingRequired">
            <summary>
              Looks up a localized string similar to At least one binding must be provided in order to select a constructor..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.RequiredConstructorNotAvailable">
            <summary>
              Looks up a localized string similar to The required constructor on type &apos;{0}&apos; with signature &apos;{1}&apos; is unavailable..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.TooManyConstructorsMatch">
            <summary>
              Looks up a localized string similar to More than one constructor matches the signature &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector">
            <summary>
            Selects the constructor with the most parameters.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.BoundConstructor[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <param name="parameters">Parameters to the instance being resolved.</param>
            <returns>The best constructor.</returns>
            <exception cref='T:Autofac.Core.DependencyResolutionException'>A single unambiguous match could not be chosen.</exception>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources.UnableToChooseFromMultipleConstructors">
            <summary>
              Looks up a localized string similar to Cannot choose between multiple constructors with equal length {0} on type &apos;{1}&apos;. Select the constructor explicitly, with the UsingConstructor() configuration method, when the component is registered..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.NoConstructorsFoundException">
            <summary>
            Exception thrown when no suitable constructors could be found on a type.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.NoConstructorsFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.NoConstructorsFoundException"/> class.
            </summary>
            <param name="offendingType">The <see cref="T:System.Type"/> whose constructor was not found.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.NoConstructorsFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.NoConstructorsFoundException"/> class.
            </summary>
            <param name="offendingType">The <see cref="T:System.Type"/> whose constructor was not found.</param>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.NoConstructorsFoundException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.NoConstructorsFoundException"/> class.
            </summary>
            <param name="offendingType">The <see cref="T:System.Type"/> whose constructor was not found.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.NoConstructorsFoundException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.NoConstructorsFoundException"/> class.
            </summary>
            <param name="offendingType">The <see cref="T:System.Type"/> whose constructor was not found.</param>
            <param name="message">Exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.NoConstructorsFoundException.OffendingType">
            <summary>
            Gets the type without found constructors.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that was processed by an <see cref="T:Autofac.Core.Activators.Reflection.IConstructorFinder"/>
            or similar mechanism and was determined to have no available constructors.
            </value>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.NoConstructorsFoundExceptionResources.Message">
            <summary>
              Looks up a localized string similar to No accessible constructors were found for the type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivator">
            <summary>
            Uses reflection to activate instances of a type.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.#ctor(System.Type,Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac.Core.Activators.Reflection.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.ReflectionActivator"/> class.
            </summary>
            <param name="implementationType">Type to activate.</param>
            <param name="constructorFinder">Constructor finder.</param>
            <param name="constructorSelector">Constructor selector.</param>
            <param name="configuredParameters">Parameters configured explicitly for this instance.</param>
            <param name="configuredProperties">Properties configured explicitly for this instance.</param>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorFinder">
            <summary>
            Gets the constructor finder.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorSelector">
            <summary>
            Gets the constructor selector.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.ConfigurePipeline(Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision.
            </remarks>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.ConstructorSelectorCannotSelectAnInvalidBinding">
            <summary>
              Looks up a localized string similar to The constructor selector provided by &apos;{0}&apos; selected a binding that cannot be instantiated. Selectors must return a constructor where &apos;CanInstantiate&apos; is true..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsAvailable">
            <summary>
              Looks up a localized string similar to No constructors on type &apos;{0}&apos; can be found with the constructor finder &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsBindable">
            <summary>
              Looks up a localized string similar to None of the constructors found with &apos;{0}&apos; on type &apos;{1}&apos; can be invoked with the available services and parameters:{2}.
            </summary>
        </member>
        <member name="T:Autofac.Core.DelegatePropertySelector">
            <summary>
            Provides a property selector that applies a filter defined by a delegate.
            </summary>
        </member>
        <member name="M:Autofac.Core.DelegatePropertySelector.#ctor(System.Func{System.Reflection.PropertyInfo,System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DelegatePropertySelector"/> class
            that invokes a delegate to determine selection.
            </summary>
            <param name="finder">Delegate to determine whether a property should be injected.</param>
        </member>
        <member name="M:Autofac.Core.DelegatePropertySelector.InjectProperty(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.IPropertySelector">
            <summary>
            Finds suitable properties to inject.
            </summary>
        </member>
        <member name="M:Autofac.Core.IPropertySelector.InjectProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Provides filtering to determine if property should be injected.
            </summary>
            <param name="propertyInfo">Property to be injected.</param>
            <param name="instance">Instance that has the property to be injected.</param>
            <returns>Whether property should be injected.</returns>
        </member>
        <member name="T:Autofac.Core.AutoActivateService">
            <summary>
            Service used as a "flag" to indicate a particular component should be
            automatically activated on container build.
            </summary>
        </member>
        <member name="P:Autofac.Core.AutoActivateService.Description">
            <summary>
            Gets the service description.
            </summary>
            <value>
            Always returns <c>AutoActivate</c>.
            </value>
        </member>
        <member name="M:Autofac.Core.AutoActivateService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <see langword="true" /> if the specified <see cref="T:System.Object"/> is not <see langword="null" />
            and is an <see cref="T:Autofac.Core.AutoActivateService"/>; otherwise, <see langword="false" />.
            </returns>
            <remarks>
            <para>
            All services of this type are considered "equal".
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Core.AutoActivateService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>. Always <c>0</c> for this type.
            </returns>
            <remarks>
            <para>
            All services of this type are considered "equal" and use the same hash code.
            </para>
            </remarks>
        </member>
        <member name="T:Autofac.Core.ComponentRegisteredEventArgs">
            <summary>
            Information about the ocurrence of a component being registered
            with a container.
            </summary>
        </member>
        <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistryBuilder">
            <summary>
            Gets the <see cref="T:Autofac.Core.Registration.IComponentRegistryBuilder" /> into which the registration was made.
            </summary>
        </member>
        <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistration">
            <summary>
            Gets the component registration.
            </summary>
        </member>
        <member name="M:Autofac.Core.ComponentRegisteredEventArgs.#ctor(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ComponentRegisteredEventArgs"/> class.
            </summary>
            <param name="registryBuilder">The <see cref="T:Autofac.Core.Registration.IComponentRegistryBuilder" /> into which the registration was made.</param>
            <param name="componentRegistration">The component registration.</param>
        </member>
        <member name="T:Autofac.Core.ComponentRegistrationExtensions">
            <summary>
            Extension methods for <see cref="T:Autofac.Core.IComponentRegistration"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.ComponentRegistrationExtensions.MatchingLifetimeScopeTags(Autofac.Core.IComponentRegistration)">
            <summary>
            For components registered instance-per-matching-lifetime-scope, retrieves the set
            of lifetime scope tags to match.
            </summary>
            <param name="registration">
            The <see cref="T:Autofac.Core.IComponentRegistration"/> to query for matching lifetime scope tags.
            </param>
            <returns>
            If the component is registered instance-per-matching-lifetime-scope, this method returns
            the set of matching lifetime scope tags. If the component is singleton, instance-per-scope,
            instance-per-dependency, or otherwise not an instance-per-matching-lifetime-scope
            component, this method returns an empty enumeration.
            </returns>
        </member>
        <member name="M:Autofac.Core.ComponentRegistrationExtensions.ConfigurePipeline(Autofac.Core.IComponentRegistration,System.Action{Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder})">
            <summary>
            Provides access to the registration's pipeline builder, allowing custom middleware to be added.
            </summary>
            <param name="componentRegistration">The component registration.</param>
            <param name="configurationAction">An action that can configure the registration's pipeline.</param>
            <exception cref="T:System.InvalidOperationException">
            Attaching to this event after a component registration
            has already been built will throw an exception.
            </exception>
        </member>
        <member name="T:Autofac.Core.ConstantParameter">
            <summary>
            Base class for parameters that provide a constant value.
            </summary>
        </member>
        <member name="P:Autofac.Core.ConstantParameter.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="M:Autofac.Core.ConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ConstantParameter"/> class.
            </summary>
            <param name="value">
            The constant parameter value.
            </param>
            <param name="predicate">
            A predicate used to locate the parameter that should be populated by the constant.
            </param>
        </member>
        <member name="M:Autofac.Core.ConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="T:Autofac.Core.Container">
            <summary>
            Standard container implementation.
            </summary>
        </member>
        <member name="M:Autofac.Core.Container.#ctor(Autofac.Core.IComponentRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Container"/> class.
            </summary>
            <param name="componentRegistry">The registry of components.</param>
        </member>
        <member name="M:Autofac.Core.Container.BeginLifetimeScope">
            <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="P:Autofac.Core.Container.DiagnosticSource">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Container.Disposer">
            <summary>
            Gets the disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Autofac.Core.Container.Tag">
            <summary>
            Gets the tag applied to the lifetime scope.
            </summary>
            <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
        </member>
        <member name="E:Autofac.Core.Container.ChildLifetimeScopeBeginning">
            <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
        </member>
        <member name="E:Autofac.Core.Container.CurrentScopeEnding">
            <summary>
            Fired when this scope is ending.
            </summary>
        </member>
        <member name="E:Autofac.Core.Container.ResolveOperationBeginning">
            <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
        </member>
        <member name="P:Autofac.Core.Container.ComponentRegistry">
            <summary>
            Gets associated services with the components that provide them.
            </summary>
        </member>
        <member name="M:Autofac.Core.Container.ResolveComponent(Autofac.ResolveRequest)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Container.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Container.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Container.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="T:Autofac.Core.ContainerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.ContainerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.ContainerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.ContainerResources.SelfRegistrationCannotBeActivated">
            <summary>
              Looks up a localized string similar to The container&apos;s self-registration of context interfaces should never be activated as it is hard-wired into the LifetimeScope class..
            </summary>
        </member>
        <member name="T:Autofac.Core.DependencyResolutionException">
            <summary>
            Base exception type thrown whenever the dependency resolution process fails. This is a fatal
            exception, as Autofac is unable to 'roll back' changes to components that may have already
            been made during the operation. For example, 'on activated' handlers may have already been
            fired, or 'single instance' components partially constructed.
            </summary>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException"/> class.
            </summary>
            <param name="info">The serialisation info.</param>
            <param name="context">The serialisation streaming context.</param>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Autofac.Core.Disposer">
            <summary>
            Maintains a set of objects to dispose, and disposes them in the reverse order
            from which they were added when the Disposer is itself disposed.
            </summary>
        </member>
        <member name="F:Autofac.Core.Disposer._items">
            <summary>
            Contents all implement IDisposable or IAsyncDisposable.
            </summary>
        </member>
        <member name="M:Autofac.Core.Disposer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Disposer.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Disposer.AddInstanceForAsyncDisposal(System.IAsyncDisposable)">
            <summary>
            Adds an object to the disposer, where that object only implements IAsyncDisposable. When the disposer is
            disposed, so will the object be.
            This is not typically recommended, and you should implement IDisposable as well.
            </summary>
            <param name="instance">The instance.</param>
            <remarks>
            If this Disposer is disposed of using a synchronous Dispose call, that call will throw an exception.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Disposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Autofac.Core.DisposerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.DisposerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.DisposerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.DisposerResources.CannotAddToDisposedDisposer">
            <summary>
              Looks up a localized string similar to The Disposer object has already been Disposed, so no items can be added to it..
            </summary>
        </member>
        <member name="P:Autofac.Core.DisposerResources.TypeOnlyImplementsIAsyncDisposable">
            <summary>
              Looks up a localized string similar to AUTOFAC: A synchronous Dispose has been attempted, but the tracked object of type &apos;{0}&apos; only implements IAsyncDisposable. This will result in an inefficient blocking dispose. Consider either implementing IDisposable on &apos;{0}&apos; or disposing of the scope/container with DisposeAsync..
            </summary>
        </member>
        <member name="T:Autofac.Core.IActivatedEventArgs`1">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatedEventArgs`1.Service">
            <summary>
            Gets the service being resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatedEventArgs`1.Context">
            <summary>
            Gets the context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatedEventArgs`1.Component">
            <summary>
            Gets the component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatedEventArgs`1.Parameters">
            <summary>
            Gets the paramters provided when resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatedEventArgs`1.Instance">
            <summary>
            Gets the instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="T:Autofac.Core.IActivatingEventArgs`1">
            <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatingEventArgs`1.Service">
            <summary>
            Gets the service being resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatingEventArgs`1.Context">
            <summary>
            Gets the context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatingEventArgs`1.Component">
            <summary>
            Gets the component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.Core.IActivatingEventArgs`1.Instance">
            <summary>
            Gets the instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="M:Autofac.Core.IActivatingEventArgs`1.ReplaceInstance(System.Object)">
            <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
            <param name="instance">The object to use instead of the activated instance.</param>
        </member>
        <member name="P:Autofac.Core.IActivatingEventArgs`1.Parameters">
            <summary>
            Gets the parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Autofac.Core.IComponentLifetime">
            <summary>
            Locates the lifetime to which instances of a component should be attached.
            </summary>
        </member>
        <member name="M:Autofac.Core.IComponentLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.Core.IComponentRegistration">
            <summary>
            Describes a logical component within the container.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Id">
            <summary>
            Gets a unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Activator">
            <summary>
            Gets the activator used to create instances.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Lifetime">
            <summary>
            Gets the lifetime associated with the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Sharing">
            <summary>
            Gets a value indicating whether the component instances are shared or not.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Ownership">
            <summary>
            Gets a value indicating whether the instances of the component should be disposed by the container.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Services">
            <summary>
            Gets the services provided by the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Metadata">
            <summary>
            Gets additional data associated with the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Target">
            <summary>
            Gets the component registration upon which this registration is based.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.ResolvePipeline">
            <summary>
            Gets the resolve pipeline for the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Options">
            <summary>
            Gets the options for the registration.
            </summary>
        </member>
        <member name="E:Autofac.Core.IComponentRegistration.PipelineBuilding">
            <summary>
            Provides an event that will be invoked just before a pipeline is built, and can be used to add additional middleware
            at that point.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Attaching to this event after a component registration
            has already been built will throw an exception.
            </exception>
        </member>
        <member name="M:Autofac.Core.IComponentRegistration.BuildResolvePipeline(Autofac.Core.IComponentRegistryServices)">
            <summary>
            Builds the resolve pipeline.
            </summary>
            <param name="registryServices">The available services.</param>
        </member>
        <member name="T:Autofac.Core.IComponentRegistry">
            <summary>
            Provides component registrations according to the services they provide.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistry.Properties">
            <summary>
            Gets the set of properties used during component registration.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that can be used to share
            context across registrations.
            </value>
        </member>
        <member name="P:Autofac.Core.IComponentRegistry.Registrations">
            <summary>
            Gets the set of registered components.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistry.Sources">
            <summary>
            Gets the registration sources that are used by the registry.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistry.ServiceMiddlewareSources">
            <summary>
            Gets the set of service middleware sources that are used by the registry.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistry.HasLocalComponents">
            <summary>
            Gets a value indicating whether the registry contains its own components.
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
            <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customized scope.</remarks>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to find a default registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="registration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.TryGetServiceRegistration(Autofac.Core.Service,Autofac.Core.ServiceRegistration@)">
            <summary>
            Attempts to find a default service registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="serviceRegistration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.ServiceMiddlewareFor(Autofac.Core.Service)">
            <summary>
            Gets the set of custom service middleware for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <returns>The set of custom service middleware.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.ServiceRegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available service registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Service registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="T:Autofac.Core.IComponentRegistryServices">
            <summary>
            Defines an interface for accessing the set of services available during pipeline build time.
            </summary>
        </member>
        <member name="M:Autofac.Core.IComponentRegistryServices.RegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistryServices.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to find a default registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="registration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistryServices.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="T:Autofac.Core.IDisposer">
            <summary>
            Provided on an object that will dispose of other objects when it is
            itself disposed.
            </summary>
        </member>
        <member name="M:Autofac.Core.IDisposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Core.IDisposer.AddInstanceForAsyncDisposal(System.IAsyncDisposable)">
            <summary>
            Adds an object to the disposer, where that object implements IAsyncDisposable. When the disposer is
            disposed, so will the object be.
            You should most likely implement IDisposable as well, and call <see cref="M:Autofac.Core.IDisposer.AddInstanceForDisposal(System.IDisposable)"/> instead of this method.
            </summary>
            <param name="instance">The instance.</param>
            <remarks>
            If the provided object only implements IAsyncDisposable, and the <see cref="T:Autofac.Core.IDisposer"/> is disposed of using a synchronous Dispose call,
            that call will throw an exception when it attempts to dispose of the provided instance.
            </remarks>
        </member>
        <member name="T:Autofac.Core.IInstanceActivator">
            <summary>
            Activates component instances.
            </summary>
        </member>
        <member name="M:Autofac.Core.IInstanceActivator.ConfigurePipeline(Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <summary>
            Allows an implementation to add middleware to a registration's resolve pipeline.
            </summary>
            <param name="componentRegistryServices">Provides access to the set of all available services.</param>
            <param name="pipelineBuilder">The registration's pipeline builder.</param>
        </member>
        <member name="P:Autofac.Core.IInstanceActivator.LimitType">
            <summary>
            Gets the most specific type that the component instances are known to be castable to.
            </summary>
        </member>
        <member name="T:Autofac.Core.IModule">
            <summary>
            Represents a set of components and related functionality
            packaged together.
            </summary>
        </member>
        <member name="M:Autofac.Core.IModule.Configure(Autofac.Core.Registration.IComponentRegistryBuilder)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="T:Autofac.Core.ImplicitRegistrationSource">
            <summary>
            Support simple definition of implicit relationships such as <see cref="T:System.Lazy`1"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.ImplicitRegistrationSource.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ImplicitRegistrationSource"/> class.
            </summary>
            <param name="type">The implicit type. Must be generic with only one type parameter.</param>
        </member>
        <member name="M:Autofac.Core.ImplicitRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.ImplicitRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.ImplicitRegistrationSource.Description">
            <summary>
            Gets the description of the registration source.
            </summary>
        </member>
        <member name="M:Autofac.Core.ImplicitRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.ImplicitRegistrationSource.ResolveInstance``1(Autofac.IComponentContext,Autofac.ResolveRequest)">
            <summary>
            Resolves an instance of the implicit type.
            </summary>
            <typeparam name="T">The child type used in the implicit type.</typeparam>
            <param name="ctx">A component context to resolve services.</param>
            <param name="request">A resolve request.</param>
            <returns>An implicit type instance.</returns>
        </member>
        <member name="M:Autofac.Core.ImplicitRegistrationSource.BuildRegistration(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle})">
            <summary>
            Allows hooking into the registration pipeline of the registration source, useful for such things as marking a registration as externally owned.
            </summary>
            <param name="registration">The registration builder.</param>
            <returns>The updated registration builder.</returns>
        </member>
        <member name="T:Autofac.Core.ImplicitRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.ImplicitRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.ImplicitRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.ImplicitRegistrationSourceResources.GenericTypeMustBeUnary">
            <summary>
              Looks up a localized string similar to Type must have a single generic parameter.
            </summary>
        </member>
        <member name="P:Autofac.Core.ImplicitRegistrationSourceResources.TypeMustBeGeneric">
            <summary>
              Looks up a localized string similar to Type must be generic.
            </summary>
        </member>
        <member name="T:Autofac.Core.InstanceOwnership">
            <summary>
            Determines when instances supporting IDisposable are disposed.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceOwnership.ExternallyOwned">
            <summary>
            The lifetime scope does not dispose the instances.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceOwnership.OwnedByLifetimeScope">
            <summary>
            The instances are disposed when the lifetime scope is disposed.
            </summary>
        </member>
        <member name="T:Autofac.Core.InstanceSharing">
            <summary>
            Determines whether instances are shared within a lifetime scope.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceSharing.None">
            <summary>
            Each request for an instance will return a new object.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceSharing.Shared">
            <summary>
            Each request for an instance will return the same object.
            </summary>
        </member>
        <member name="T:Autofac.Core.IRegistrationSource">
            <summary>
            Allows registrations to be made on-the-fly when unregistered
            services are requested (lazy registrations.)
            </summary>
        </member>
        <member name="M:Autofac.Core.IRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
            <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service"/>.
            </remarks>
        </member>
        <member name="P:Autofac.Core.IRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets a value indicating whether the registrations provided by this source are 1:1 adapters on top
            of other components (e.g., Meta, Func, or Owned).
            </summary>
        </member>
        <member name="T:Autofac.Core.IServiceWithType">
            <summary>
            Interface supported by services that carry type information.
            </summary>
        </member>
        <member name="P:Autofac.Core.IServiceWithType.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="M:Autofac.Core.IServiceWithType.ChangeType(System.Type)">
            <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType"/> as the <see cref="P:Autofac.Core.IServiceWithType.ServiceType"/>.
            </summary>
            <param name="newType">The new service type.</param>
            <returns>A new service with the service type.</returns>
        </member>
        <member name="T:Autofac.Core.ISharingLifetimeScope">
            <summary>
            Defines a nested structure of lifetimes.
            </summary>
        </member>
        <member name="P:Autofac.Core.ISharingLifetimeScope.RootLifetimeScope">
            <summary>
            Gets the root of the sharing hierarchy.
            </summary>
        </member>
        <member name="P:Autofac.Core.ISharingLifetimeScope.ParentLifetimeScope">
            <summary>
            Gets the parent of this node of the hierarchy, or null.
            </summary>
        </member>
        <member name="M:Autofac.Core.ISharingLifetimeScope.TryGetSharedInstance(System.Guid,System.Object@)">
            <summary>
            Try to retrieve a shared instance based on a GUID key.
            </summary>
            <param name="id">Key to look up.</param>
            <param name="value">The instance that has the specified key.</param>
            <returns><c>true</c> if the key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Autofac.Core.ISharingLifetimeScope.TryGetSharedInstance(System.Guid,System.Nullable{System.Guid},System.Object@)">
            <summary>
            Try to retrieve a shared instance based on a primary GUID key and
            possible secondary qualifying GUID key.
            </summary>
            <param name="primaryId">Key to look up.</param>
            <param name="qualifyingId">
            Secondary key to look up, to better identify an instance that wraps around another instance
            or is otherwise "namespaced" by it.
            </param>
            <param name="value">The instance that has the specified keys.</param>
            <returns><c>true</c> if the key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Autofac.Core.ISharingLifetimeScope.CreateSharedInstance(System.Guid,System.Func{System.Object})">
            <summary>
            Creates a shared instance with a GUID key.
            </summary>
            <param name="id">Key.</param>
            <param name="creator">A function that will create the instance when called.</param>
            <returns>The shared instance.</returns>
        </member>
        <member name="M:Autofac.Core.ISharingLifetimeScope.CreateSharedInstance(System.Guid,System.Nullable{System.Guid},System.Func{System.Object})">
            <summary>
            Creates a shared instance with a primary GUID key and
            possible secondary qualifying GUID key.
            </summary>
            <param name="primaryId">Key.</param>
            <param name="qualifyingId">
            Secondary key, to better identify an instance that wraps around another instance
            or is otherwise "namespaced" by it.
            </param>
            <param name="creator">A function that will create the instance when called.</param>
            <returns>The shared instance.</returns>
        </member>
        <member name="T:Autofac.Core.KeyedService">
            <summary>
            Identifies a service using a key in addition to its type.
            </summary>
        </member>
        <member name="M:Autofac.Core.KeyedService.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.KeyedService"/> class.
            </summary>
            <param name="serviceKey">Key of the service.</param>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="P:Autofac.Core.KeyedService.ServiceKey">
            <summary>
            Gets the key of the service.
            </summary>
            <value>The key of the service.</value>
        </member>
        <member name="P:Autofac.Core.KeyedService.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Autofac.Core.KeyedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Autofac.Core.KeyedService.Equals(Autofac.Core.KeyedService)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Autofac.Core.KeyedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Autofac.Core.KeyedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Autofac.Core.KeyedService.ChangeType(System.Type)">
            <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType"/> as the <see cref="P:Autofac.Core.KeyedService.ServiceType"/>.
            </summary>
            <param name="newType">The new service type.</param>
            <returns>A new service with the service type.</returns>
        </member>
        <member name="T:Autofac.Core.Lifetime.CurrentScopeLifetime">
            <summary>
            Attaches the instance's lifetime to the current lifetime scope.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.CurrentScopeLifetime.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Autofac.Core.Lifetime.CurrentScopeLifetime"/> behaviour.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.CurrentScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.Core.Lifetime.LifetimeScope">
            <summary>
            Lifetime scope implementation.
            </summary>
        </member>
        <member name="F:Autofac.Core.Lifetime.LifetimeScope._synchRoot">
            <summary>
            Protects shared instances from concurrent access. Other members and the base class are threadsafe.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.SelfRegistrationId">
            <summary>
            Gets the id of the lifetime scope self-registration.
            </summary>
        </member>
        <member name="F:Autofac.Core.Lifetime.LifetimeScope.RootTag">
            <summary>
            The tag applied to root scopes when no other tag is specified.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.Lifetime.LifetimeScope,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScope"/> class.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="componentRegistry">Components used in the scope.</param>
            <param name="parent">Parent scope.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScope"/> class.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="componentRegistry">Components used in the scope.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScope"/> class.
            </summary>
            <param name="componentRegistry">Components used in the scope.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope">
            <summary>
            Begin a new anonymous sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new tagged sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.DiagnosticSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.DiagnosticListener"/> to which
            trace events should be written.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new anonymous sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
            <example>
            <code>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope(builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </code>
            </example>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new tagged sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
            <example>
            <code>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope("unitOfWork", builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </code>
            </example>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.CreateScopeRestrictedRegistry(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Creates and setup the registry for a child scope.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the child scope.</param>
            <returns>Registry to use for a child scope.</returns>
            <remarks>It is the responsibility of the caller to make sure that the registry is properly
            disposed of. This is generally done by adding the registry to the <see cref="P:Autofac.Core.Lifetime.LifetimeScope.Disposer"/>
            property of the child scope.</remarks>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(Autofac.ResolveRequest)">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.ParentLifetimeScope">
            <summary>
            Gets the parent of this node of the hierarchy, or null.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.RootLifetimeScope">
            <summary>
            Gets the root of the sharing hierarchy.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.CreateSharedInstance(System.Guid,System.Func{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.CreateSharedInstance(System.Guid,System.Nullable{System.Guid},System.Func{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.TryGetSharedInstance(System.Guid,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.TryGetSharedInstance(System.Guid,System.Nullable{System.Guid},System.Object@)">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.Disposer">
            <summary>
            Gets the disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.Tag">
            <summary>
            Gets the tag applied to the lifetime scope.
            </summary>
            <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.ComponentRegistry">
            <summary>
            Gets the services associated with the components that provide them.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.IsTreeDisposed">
            <summary>
            Gets a value indicating whether this or any of the parent disposables have been disposed.
            </summary>
            <returns>true if this instance of any of the parent instances have been disposed.</returns>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="E:Autofac.Core.Lifetime.LifetimeScope.ChildLifetimeScopeBeginning">
            <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
        </member>
        <member name="E:Autofac.Core.Lifetime.LifetimeScope.CurrentScopeEnding">
            <summary>
            Fired when this scope is ending.
            </summary>
        </member>
        <member name="E:Autofac.Core.Lifetime.LifetimeScope.ResolveOperationBeginning">
            <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs">
            <summary>
            Describes when a lifetime scope is beginning.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs"/> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope that is beginning.</param>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.LifetimeScope">
            <summary>
            Gets the lifetime scope that is beginning.
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs">
            <summary>
            Describes when a lifetime scope is ending.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs"/> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope that is ending.</param>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.LifetimeScope">
            <summary>
            Gets the lifetime scope that is ending.
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.LifetimeScopeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.DuplicateTagDetected">
            <summary>
              Looks up a localized string similar to The tag &apos;{0}&apos; has already been assigned to a parent lifetime scope. If you are using Owned&lt;T&gt; this indicates you may have a circular dependency chain..
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.ScopeIsDisposed">
            <summary>
              Looks up a localized string similar to Instances cannot be resolved and nested lifetimes cannot be created from this LifetimeScope as it (or one of its parent scopes) has already been disposed..
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.SelfConstructingDependencyDetected">
            <summary>
              Looks up a localized string similar to The constructor of type &apos;{0}&apos; attempted to create another instance of itself. This is not permitted because the service is configured to only allowed a single instance per lifetime scope..
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetime">
            <summary>
            Attaches the component's lifetime to scopes matching a supplied expression.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Lifetime.MatchingScopeLifetime"/> class.
            </summary>
            <param name="lifetimeScopeTagsToMatch">The tags applied to matching scopes.</param>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetime.TagsToMatch">
            <summary>
            Gets the list of lifetime scope tags to match.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of object tags to match
            when searching for the lifetime scope for the component.
            </value>
        </member>
        <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetimeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.MatchingScopeNotFound">
             <summary>
               Looks up a localized string similar to No scope with a tag matching &apos;{0}&apos; is visible from the scope in which the instance was requested.
            
            If you see this during execution of a web application, it generally indicates that a component registered as per-HTTP request is being requested by a SingleInstance() component (or a similar scenario). Under the web integration always request dependencies from the dependency resolver or the request lifetime scope, never from the container itself..
             </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetimeTags">
            <summary>
            Well-known tags used in setting up matching lifetime scopes.
            </summary>
        </member>
        <member name="F:Autofac.Core.Lifetime.MatchingScopeLifetimeTags.RequestLifetimeScopeTag">
            <summary>
            Tag used in setting up per-request lifetime scope registrations
            (e.g., per-HTTP-request or per-API-request).
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.RootScopeLifetime">
            <summary>
            Attaches the component's lifetime to the root scope.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.RootScopeLifetime.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Autofac.Core.Lifetime.RootScopeLifetime"/> behaviour.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.RootScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.Core.NamedPropertyParameter">
            <summary>
            A property identified by name. When applied to a reflection-based
            component, the name will be matched against property names.
            </summary>
        </member>
        <member name="P:Autofac.Core.NamedPropertyParameter.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="M:Autofac.Core.NamedPropertyParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.NamedPropertyParameter"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="T:Autofac.Core.Parameter">
            <summary>
            Used in order to provide a value to a constructor parameter or property on an instance
            being created by the container.
            </summary>
            <remarks>
            Not all parameters can be applied to all sites.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Parameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="T:Autofac.Core.PreparingEventArgs">
            <summary>
            Fired before the activation process to allow parameters to be changed or an alternative
            instance to be provided.
            </summary>
        </member>
        <member name="M:Autofac.Core.PreparingEventArgs.#ctor(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.PreparingEventArgs"/> class.
            </summary>
            <param name="service">The service being resolved.</param>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs.Service">
            <summary>
            Gets the service being resolved.
            </summary>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs.Context">
            <summary>
            Gets the context in which the activation is occurring.
            </summary>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs.Component">
            <summary>
            Gets the component providing the instance being activated.
            </summary>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs.Parameters">
            <summary>
            Gets or sets the parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentNotRegisteredException">
            <summary>
            A service was requested that cannot be provided by the container. To avoid this exception, either register a component
            to provide the required service, check for service registration using IsRegistered(), or use the ResolveOptional()
            method to resolve an optional dependency.
            </summary>
            <remarks>This exception is fatal. See <see cref="T:Autofac.Core.DependencyResolutionException"/> for more information.</remarks>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Message">
            <summary>
              Looks up a localized string similar to The requested service &apos;{0}&apos; has not been registered. To avoid this exception, either register a component to provide the service, check for service registration using IsRegistered(), or use the ResolveOptional() method to resolve an optional dependency..
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentPipelineBuildingArgs">
            <summary>
            Event arguments for the <see cref="E:Autofac.Core.IComponentRegistration.PipelineBuilding"/> event.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentPipelineBuildingArgs.#ctor(Autofac.Core.IComponentRegistration,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentPipelineBuildingArgs"/> class.
            </summary>
            <param name="registration">The registration.</param>
            <param name="pipelineBuilder">The pipeline builder.</param>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentPipelineBuildingArgs.Registration">
            <summary>
            Gets the component registration whose pipeline is being built.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentPipelineBuildingArgs.PipelineBuilder">
            <summary>
            Gets the pipeline builder for the registration. Add middleware to the builder to add to the component behaviour.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistration">
            <summary>
            Describes a logical component within the container.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistration.OptionsCopiedFromTargetRegistration">
            <summary>
            Defines the options copied from a target registration onto this one.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.IComponentRegistration,Autofac.Core.Registration.RegistrationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistration"/> class.
            </summary>
            <param name="id">The registration id.</param>
            <param name="activator">The component activator.</param>
            <param name="lifetime">The lifetime for activated instances.</param>
            <param name="sharing">The sharing setting for the registration.</param>
            <param name="ownership">The ownership setting for the registration.</param>
            <param name="services">The set of services provided by the registration.</param>
            <param name="metadata">Any metadata associated with the registration.</param>
            <param name="target">The target/inner registration.</param>
            <param name="options">Contains options for the registration.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.Registration.RegistrationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistration"/> class.
            </summary>
            <param name="id">Unique identifier for the component.</param>
            <param name="activator">Activator used to activate instances.</param>
            <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
            <param name="sharing">Whether the component is shared within its lifetime scope.</param>
            <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
            <param name="services">Services the component provides.</param>
            <param name="metadata">Data associated with the component.</param>
            <param name="options">Contains options for the registration.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.Registration.RegistrationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistration"/> class.
            </summary>
            <param name="id">Unique identifier for the component.</param>
            <param name="activator">Activator used to activate instances.</param>
            <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
            <param name="sharing">Whether the component is shared within its lifetime scope.</param>
            <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
            <param name="pipelineBuilder">The resolve pipeline builder for the registration.</param>
            <param name="services">Services the component provides.</param>
            <param name="metadata">Data associated with the component.</param>
            <param name="options">The additional registration options.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.IComponentRegistration,Autofac.Core.Registration.RegistrationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistration"/> class.
            </summary>
            <param name="id">Unique identifier for the component.</param>
            <param name="activator">Activator used to activate instances.</param>
            <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
            <param name="sharing">Whether the component is shared within its lifetime scope.</param>
            <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
            <param name="pipelineBuilder">The resolve pipeline builder for the registration.</param>
            <param name="services">Services the component provides.</param>
            <param name="metadata">Data associated with the component.</param>
            <param name="target">The component registration upon which this registration is based.</param>
            <param name="options">Registration options.</param>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Target">
            <summary>
            Gets the component registration upon which this registration is based.
            If this registration was created directly by the user, returns this.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Id">
            <summary>
            Gets a unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Activator">
            <summary>
            Gets the activator for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Lifetime">
            <summary>
            Gets the lifetime associated with the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Sharing">
            <summary>
            Gets information about whether the component instances are shared or not.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Ownership">
            <summary>
            Gets information about whether the instances of the component should be disposed by the container.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Services">
            <summary>
            Gets the services provided by the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Metadata">
            <summary>
            Gets additional data associated with the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Options">
            <summary>
            Gets the options for the registration.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistration.PipelineBuilding">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.ResolvePipeline">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.BuildResolvePipeline(Autofac.Core.IComponentRegistryServices)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.BuildResolvePipeline(Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <summary>
            Populates the resolve pipeline with middleware based on the registration, and builds the pipeline.
            </summary>
            <param name="registryServices">The known set of all services.</param>
            <param name="pipelineBuilder">The registration's pipeline builder (with user-added middleware already in it).</param>
            <returns>The built pipeline.</returns>
            <remarks>
            A derived implementation can use this to add additional middleware, or return a completely different pipeline if required.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.ToString">
            <summary>
            Describes the component in a human-readable form.
            </summary>
            <returns>A description of the component.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.DisposeAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistrationExtensions">
            <summary>
            Internal Extension methods for component registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistrationExtensions.IsAdapting(Autofac.Core.IComponentRegistration)">
            <summary>
            Gets a value indicating whether a given registration is adapting another registration.
            </summary>
            <param name="componentRegistration">The component registration.</param>
            <returns>True if adapting; false otherwise.</returns>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator">
            <summary>
            Wraps a component registration, switching its lifetime.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.#ctor(Autofac.Core.IComponentRegistration,Autofac.Core.IComponentLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator"/> class.
            </summary>
            <param name="inner">The inner registration.</param>
            <param name="lifetime">The enforced lifetime.</param>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Id">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Activator">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Lifetime">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Sharing">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Ownership">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Services">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Metadata">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Target">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.ResolvePipeline">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Options">
            <inheritdoc/>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.PipelineBuilding">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.BuildResolvePipeline(Autofac.Core.IComponentRegistryServices)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistrationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ComponentPipelineHasNotBeenBuilt">
            <summary>
              Looks up a localized string similar to Component pipeline has not yet been built..
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.PipelineAlreadyBuilt">
            <summary>
              Looks up a localized string similar to Component pipeline has already been built, and cannot be modified..
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.PipelineNotBuilt">
            <summary>
              Looks up a localized string similar to Not Built.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ToStringFormat">
            <summary>
              Looks up a localized string similar to Activator = {0}, Services = [{1}], Lifetime = {2}, Sharing = {3}, Ownership = {4}, Pipeline = {5}.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistry">
            <summary>
            Maps services onto the components that provide them.
            </summary>
            <remarks>
            The component registry provides services directly from components,
            and also uses <see cref="T:Autofac.Core.IRegistrationSource"/> to generate components
            on-the-fly or as adapters for other components. A component registry
            is normally used through a <see cref="T:Autofac.ContainerBuilder"/>, and not
            directly by application code.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.#ctor(Autofac.Core.Registration.IRegisteredServicesTracker,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistry"/> class.
            </summary>
            <param name="registeredServicesTracker">The tracker for the registered services.</param>
            <param name="properties">The properties used during component registration.</param>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistry.Properties">
            <summary>
            Gets the set of properties used during component registration.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that can be used to share
            context across registrations.
            </value>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistry.Registrations">
            <summary>
            Gets the registered components.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistry.Sources">
            <summary>
            Gets the registration sources that are used by the registry.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistry.ServiceMiddlewareSources">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistry.HasLocalComponents">
            <summary>
            Gets a value indicating whether the registry contains its own components.
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
            <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customized scope.</remarks>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to find a default registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="registration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.TryGetServiceRegistration(Autofac.Core.Service,Autofac.Core.ServiceRegistration@)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.ServiceMiddlewareFor(Autofac.Core.Service)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.ServiceRegistrationsFor(Autofac.Core.Service)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.DisposeAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistryBuilder">
            <summary>
            Used to build a <see cref="T:Autofac.Core.IComponentRegistry" />.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistryBuilder._registeredServicesTracker">
            <summary>
            The tracker for the registered services.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.#ctor(Autofac.Core.Registration.IRegisteredServicesTracker,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentRegistryBuilder"/> class.
            </summary>
            <param name="registeredServicesTracker">The tracker for the registered services.</param>
            <param name="properties">The properties used during component registration.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.DisposeAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistryBuilder.Properties">
            <summary>
            Gets the set of properties used during component registration.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that can be used to share
            context across registrations.
            </value>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.Build">
            <summary>
            Create a new <see cref="T:Autofac.Core.IComponentRegistry" /> with all the component registrations that have been made.
            </summary>
            <returns>A new component registry with the configured component registrations.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.Register(Autofac.Core.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.RegisterServiceMiddleware(Autofac.Core.Service,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
            <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistryBuilder.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source">The source to register.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistryBuilder.AddServiceMiddlewareSource(Autofac.Core.Registration.IServiceMiddlewareSource)">
            <inheritdoc/>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistryBuilder.RegistrationSourceAdded">
            <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.DefaultRegisteredServicesTracker">
            <summary>
            Keeps track of the status of registered services.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.DefaultRegisteredServicesTracker._serviceInfo">
            <summary>
            Keeps track of the status of registered services.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.DefaultRegisteredServicesTracker._dynamicRegistrationSources">
            <summary>
            External registration sources.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.DefaultRegisteredServicesTracker._registrations">
            <summary>
            All registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.DefaultRegisteredServicesTracker"/> class.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.DefaultRegisteredServicesTracker.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.DefaultRegisteredServicesTracker.RegistrationSourceAdded">
            <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.DefaultRegisteredServicesTracker.Registrations">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Registration.DefaultRegisteredServicesTracker.Sources">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Registration.DefaultRegisteredServicesTracker.ServiceMiddlewareSources">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.AddServiceMiddleware(Autofac.Core.Service,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.AddRegistration(Autofac.Core.IComponentRegistration,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.AddServiceMiddlewareSource(Autofac.Core.Registration.IServiceMiddlewareSource)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.ServiceMiddlewareFor(Autofac.Core.Service)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.TryGetServiceRegistration(Autofac.Core.Service,Autofac.Core.ServiceRegistration@)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.IsRegistered(Autofac.Core.Service)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.RegistrationsFor(Autofac.Core.Service)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.ServiceRegistrationsFor(Autofac.Core.Service)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.Complete">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.DefaultRegisteredServicesTracker.DisposeAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Registration.ExternalComponentRegistration">
            <summary>
             A wrapper component registration created only to distinguish it from other adapted registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ExternalComponentRegistration.#ctor(Autofac.Core.Service,Autofac.Core.IComponentRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ExternalComponentRegistration"/> class.
            </summary>
            <param name="service">The service to register for.</param>
            <param name="target">The target registration ID.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ExternalComponentRegistration.BuildResolvePipeline(Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource">
            <summary>
            Provides middleware from a parent component registry.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource.#ctor(Autofac.Core.IComponentRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource"/> class.
            </summary>
            <param name="componentRegistry">The component registry to retrieve middleware from.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ExternalRegistryServiceMiddlewareSource.ProvideMiddleware(Autofac.Core.Service,Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.ExternalRegistrySource">
            <summary>
            Pulls registrations from another component registry.
            Excludes most auto-generated registrations - currently has issues with
            collection registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ExternalRegistrySource.#ctor(Autofac.Core.IComponentRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ExternalRegistrySource"/> class.
            </summary>
            <param name="registry">Component registry to pull registrations from.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ExternalRegistrySource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="P:Autofac.Core.Registration.ExternalRegistrySource.IsAdapterForIndividualComponents">
            <summary>
            Gets a value indicating whether components are adapted from the same logical scope.
            In this case because the components that are adapted do not come from the same
            logical scope, we must return false to avoid duplicating them.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.IComponentRegistryBuilder">
            <summary>
            Used to build a <see cref="T:Autofac.Core.IComponentRegistry" />.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.Build">
            <summary>
            Create a new <see cref="T:Autofac.Core.IComponentRegistry" /> with all the component registrations that have been made.
            </summary>
            <returns>A new component registry with the configured component registrations.</returns>
        </member>
        <member name="P:Autofac.Core.Registration.IComponentRegistryBuilder.Properties">
            <summary>
            Gets the set of properties used during component registration.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that can be used to share
            context across registrations.
            </value>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.Register(Autofac.Core.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
            <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
        </member>
        <member name="E:Autofac.Core.Registration.IComponentRegistryBuilder.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source">The source to register.</param>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.AddServiceMiddlewareSource(Autofac.Core.Registration.IServiceMiddlewareSource)">
            <summary>
            Add a source of service middleware that will provide service registrations on-the-fly.
            </summary>
            <param name="serviceMiddlewareSource">The source to add.</param>
        </member>
        <member name="M:Autofac.Core.Registration.IComponentRegistryBuilder.RegisterServiceMiddleware(Autofac.Core.Service,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Register a piece of service middleware that will be invoked for all registrations of a service when they are resolved.
            </summary>
            <param name="service">The service to register middleware for.</param>
            <param name="middleware">The middleware to register.</param>
            <param name="insertionMode">The mode of insertion into the pipeline.</param>
        </member>
        <member name="E:Autofac.Core.Registration.IComponentRegistryBuilder.RegistrationSourceAdded">
            <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.IModuleRegistrar">
            <summary>
            Interface providing fluent syntax for chaining module registrations.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.IModuleRegistrar.RegistrarData">
            <summary>
            Gets the registrar data.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IModuleRegistrar.RegisterModule(Autofac.Core.IModule)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="module">The module to add.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="T:Autofac.Core.Registration.IRegisteredServicesTracker">
            <summary>
            Keeps track of the status of registered services.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.AddRegistration(Autofac.Core.IComponentRegistration,System.Boolean,System.Boolean)">
            <summary>
            Adds a registration to the list of registered services.
            </summary>
            <param name="registration">The registration to add.</param>
            <param name="preserveDefaults">Indicates whether the defaults should be preserved.</param>
            <param name="originatedFromDynamicSource">Indicates whether this is an explicitly added registration or that it has been added by a dynamic registration source.</param>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.AddServiceMiddleware(Autofac.Core.Service,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Adds a piece of middleware to a service.
            </summary>
            <param name="service">The service to add to.</param>
            <param name="middleware">The middleware.</param>
            <param name="insertionMode">The insertion mode.</param>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source">The source to register.</param>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.AddServiceMiddlewareSource(Autofac.Core.Registration.IServiceMiddlewareSource)">
            <summary>
            Adds a service middleware source that will provide service middleware on-the-fly.
            </summary>
            <param name="serviceMiddlewareSource">The source to register.</param>
        </member>
        <member name="E:Autofac.Core.Registration.IRegisteredServicesTracker.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via an <see cref="T:Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.IRegisteredServicesTracker.RegistrationSourceAdded">
            <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.Complete">
            <summary>
            Should be called prior to the construction of a <see cref="T:Autofac.Core.Registration.ComponentRegistry" /> to
            indicate that the tracker is complete, and requested service information should no longer be ephemeral.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.IRegisteredServicesTracker.Registrations">
            <summary>
            Gets the registered components.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.IRegisteredServicesTracker.Sources">
            <summary>
            Gets the registration sources that are used by the registry.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.IRegisteredServicesTracker.ServiceMiddlewareSources">
            <summary>
            Gets the set of registered service middleware sources.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.ServiceMiddlewareFor(Autofac.Core.Service)">
            <summary>
            Gets the set of configured service middleware for a service.
            </summary>
            <param name="service">The service to look up.</param>
            <returns>The set of middleware.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.TryGetServiceRegistration(Autofac.Core.Service,Autofac.Core.ServiceRegistration@)">
            <summary>
            Attempts to find a default service registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="serviceRegistration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.IRegisteredServicesTracker.ServiceRegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available service registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Service registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="T:Autofac.Core.Registration.IServiceMiddlewareSource">
            <summary>
            Interface defining a source of middleware for a service's pipeline.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IServiceMiddlewareSource.ProvideMiddleware(Autofac.Core.Service,Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <summary>
            Called when a service is first resolved; implementations can add middleware to the service using the <paramref name="pipelineBuilder"/>.
            </summary>
            <param name="service">The service being resolved.</param>
            <param name="availableServices">Access to the set of available service registrations.</param>
            <param name="pipelineBuilder">A pipeline builder that can be used to add middleware.</param>
        </member>
        <member name="T:Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar">
            <summary>
            Interface providing fluent syntax for chaining middleware source registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar.RegisterServiceMiddlewareSource(Autofac.Core.Registration.IServiceMiddlewareSource)">
            <summary>
            Adds a middleware source to the container.
            </summary>
            <param name="serviceMiddlewareSource">The middleware source to add.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar"/> to allow additional chained middleware source registrations.
            </returns>
        </member>
        <member name="T:Autofac.Core.Registration.ISourceRegistrar">
            <summary>
            Interface providing fluent syntax for chaining registration source registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ISourceRegistrar.RegisterSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="registrationSource">The registration source to add.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.ISourceRegistrar"/> to allow additional chained registration source registrations.
            </returns>
        </member>
        <member name="T:Autofac.Core.Registration.ModuleRegistrar">
            <summary>
            Basic implementation of the <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/>
            interface allowing registration of modules into a <see cref="T:Autofac.ContainerBuilder"/>
            in a fluent format.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ModuleRegistrar.#ctor(Autofac.ContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ModuleRegistrar"/> class.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which registrations will be made.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:Autofac.Core.Registration.ModuleRegistrar.RegistrarData">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Registration.ModuleRegistrar.RegisterModule(Autofac.Core.IModule)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="module">The module to add.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="module" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Core.Registration.ModuleRegistrarData">
            <summary>
            Data used by <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to support customisations to the module registration process.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ModuleRegistrarData.#ctor(Autofac.Builder.DeferredCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ModuleRegistrarData"/> class.
            </summary>
            <param name="callback">The callback for the registrar.</param>
        </member>
        <member name="P:Autofac.Core.Registration.ModuleRegistrarData.Callback">
            <summary>
            Gets the callback invoked when the collection of modules attached to this registrar are registered.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.RegistrationOptions">
            <summary>
            Defines options for a registration.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.RegistrationOptions.None">
            <summary>
            No special options; default behaviour.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.RegistrationOptions.Fixed">
            <summary>
            Indicates that this registration is 'fixed' as the default, ignoring all other registrations when determining the default registration for
            a service.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.RegistrationOptions.DisableDecoration">
            <summary>
            Registrations with this flag will not be decorated.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.RegistrationOptions.ExcludeFromCollections">
            <summary>
            Registrations with this flag will not be included in any collection resolves (i.e. <see cref="T:System.Collections.Generic.IEnumerable`1" /> and other collection types).
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.RegistrationOptions.Composite">
            <summary>
            Flag combination for composite registrations.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.RegistrationOptionsExtensions">
            <summary>
            Extension methods for registration options.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.RegistrationOptionsExtensions.HasOption(Autofac.Core.Registration.RegistrationOptions,Autofac.Core.Registration.RegistrationOptions)">
            <summary>
            Tests whether a given flag (or combined set of flags) is present in the specified
            options enumeration.
            </summary>
            <param name="options">The option to test.</param>
            <param name="flag">The flag (or flags) to test for.</param>
            <returns>True if the specified flag (or flags) are enabled for the registration.</returns>
        </member>
        <member name="T:Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker">
            <summary>
            A <see cref="T:Autofac.Core.Registration.IRegisteredServicesTracker" /> where the singletons are scoped with the provided <see cref="T:Autofac.Core.IComponentLifetime" />.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker.#ctor(Autofac.Core.IComponentLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker"/> class.
            </summary>
            <param name="restrictedRootScopeLifetime">The scope to which registrations are restricted.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ScopeRestrictedRegisteredServicesTracker.AddRegistration(Autofac.Core.IComponentRegistration,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar">
            <summary>
            Basic implementation of the <see cref="T:Autofac.Core.Registration.IServiceMiddlewareSourceRegistrar"/>
            interface allowing registration of middleware sources into a <see cref="T:Autofac.ContainerBuilder"/>
            in a fluent format.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar._builder">
            <summary>
            The <see cref="T:Autofac.ContainerBuilder"/> into which registrations will be made.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar.#ctor(Autofac.ContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar"/> class.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which registrations will be made.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceMiddlewareSourceRegistrar.RegisterServiceMiddlewareSource(Autofac.Core.Registration.IServiceMiddlewareSource)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.ServiceRegistrationInfo">
            <summary>
            Tracks the services known to the registry.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ServiceRegistrationInfo._defaultImplementations">
            <summary>
             List of implicit default service implementations. Overriding default implementations are appended to the end,
             so the enumeration should begin from the end too, and the most default implementation comes last.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ServiceRegistrationInfo._sourceImplementations">
            <summary>
             List of service implementations coming from sources. Sources have priority over preserve-default implementations.
             Implementations from sources are enumerated in preserve-default order, so the most default implementation comes first.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ServiceRegistrationInfo._preserveDefaultImplementations">
            <summary>
             List of explicit service implementations specified with the PreserveExistingDefaults option.
             Enumerated in preserve-defaults order, so the most default implementation comes first.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ServiceRegistrationInfo._sourcesToQuery">
            <summary>
            Used for bookkeeping so that the same source is not queried twice (may be null).
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.#ctor(Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ServiceRegistrationInfo"/> class.
            </summary>
            <param name="service">The tracked service.</param>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsInitialized">
            <summary>
            Gets a value indicating whether the first time a service is requested, initialization (e.g. reading from sources)
            happens. This value will then be set to true. Calling many methods on this type before
            initialization is an error.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.InitializationDepth">
            <summary>
            Gets or sets a value representing the current initialization depth. Will always be zero for initialized service blocks.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.Implementations">
            <summary>
            Gets the known implementations. The first implementation is a default one.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.ServicePipeline">
            <summary>
            Gets the service pipeline. Will throw if not initialized.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.ServiceMiddleware">
            <summary>
            Gets the set of all middleware registered against the service (excluding the default middleware).
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsRegistered">
            <summary>
            Gets a value indicating whether any implementations are known.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.AddImplementation(Autofac.Core.IComponentRegistration,System.Boolean,System.Boolean)">
            <summary>
            Add an implementation for the service.
            </summary>
            <param name="registration">The component registration.</param>
            <param name="preserveDefaults">Whether to preserve the defaults.</param>
            <param name="originatedFromSource">Whether the registration originated from a dynamic source.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.UseServiceMiddleware(Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Use the specified piece of middleware in the service pipeline.
            </summary>
            <param name="middleware">The middleware.</param>
            <param name="insertionMode">The insertion mode for the pipeline.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.UseServiceMiddlewareRange(System.Collections.Generic.IEnumerable{Autofac.Core.Resolving.Pipeline.IResolveMiddleware},Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Use the multiple specified pieces of middleware in the service pipeline.
            </summary>
            <param name="middleware">The set of middleware.</param>
            <param name="insertionMode">The insertion mode.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.TryGetRegistration(Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to access the implementing registration for this service, selecting the correct one based on defaults and all known registrations.
            </summary>
            <param name="registration">The output registration.</param>
            <returns>True if a registration was found; false otherwise.</returns>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsInitializing">
            <summary>
            Gets a value indicating whether this service info is initializing.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.HasSourcesToQuery">
            <summary>
            Gets a value indicating whether there are any sources left to query.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.BeginInitialization(System.Collections.Generic.IEnumerable{Autofac.Core.IRegistrationSource})">
            <summary>
            Begin the initialization process for this service info, given the set of dynamic sources.
            </summary>
            <param name="sources">The set of sources.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.SkipSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Skip a given source in the set of dynamic sources.
            </summary>
            <param name="source">The source to skip.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.DequeueNextSource">
            <summary>
            Dequeue the next registration source.
            </summary>
            <returns>The source.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.CompleteInitialization">
            <summary>
            Complete initialization of the service info.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.CloneUninitialized">
            <summary>
            Creates a copy of an uninitialized <see cref="T:Autofac.Core.Registration.ServiceRegistrationInfo"/>, preserving existing registrations and custom middleware.
            </summary>
            <returns>A new service registration info block.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the service registration has been initialized already.</exception>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.Autofac#Core#Resolving#Pipeline#IResolvePipelineBuilder#Middleware">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.Autofac#Core#Resolving#Pipeline#IResolvePipelineBuilder#Type">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.Autofac#Core#Resolving#Pipeline#IResolvePipelineBuilder#Build">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.Autofac#Core#Resolving#Pipeline#IResolvePipelineBuilder#Use(Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.Autofac#Core#Resolving#Pipeline#IResolvePipelineBuilder#UseRange(System.Collections.Generic.IEnumerable{Autofac.Core.Resolving.Pipeline.IResolveMiddleware},Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.Autofac#Core#Resolving#Pipeline#IResolvePipelineBuilder#Clone">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.ServiceRegistrationInfoResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotAfterInitialization">
            <summary>
              Looks up a localized string similar to The operation is only valid before the object is initialized..
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotDuringInitialization">
            <summary>
              Looks up a localized string similar to The operation is only valid during initialization..
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotInitialized">
            <summary>
              Looks up a localized string similar to The operation is not valid until the object is initialized..
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.ServicePipelineCannotBeBuilt">
            <summary>
              Looks up a localized string similar to The service pipeline cannot be built until the service has finished initialization..
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ServiceWithTypeMiddlewareSource">
            <summary>
            Defines a middleware source that adds a specific middleware to all services that expose a specific type; this allows middleware
            to be added to regular and keyed instances.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceWithTypeMiddlewareSource.#ctor(System.Type,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ServiceWithTypeMiddlewareSource"/> class.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="middleware">The middleware to add.</param>
            <param name="insertionMode">The insertion mode of the middleware.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ServiceWithTypeMiddlewareSource.ProvideMiddleware(Autofac.Core.Service,Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Registration.SourceRegistrar">
            <summary>
            Basic implementation of the <see cref="T:Autofac.Core.Registration.ISourceRegistrar"/>
            interface allowing registration of registration sources into a <see cref="T:Autofac.ContainerBuilder"/>
            in a fluent format.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.SourceRegistrar._builder">
            <summary>
            The <see cref="T:Autofac.ContainerBuilder"/> into which registrations will be made.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.SourceRegistrar.#ctor(Autofac.ContainerBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.SourceRegistrar"/> class.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which registrations will be made.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Core.Registration.SourceRegistrar.RegisterSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="registrationSource">The registration source to add.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.ISourceRegistrar"/> to allow additional chained registration source registrations.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrationSource" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Core.RegistrationSourceAddedEventArgs">
            <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource"/> is added to the registry.
            </summary>
        </member>
        <member name="M:Autofac.Core.RegistrationSourceAddedEventArgs.#ctor(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IRegistrationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.RegistrationSourceAddedEventArgs"/> class.
            </summary>
            <param name="componentRegistry">The registry to which the source was added.</param>
            <param name="registrationSource">The source that was added.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Autofac.Core.RegistrationSourceAddedEventArgs.RegistrationSource">
            <summary>
            Gets the registry to which the source was added.
            </summary>
        </member>
        <member name="P:Autofac.Core.RegistrationSourceAddedEventArgs.ComponentRegistry">
            <summary>
            Gets the source that was added.
            </summary>
        </member>
        <member name="T:Autofac.Core.ResolvedParameter">
            <summary>
            Flexible parameter type allows arbitrary values to be retrieved
            from the resolution context.
            </summary>
        </member>
        <member name="M:Autofac.Core.ResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ResolvedParameter"/> class.
            </summary>
            <param name="predicate">A predicate that determines which parameters on a constructor will be supplied by this instance.</param>
            <param name="valueAccessor">A function that supplies the parameter value given the context.</param>
        </member>
        <member name="M:Autofac.Core.ResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.Core.ResolvedParameter.ForNamed``1(System.String)">
            <summary>
            Construct a <see cref="T:Autofac.Core.ResolvedParameter"/> that will match parameters of type
            <typeparamref name="TService"/> and resolve for those parameters an implementation
            registered with the name <paramref name="serviceName"/>.
            </summary>
            <typeparam name="TService">The type of the parameter to match.</typeparam>
            <param name="serviceName">The name of the matching service to resolve.</param>
            <returns>A configured <see cref="T:Autofac.Core.ResolvedParameter"/> instance.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Autofac.Core.ResolvedParameter.ForKeyed``1(System.Object)">
            <summary>
            Construct a <see cref="T:Autofac.Core.ResolvedParameter"/> that will match parameters of type
            <typeparamref name="TService"/> and resolve for those parameters an implementation
            registered with the key <paramref name="serviceKey"/>.
            </summary>
            <typeparam name="TService">The type of the parameter to match.</typeparam>
            <param name="serviceKey">The key of the matching service to resolve.</param>
            <returns>A configured <see cref="T:Autofac.Core.ResolvedParameter"/> instance.</returns>
        </member>
        <member name="T:Autofac.Core.Resolving.ActivatorExtensions">
            <summary>
            Extension methods for activators.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.ActivatorExtensions.DisplayName(Autofac.Core.IInstanceActivator)">
            <summary>
            This shorthand name for the activator is used in exception messages; for activator types
            where the limit type generally describes the activator exactly, we use that; for delegate
            activators, a variation on the type name is used to indicate this.
            </summary>
            <param name="activator">The activator instance.</param>
            <returns>A display name.</returns>
        </member>
        <member name="T:Autofac.Core.Resolving.BaseGenericResolveDelegateInvoker">
            <summary>
            Provides a base implementation for the dynamically generated DelegateInvoker classes.
            </summary>
            <remarks>
            See Autofac.CodeGen.DelegateRegisterGenerator.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Resolving.BaseGenericResolveDelegateInvoker.GetDelegateParameters">
            <summary>
            Method implemented by the derived generated class to get the <see cref="T:System.Reflection.ParameterInfo"/> array for the owned delegate.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.BaseGenericResolveDelegateInvoker.ResolveWithParametersOrRegistration``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)">
            <summary>
            Resolve the specified type parameter either from the currently-in-scope
            resolve parameters, or as a regular dependency.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <param name="context">The context from which to resolve.</param>
            <param name="parameters">The set of Autofac resolve parameters.</param>
            <param name="parameterInfoPosition">The position of the parameter in the
            delegate's parameter info set.</param>
        </member>
        <member name="M:Autofac.Core.Resolving.BaseGenericResolveDelegateInvoker.AnyParameters(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Checks whether there are any parameters in the set of parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Autofac.Core.Resolving.ComponentActivationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ComponentActivationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ActivationAlreadyExecuted">
            <summary>
              Looks up a localized string similar to The activation has already been executed: {0}.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ErrorDuringActivation">
            <summary>
              Looks up a localized string similar to An exception was thrown while activating {0}..
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.IDependencyTrackingResolveOperation">
            <summary>
            The interface indicating that an <see cref="T:Autofac.Core.Resolving.IResolveOperation" /> supports dependency tracking. Required by middleware that must understand the dependency tree.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.IDependencyTrackingResolveOperation.EnterNewDependencyDetectionBlock">
            <summary>
            Enter a new dependency chain block where subsequent requests inside the operation are allowed to repeat
            registrations from before the block.
            </summary>
            <returns>A disposable that should be disposed to exit the block.</returns>
        </member>
        <member name="P:Autofac.Core.Resolving.IDependencyTrackingResolveOperation.RequestStack">
            <summary>
            Gets the modifiable active request stack.
            </summary>
            <remarks>
            Don't want this exposed to the outside world, but we do want it available in the
            <see cref="T:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware" />,
            hence it's internal.
            </remarks>
        </member>
        <member name="T:Autofac.Core.Resolving.IResolveOperation">
            <summary>
            An <see cref="T:Autofac.Core.Resolving.IResolveOperation"/> is a component context that sequences and monitors the multiple
            activations that go into producing a single requested object graph.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.IResolveOperation.ActiveRequestContext">
            <summary>
            Gets the active resolve request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.IResolveOperation.CurrentScope">
            <summary>
            Gets the current lifetime scope of the operation; based on the most recently executed request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.IResolveOperation.InProgressRequests">
            <summary>
            Gets the set of all in-progress requests on the request stack.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.IResolveOperation.DiagnosticSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.DiagnosticListener" /> for the operation.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.IResolveOperation.RequestDepth">
            <summary>
            Gets the current request depth.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.IResolveOperation.InitiatingRequest">
            <summary>
            Gets the <see cref="T:Autofac.ResolveRequest" /> that initiated the operation. Other nested requests may have been
            issued as a result of this one.
            </summary>
        </member>
        <member name="E:Autofac.Core.Resolving.IResolveOperation.ResolveRequestBeginning">
            <summary>
            Raised when a resolve request starts.
            </summary>
        </member>
        <member name="E:Autofac.Core.Resolving.IResolveOperation.CurrentOperationEnding">
            <summary>
            Raised when the entire operation is complete.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.IResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.ResolveRequest)">
            <summary>
            Get or create and share an instance of the requested service in the <paramref name="currentOperationScope"/>.
            </summary>
            <param name="currentOperationScope">The scope in the hierarchy in which the operation will begin.</param>
            <param name="request">The resolve request.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware">
            <summary>
            Provides middleware to wrap propagating activator exceptions.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware.Instance">
            <summary>
            Gets a singleton instance of the middleware.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware.Phase">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.ActivatorErrorHandlingMiddleware.ToString">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages.CircularDependency">
            <summary>
              Looks up a localized string similar to Circular component dependency detected: {0}..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMessages.MaxDepthExceeded">
            <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware">
            <summary>
            Common stage. Added to the start of all component pipelines.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware.DefaultMaxResolveDepth">
            <summary>
            Defines the default max resolve depth.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware.Default">
            <summary>
            Gets the default instance of <see cref="T:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware"/> class.
            </summary>
            <param name="maxResolveDepth">The max resolve depth.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware.Phase">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.CircularDependencyDetectorMiddleware.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.CoreEventMiddleware">
            <summary>
            Middleware that invokes one of the built-in resolve events, defined by <see cref="T:Autofac.Core.Resolving.Middleware.ResolveEventType"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.CoreEventMiddleware.#ctor(Autofac.Core.Resolving.Middleware.ResolveEventType,Autofac.Core.Resolving.Pipeline.PipelinePhase,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Middleware.CoreEventMiddleware"/> class.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="phase">The phase of the pipeine at which the event runs.</param>
            <param name="callback">The middleware callback to process the event.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CoreEventMiddleware.Phase">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.CoreEventMiddleware.EventType">
            <summary>
            Gets the event type represented by this middleware.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.CoreEventMiddleware.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.CoreEventMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.DelegateMiddleware">
            <summary>
            Wraps pipeline delegates from the Use* methods in <see cref="T:Autofac.PipelineBuilderExtensions" />.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.DelegateMiddleware.#ctor(System.String,Autofac.Core.Resolving.Pipeline.PipelinePhase,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Middleware.DelegateMiddleware"/> class.
            </summary>
            <param name="descriptor">The middleware description.</param>
            <param name="phase">The pipeline phase.</param>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.DelegateMiddleware.Phase">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.DelegateMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.DelegateMiddleware.ToString">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware">
            <summary>
            Ensures activated instances are tracked.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware"/>.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware.Phase">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.DisposalTrackingMiddleware.ToString">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.MiddlewareMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.MiddlewareMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.MiddlewareMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.MiddlewareMessages.ActivatorDidNotPopulateInstance">
            <summary>
              Looks up a localized string similar to The Activation phase of the resolve pipeline did not populate the request context&apos;s Instance..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.MiddlewareMessages.UnableToLocateLifetimeScope">
             <summary>
               Looks up a localized string similar to Unable to resolve the type &apos;{0}&apos; because the lifetime scope it belongs in can&apos;t be located. The following services are exposed by this registration:
            {1}
            Details.
             </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware">
            <summary>
            Middleware added by default to the end of all service pipelines that invokes the registration's pipeline.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware.Instance">
            <summary>
            Gets the singleton instance of this middleware.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware.Phase">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.RegistrationPipelineInvokeMiddleware.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware">
            <summary>
            Selects the correct activation scope based on the registration's lifetime.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware"/>.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware.Phase">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.ScopeSelectionMiddleware.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.SharingMiddleware">
            <summary>
            Checks for a shared instance of the requested registration.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.SharingMiddleware.Instance">
            <summary>
            Gets the singleton instance of the middleware.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.SharingMiddleware.Phase">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.SharingMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.SharingMiddleware.ToString">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.StartableMiddleware">
            <summary>
            Middleware that starts startable components.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.StartableMiddleware.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Autofac.Core.Resolving.Middleware.StartableMiddleware"/>.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Middleware.StartableMiddleware.Phase">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.StartableMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Middleware.StartableMiddleware.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Middleware.ResolveEventType">
            <summary>
            Defines the standard set of in-built resolve events, executed by the <see cref="T:Autofac.Core.Resolving.Middleware.CoreEventMiddleware"/>.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Middleware.ResolveEventType.OnPreparing">
            <summary>
            Event type for the OnPreparing event registered by <see cref="M:Autofac.Builder.IRegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})"/>.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Middleware.ResolveEventType.OnActivating">
            <summary>
            Event type for the OnActivating event registered by <see cref="M:Autofac.Builder.IRegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})"/>.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Middleware.ResolveEventType.OnActivated">
            <summary>
            Event type for the OnActivated event registered by <see cref="M:Autofac.Builder.IRegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})"/>.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Middleware.ResolveEventType.OnRelease">
            <summary>
            Event type for the OnRelease event registered by <see cref="M:Autofac.RegistrationExtensions.OnRelease``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{``0})"/>.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext">
            <summary>
                Context area for a resolve request.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.#ctor(Autofac.Core.Resolving.IResolveOperation,Autofac.ResolveRequest,Autofac.Core.ISharingLifetimeScope,System.Diagnostics.DiagnosticListener)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext" /> class.
            </summary>
            <param name="owningOperation">The owning resolve operation.</param>
            <param name="request">The initiating resolve request.</param>
            <param name="scope">The lifetime scope.</param>
            <param name="diagnosticSource">
            The <see cref="T:System.Diagnostics.DiagnosticListener" /> to which trace events should be written.
            </param>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.Operation">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.ActivationScope">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.Registration">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.Service">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.DecoratorTarget">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.Instance">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.NewInstanceActivated">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.DiagnosticSource">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.Parameters">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.PhaseReached">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.ComponentRegistry">
            <inheritdoc />
        </member>
        <member name="E:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.RequestCompleting">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.DecoratorContext">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.ChangeScope(Autofac.Core.ISharingLifetimeScope)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.ChangeParameters(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.ResolveComponent(Autofac.ResolveRequest)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext.CompleteRequest">
            <summary>
            Complete the request, raising any appropriate events.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.IResolveMiddleware">
            <summary>
            Defines an executable resolve middleware.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.IResolveMiddleware.Phase">
            <summary>
            Gets the phase of the resolve pipeline at which to execute.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.IResolveMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <summary>
            Invoked when this middleware is executed as part of an active <see cref="T:Autofac.ResolveRequest"/>. The middleware should usually call
            the <paramref name="next"/> method in order to continue the pipeline, unless the middleware fully satisfies the request.
            </summary>
            <param name="context">The context for the resolve request.</param>
            <param name="next">The method to invoke to continue the pipeline execution; pass this method the <paramref name="context"/> argument.</param>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.IResolvePipeline">
            <summary>
            Represents a pipeline that can be invoked to resolve an instance of a service.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.IResolvePipeline.Invoke(Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <summary>
            Invoke the pipeline to the end, or until an exception is thrown.
            </summary>
            <param name="context">The request context.</param>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder">
            <summary>
            Provides the ability to build a resolve pipeline from a set of middleware.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Build">
            <summary>
            Construct a concrete resolve pipeline from this builder.
            </summary>
            <returns>A built pipeline.</returns>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Middleware">
            <summary>
            Gets the set of middleware currently registered.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Type">
            <summary>
            Gets the type of the pipeline this instance will build.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Use(Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Use a piece of middleware in a resolve pipeline.
            </summary>
            <param name="middleware">The middleware instance.</param>
            <param name="insertionMode">The insertion mode specifying whether to add at the start or end of the phase.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.UseRange(System.Collections.Generic.IEnumerable{Autofac.Core.Resolving.Pipeline.IResolveMiddleware},Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Use a set of multiple, ordered middleware instances in a resolve pipeline.
            </summary>
            <param name="middleware">The set of middleware items to add to the pipelne. The set of middleware must be pre-ordered by phase.</param>
            <param name="insertionMode">The insertion mode specifying whether to add at the start or end of the phase.</param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder.Clone">
            <summary>
            Clone this builder, returning a new builder containing the set of middleware already added.
            </summary>
            <returns>A new builder instance.</returns>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration">
            <summary>
            Defines a declared piece of middleware in a pipeline builder.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration.#ctor(Autofac.Core.Resolving.Pipeline.IResolveMiddleware)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration"/> class.
            </summary>
            <param name="middleware">The middleware that is encapsulated in this declaration.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration.Next">
            <summary>
            Gets or sets the next node in a pipeline set.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration.Previous">
            <summary>
            Gets or sets the previous node in a pipeline set.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration.Middleware">
            <summary>
            Gets the middleware for this declaration.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration.Phase">
            <summary>
            Gets the declared phase of the middleware.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode">
            <summary>
            Provides the modes of insertion when adding middleware to an <see cref="T:Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder"/>.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode.EndOfPhase">
            <summary>
            The new middleware should be added at the end of the middleware's declared phase. The added middleware will run after any middleware already added
            at the same phase.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode.StartOfPhase">
            <summary>
            The new middleware should be added at the beginning of the middleware's declared phase. The added middleware will run before any middleware
            already added at the same phase.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator">
            <summary>
            Enumerator for a pipeline builder.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator.#ctor(Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator"/> class.
            </summary>
            <param name="first">The first middleware declaration.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.PipelineBuilderEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.PipelinePhase">
             <summary>
             Defines the possibles phases of the resolve pipeline.
             </summary>
             <remarks>
             A resolve pipeline is split into these distinct phases, that control general ordering
             of middlewares and allow integrations and consuming code to specify what point in the pipeline to run their middleware.
            
             As a general principle, order between phases is strict, and always executes in the same order, but order within a phase should
             not be important for most cases, and handlers should be able to run in any order.
             </remarks>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.ResolveRequestStart">
            <summary>
            The start of a resolve request. Custom middleware added to this phase executes before circular dependency detection.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.ScopeSelection">
            <summary>
            In this phase, the lifetime scope selection takes place. If some middleware needs to change the lifetime scope for resolving against,
            it happens here (but bear in mind that the configured Autofac lifetime for the registration will take effect).
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.Decoration">
            <summary>
            In this phase, instance decoration will take place (on the way 'out' of the pipeline).
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.Sharing">
            <summary>
            At the end of this phase, if a shared instance satisfies the request, the pipeline will stop executing and exit. Add custom
            middleware to this phase to choose your own shared instance.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.ServicePipelineEnd">
            <summary>
            This phase occurs just before the service pipeline ends (and the registration pipeline is about to start).
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.RegistrationPipelineStart">
            <summary>
            This phase occurs at the start of the registration pipeline.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.ParameterSelection">
            <summary>
            This phase runs just before Activation, is the recommended point at which the resolve parameters should be replaced
            (using <see cref="M:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ChangeParameters(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})"/>).
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelinePhase.Activation">
            <summary>
            The Activation phase is the last phase of a pipeline, where a new instance of a component is created.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.PipelineType">
            <summary>
            Defines the possible pipeline types.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelineType.Service">
            <summary>
            A service pipeline. Usually invokes a <see cref="F:Autofac.Core.Resolving.Pipeline.PipelineType.Registration"/> pipeline when it is finished.
            </summary>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.PipelineType.Registration">
            <summary>
            A registration pipeline, used for activating a registration.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder">
             <summary>
             Provides the functionality to construct a resolve pipeline.
             </summary>
             <remarks>
             <para>
             The pipeline builder is built as a doubly-linked list; each node in that list is a
             <see cref="T:Autofac.Core.Resolving.Pipeline.MiddlewareDeclaration"/>, that holds the middleware instance, and the reference to the next and previous nodes.
             </para>
            
             <para>
             When you call one of the Use* methods, we find the appropriate node in the linked list based on the phase of the new middleware
             and insert it into the list.
             </para>
            
             <para>
             When you build a pipeline, we walk back through that set of middleware and generate the concrete call chain so that when you execute the pipeline,
             we don't iterate over any nodes, but just invoke the built set of methods.
             </para>
             </remarks>
        </member>
        <member name="F:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.TerminateAction">
            <summary>
            Termination action for the end of pipelines.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.#ctor(Autofac.Core.Resolving.Pipeline.PipelineType)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder"/> class.
            </summary>
            <param name="pipelineType">The pipeline type.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.Middleware">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.Type">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.Use(Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.UseRange(System.Collections.Generic.IEnumerable{Autofac.Core.Resolving.Pipeline.IResolveMiddleware},Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilder.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages.CannotAddRegistrationMiddlewareToServicePipeline">
            <summary>
              Looks up a localized string similar to Cannot add registration middleware in phase &apos;{0}&apos; to a service pipeline. Valid registration middleware phases: [{1}].
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages.CannotAddServiceMiddlewareToRegistrationPipeline">
            <summary>
              Looks up a localized string similar to Cannot add service middleware in phase &apos;{0}&apos; to a registration pipeline. Valid service middleware phases: [{1}].
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolvePipelineBuilderMessages.MiddlewareMustBeInPhaseOrder">
            <summary>
              Looks up a localized string similar to Middleware provided to the UseRange method must be in phase order..
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.Operation">
            <summary>
            Gets a reference to the owning resolve operation (which might emcompass multiple nested requests).
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ActivationScope">
            <summary>
            Gets or sets the lifetime scope that will be used for the activation of any components later in the pipeline.
            Avoid resolving instances directly from this scope; they will not be traced as part of the same operation.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.Registration">
            <summary>
            Gets the component registration that is being resolved in the current request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.Service">
            <summary>
            Gets the service that is being resolved in the current request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.DecoratorTarget">
            <summary>
            Gets the target registration for decorator requests.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.Instance">
            <summary>
            Gets or sets the instance that will be returned as the result of the resolve request.
            On the way back up the pipeline, after calling next(ctxt), this value will be populated
            with the resolved instance. Check the <see cref="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.NewInstanceActivated"/> property to determine
            whether the object here was a newly activated instance, or a shared instance previously activated.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.NewInstanceActivated">
            <summary>
            Gets a value indicating whether the resolved <see cref="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.Instance"/> is a new instance of a component has been activated during this request,
            or an existing shared instance that has been retrieved.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.DiagnosticSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.DiagnosticListener"/> to which trace events should be written.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.Parameters">
            <summary>
            Gets or sets the current resolve parameters. These can be changed using the <see cref="M:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ChangeParameters(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})"/> method.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.PhaseReached">
            <summary>
            Gets or sets the phase of the pipeline reached by this request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.DecoratorContext">
            <summary>
            Gets or sets the active decorator context for the request.
            </summary>
        </member>
        <member name="E:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.RequestCompleting">
            <summary>
            Provides an event that will fire when the current request completes.
            Requests will only be considered 'complete' when the overall <see cref="T:Autofac.Core.Resolving.IResolveOperation"/> is completing.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ChangeScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Use this method to change the <see cref="T:Autofac.Core.ISharingLifetimeScope"/> that is used in this request. Changing this scope will
            also change the <see cref="T:Autofac.Core.IComponentRegistry"/> available in this context.
            </summary>
            <param name="newScope">The new lifetime scope.</param>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ChangeParameters(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Change the set of parameters being used in the processing of this request.
            </summary>
            <param name="newParameters">The new set of parameters.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ComponentRegistry">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ResolveRequestContext.ResolveComponent(Autofac.ResolveRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.Pipeline.ServicePipelines">
            <summary>
            Provides helpers for building service pipelines.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ServicePipelines.DefaultMiddleware">
            <summary>
            Gets the set of default middleware added to each service pipeline.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.Pipeline.ServicePipelines.DefaultServicePipeline">
            <summary>
            Gets a default pre-built service pipeline that contains only the <see cref="P:Autofac.Core.Resolving.Pipeline.ServicePipelines.DefaultMiddleware"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.Pipeline.ServicePipelines.IsDefaultMiddleware(Autofac.Core.Resolving.Pipeline.IResolveMiddleware)">
            <summary>
            Checks whether a given resolve middleware is one of the default middleware in <see cref="P:Autofac.Core.Resolving.Pipeline.ServicePipelines.DefaultMiddleware"/>.
            </summary>
            <param name="middleware">The middleware to test.</param>
            <returns>True if the middleware is one of the defaults; false otherwise.</returns>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveOperation">
            <summary>
            A <see cref="T:Autofac.Core.Resolving.ResolveOperation"/> is a component context that sequences and monitors the multiple
            activations that go into producing a single requested object graph.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperation.#ctor(Autofac.Core.ISharingLifetimeScope,System.Diagnostics.DiagnosticListener)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperation" /> class.
            </summary>
            <param name="mostNestedLifetimeScope"> The most nested scope in which to begin the operation. The operation
            can move upward to less nested scopes as components with wider sharing scopes are activated.
            </param>
            <param name="diagnosticSource">
            The <see cref="T:System.Diagnostics.DiagnosticListener" /> to which trace events should be written.
            </param>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperation.Execute(Autofac.ResolveRequest)">
            <summary>
            Execute the complete resolve operation.
            </summary>
            <param name="request">The resolution context.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.ActiveRequestContext">
            <summary>
            Gets the active resolve request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.CurrentScope">
            <summary>
            Gets the current lifetime scope of the operation; based on the most recently executed request.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.InProgressRequests">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.DiagnosticSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.DiagnosticListener" /> for the operation.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.RequestDepth">
            <summary>
            Gets the current request depth.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.InitiatingRequest">
            <summary>
            Gets the <see cref="T:Autofac.ResolveRequest" /> that initiated the operation. Other nested requests may have been
            issued as a result of this one.
            </summary>
        </member>
        <member name="E:Autofac.Core.Resolving.ResolveOperation.ResolveRequestBeginning">
            <inheritdoc />
        </member>
        <member name="E:Autofac.Core.Resolving.ResolveOperation.CurrentOperationEnding">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperation.EnterNewDependencyDetectionBlock">
            <summary>
            Enter a new dependency chain block where subsequent requests inside the operation are allowed to repeat
            registrations from before the block.
            </summary>
            <returns>A disposable that should be disposed to exit the block.</returns>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperation.RequestStack">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.ResolveRequest)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperation.ExecuteOperation(Autofac.ResolveRequest)">
            <summary>
            Invoke this method to execute the operation for a given request.
            </summary>
            <param name="request">The resolve request.</param>
            <returns>The resolved instance.</returns>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperation.InvokePipeline(Autofac.ResolveRequest,Autofac.Core.Resolving.Pipeline.DefaultResolveRequestContext)">
            <summary>
            Basic pipeline invocation steps used when retrieving an instance. Isolated
            to enable it to be optionally surrounded with diagnostics.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs">
            <summary>
            Describes the commencement of a new resolve operation.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs"/> class.
            </summary>
            <param name="resolveOperation">The resolve operation that is beginning.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs.ResolveOperation">
            <summary>
            Gets the resolve operation that is beginning.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveOperationEndingEventArgs">
            <summary>
            Describes the commencement of a new resolve operation.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperationEndingEventArgs"/> class.
            </summary>
            <param name="resolveOperation">The resolve operation that is ending.</param>
            <param name="exception">If included, the exception causing the operation to end; otherwise, null.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.Exception">
            <summary>
            Gets the exception causing the operation to end, or null.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.ResolveOperation">
            <summary>
            Gets the resolve operation that is ending.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveOperationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ExceptionDuringResolve">
            <summary>
              Looks up a localized string similar to An exception was thrown while executing a resolve operation. See the InnerException for details..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.MaxDepthExceeded">
            <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.PipelineCompletedWithNoInstance">
            <summary>
              Looks up a localized string similar to Resolve pipeline completed with a null value for the resolved instance..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.TemporaryContextDisposed">
            <summary>
              Looks up a localized string similar to This resolve operation has already ended. When registering components using lambdas, the IComponentContext &apos;c&apos; parameter to the lambda cannot be stored. Instead, either resolve IComponentContext again from &apos;c&apos;, or resolve a Func&lt;&gt; based factory to create subsequent components from..
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveRequestBeginningEventArgs">
            <summary>
            Fired when a resolve request is starting.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveRequestBeginningEventArgs.#ctor(Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.ResolveRequestBeginningEventArgs"/> class.
            </summary>
            <param name="requestContext">The resolve request context that is starting.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveRequestBeginningEventArgs.RequestContext">
            <summary>
            Gets the resolve request that is beginning.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveRequestCompletingEventArgs">
            <summary>
            Fired when a resolve request is starting.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.ResolveRequestCompletingEventArgs.#ctor(Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.ResolveRequestCompletingEventArgs"/> class.
            </summary>
            <param name="requestContext">The resolve request context that is completing.</param>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveRequestCompletingEventArgs.RequestContext">
            <summary>
            Gets the instance lookup operation that is beginning.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.SegmentedStack`1">
            <summary>
            Implements a segmented stack of items, which functions like a regular <see cref="T:System.Collections.Generic.Stack`1"/>, but allows segments
            of the stack to be enumerated without including items pushed before the segment.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:Autofac.Core.Resolving.SegmentedStack`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Resolving.SegmentedStack`1"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.SegmentedStack`1.Push(`0)">
            <summary>
            Push an item onto the stack.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Autofac.Core.Resolving.SegmentedStack`1.Pop">
            <summary>
            Pop the item at the top of the stack (and return it).
            </summary>
            <returns>The item that has just been popped.</returns>
        </member>
        <member name="P:Autofac.Core.Resolving.SegmentedStack`1.Count">
            <summary>
            Gets the count of the items in the active segment.
            </summary>
        </member>
        <member name="M:Autofac.Core.Resolving.SegmentedStack`1.EnterSegment">
            <summary>
            Enter a new segment. When this method returns <see cref="P:Autofac.Core.Resolving.SegmentedStack`1.Count"/> will be zero, and the stack will appear empty.
            </summary>
            <returns>An <see cref="T:System.IDisposable"/> that will return the stack to the previously active segment when disposed.</returns>
        </member>
        <member name="M:Autofac.Core.Resolving.SegmentedStack`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.Resolving.SegmentedStack`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.Resolving.SegmentedStackResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.SegmentedStackResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.SegmentedStackResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.SegmentedStackResources.CannotExitSegmentWithRemainingItems">
            <summary>
              Looks up a localized string similar to Cannot exit a stack segment without popping all elements of the segment..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.SegmentedStackResources.CurrentStackSegmentEmpty">
            <summary>
              Looks up a localized string similar to Current stack segment is empty, cannot pop..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.SegmentedStackResources.EnumeratorNotValid">
            <summary>
              Looks up a localized string similar to Enumerator not in valid state..
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.DelegateInvokers">
            <summary>
            Provides delegate invocation holding classes.
            </summary>
        </member>
        <member name="T:Autofac.Core.Pipeline.ResolvePipeline">
            <summary>
            Encapsulates the call back that represents the entry point of a pipeline.
            </summary>
        </member>
        <member name="M:Autofac.Core.Pipeline.ResolvePipeline.#ctor(System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Pipeline.ResolvePipeline"/> class.
            </summary>
            <param name="entryPoint">Callback to invoke.</param>
        </member>
        <member name="M:Autofac.Core.Pipeline.ResolvePipeline.Invoke(Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Core.SelfComponentRegistration">
            <summary>
            The <see cref="T:Autofac.Core.Registration.ComponentRegistration" /> for resolving the current <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.SelfComponentRegistration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.SelfComponentRegistration"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Core.Service">
            <summary>
            Services are the lookup keys used to locate component instances.
            </summary>
        </member>
        <member name="P:Autofac.Core.Service.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Autofac.Core.Service.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Autofac.Core.Service.op_Equality(Autofac.Core.Service,Autofac.Core.Service)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Autofac.Core.Service.op_Inequality(Autofac.Core.Service,Autofac.Core.Service)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Autofac.Core.Service.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.Service.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Autofac.Core.ServiceRegistration">
            <summary>
            Defines a combination of a service pipeline and a registration. Used to instantiate a <see cref="T:Autofac.ResolveRequest"/>.
            </summary>
        </member>
        <member name="M:Autofac.Core.ServiceRegistration.#ctor(Autofac.Core.Resolving.Pipeline.IResolvePipeline,Autofac.Core.IComponentRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ServiceRegistration"/> struct.
            </summary>
            <param name="servicePipeline">A service pipeline.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="P:Autofac.Core.ServiceRegistration.Pipeline">
            <summary>
            Gets the pipeline to invoke that will resolve the associated <see cref="P:Autofac.Core.ServiceRegistration.Registration"/>.
            </summary>
        </member>
        <member name="P:Autofac.Core.ServiceRegistration.Registration">
            <summary>
            Gets the registration that will be resolved when a resolve request runs.
            </summary>
        </member>
        <member name="P:Autofac.Core.ServiceRegistration.Metadata">
            <summary>
            Gets additional data associated with the component.
            </summary>
        </member>
        <member name="M:Autofac.Core.ServiceRegistration.GetRegistrationOrder">
            <summary>
            Gets the registration order value from the registration.
            </summary>
            <returns>The original registration order value.</returns>
        </member>
        <member name="M:Autofac.Core.ServiceRegistration.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.ServiceRegistration.Equals(Autofac.Core.ServiceRegistration)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Core.ServiceRegistration.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Core.ServiceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.ServiceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.ServiceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.ServiceResources.MustOverrideEquals">
            <summary>
              Looks up a localized string similar to Subclasses of Autofac.Service must override Object.Equals().
            </summary>
        </member>
        <member name="P:Autofac.Core.ServiceResources.MustOverrideGetHashCode">
            <summary>
              Looks up a localized string similar to Subclasses of Autofac.Service must override Object.GetHashCode().
            </summary>
        </member>
        <member name="T:Autofac.Core.TypedService">
            <summary>
            Identifies a service according to a type to which it can be assigned.
            </summary>
        </member>
        <member name="M:Autofac.Core.TypedService.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.TypedService"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="P:Autofac.Core.TypedService.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Autofac.Core.TypedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Autofac.Core.TypedService.Equals(Autofac.Core.TypedService)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Autofac.Core.TypedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.TypedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Autofac.Core.TypedService.ChangeType(System.Type)">
            <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType"/> as the <see cref="P:Autofac.Core.TypedService.ServiceType"/>.
            </summary>
            <param name="newType">The new service type.</param>
            <returns>A new service with the service type.</returns>
        </member>
        <member name="T:Autofac.Core.UniqueService">
            <summary>
            A handy unique service identifier type - all instances will be regarded as unequal.
            </summary>
        </member>
        <member name="M:Autofac.Core.UniqueService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Core.UniqueService.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="P:Autofac.Core.UniqueService.Description">
            <summary>
            Gets a programmer-readable description of the identifying feature of the service.
            </summary>
        </member>
        <member name="M:Autofac.Core.UniqueService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.UniqueService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Autofac.Diagnostics.DefaultDiagnosticTracer">
            <summary>
            Provides a default resolve pipeline tracer that builds a multi-line
            string describing the end-to-end operation flow. Attach to the
            <see cref="E:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OperationCompleted"/>
            event to receive notifications when new trace content is available.
            </summary>
            <remarks>
            <para>
            The tracer subscribes to all Autofac diagnostic events and can't be
            unsubscribed. This is required to ensure beginning and end of each
            logical activity can be captured.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.DefaultDiagnosticTracer"/> class.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.DefaultDiagnosticTracer.OperationsInProgress">
            <summary>
            Gets the number of operations in progress being traced.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> with the number of trace IDs associated
            with in-progress operations being traced by this tracer.
            </value>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnOperationStart(Autofac.Diagnostics.OperationStartDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnRequestStart(Autofac.Diagnostics.RequestDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnMiddlewareStart(Autofac.Diagnostics.MiddlewareDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnMiddlewareFailure(Autofac.Diagnostics.MiddlewareDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnMiddlewareSuccess(Autofac.Diagnostics.MiddlewareDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnRequestFailure(Autofac.Diagnostics.RequestFailureDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnRequestSuccess(Autofac.Diagnostics.RequestDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnOperationFailure(Autofac.Diagnostics.OperationFailureDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.DefaultDiagnosticTracer.OnOperationSuccess(Autofac.Diagnostics.OperationSuccessDiagnosticData)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Diagnostics.DefaultDiagnosticTracer.IndentingStringBuilder">
            <summary>
            Provides a string builder that auto-indents lines.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.DiagnosticEventKeys">
            <summary>
            Names of the events raised in diagnostics.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.MiddlewareStart">
            <summary>
            ID for the event raised when middleware starts.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.MiddlewareFailure">
            <summary>
            ID for the event raised when middleware encounters an error.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.MiddlewareSuccess">
            <summary>
            ID for the event raised when middleware exits successfully.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.OperationFailure">
            <summary>
            ID for the event raised when a resolve operation encounters an error.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.OperationStart">
            <summary>
            ID for the event raised when a resolve operation starts.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.OperationSuccess">
            <summary>
            ID for the event raised when a resolve operation completes successfully.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.RequestFailure">
            <summary>
            ID for the event raised when a resolve request encounters an error.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.RequestStart">
            <summary>
            ID for the event raised when a resolve request starts.
            </summary>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticEventKeys.RequestSuccess">
            <summary>
            ID for the event raised when a resolve request completes successfully.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.DiagnosticSourceExtensions">
            <summary>
            Extension methods for writing diagnostic messages.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.MiddlewareStart(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.Pipeline.ResolveRequestContext,Autofac.Core.Resolving.Pipeline.IResolveMiddleware)">
            <summary>
            Writes a diagnostic event indicating an individual middleware item is about to execute (just before the <see cref="M:Autofac.Core.Resolving.Pipeline.IResolveMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})"/> method executes).
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="requestContext">The context for the resolve request that is running.</param>
            <param name="middleware">The middleware that is about to run.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.MiddlewareFailure(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.Pipeline.ResolveRequestContext,Autofac.Core.Resolving.Pipeline.IResolveMiddleware)">
            <summary>
            Writes a diagnostic event indicating an individual middleware item has finished in an error state (when the <see cref="M:Autofac.Core.Resolving.Pipeline.IResolveMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})"/> method returns).
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="requestContext">The context for the resolve request that is running.</param>
            <param name="middleware">The middleware that just ran.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.MiddlewareSuccess(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.Pipeline.ResolveRequestContext,Autofac.Core.Resolving.Pipeline.IResolveMiddleware)">
            <summary>
            Writes a diagnostic event indicating an individual middleware item has finished successfully (when the <see cref="M:Autofac.Core.Resolving.Pipeline.IResolveMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})"/> method returns).
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="requestContext">The context for the resolve request that is running.</param>
            <param name="middleware">The middleware that just ran.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.OperationStart(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.IResolveOperation,Autofac.ResolveRequest)">
            <summary>
            Writes a diagnostic event indicating a resolve operation has started.
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="operation">The pipeline resolve operation that is about to run.</param>
            <param name="initiatingRequest">The request that is responsible for starting this operation.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.OperationFailure(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.IResolveOperation,System.Exception)">
            <summary>
            Writes a diagnostic event indicating a resolve operation has failed.
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="operation">The resolve operation that failed.</param>
            <param name="operationException">The exception that caused the operation failure.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.OperationSuccess(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.IResolveOperation,System.Object)">
            <summary>
            Writes a diagnostic event indicating a resolve operation has succeeded.
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="operation">The resolve operation that succeeded.</param>
            <param name="resolvedInstance">The resolved instance providing the requested service.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.RequestStart(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.IResolveOperation,Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <summary>
            Writes a diagnostic event indicating a resolve request has started inside an operation.
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="operation">The pipeline resolve operation that this request is running within.</param>
            <param name="requestContext">The context for the resolve request that is about to start.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.RequestFailure(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.IResolveOperation,Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Exception)">
            <summary>
            Writes a diagnostic event indicating a resolve request inside an operation has failed.
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="operation">The pipeline resolve operation that this request is running within.</param>
            <param name="requestContext">The context for the resolve request that failed.</param>
            <param name="requestException">The exception that caused the failure.</param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticSourceExtensions.RequestSuccess(System.Diagnostics.DiagnosticListener,Autofac.Core.Resolving.IResolveOperation,Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <summary>
            Writes a diagnostic event indicating a resolve request inside an operation has succeeded.
            </summary>
            <param name="diagnosticSource">The diagnostic source to which events will be written.</param>
            <param name="operation">The pipeline resolve operation that this request is running within.</param>
            <param name="requestContext">The context for the resolve request that failed.</param>
        </member>
        <member name="T:Autofac.Diagnostics.DiagnosticTracerBase">
            <summary>
            Base class for creating diagnostic tracers that follow Autofac diagnostic events.
            </summary>
            <remarks>
            <para>
            Following events from a <see cref="T:System.Diagnostics.DiagnosticListener"/>
            involves subscribing to that listener with an <see cref="T:System.IObserver`1"/>
            where the observable is a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:System.String"/>
            event names and <see cref="T:System.Object"/> event data.
            </para>
            <para>
            This class helps with that by providing strongly typed event handlers
            pre-wired to convert the event data into the right object type, allowing you
            to focus on the handling logic and not the event/data parsing.
            </para>
            <para>
            While technically you could subscribe to non-Autofac events using this
            observer, it's not a general purpose mechanism - it's very much tailored
            to Autofac.
            </para>
            <para>
            Should you want to start emitting and subscribing to your own events in the
            Autofac pipeline (e.g., a custom middleware that emits your own custom events)
            you have some options:
            </para>
            <para>
            First, you could implement your own <see cref="T:System.IObserver`1"/> that listens
            for your custom events. Since you can subscribe any number of <see cref="T:System.IObserver`1"/>
            to a given <see cref="T:System.Diagnostics.DiagnosticListener"/>, having one
            that derives from this class and a separate one of your own making is acceptable.
            </para>
            <para>
            Second, you could create your own <see cref="T:System.IObserver`1"/> that does not
            derive from this class but still listens for Autofac events as well as any
            custom events you emit. Any diagnostics observer can listen for these events as
            long as it's subscribed to the <see cref="P:Autofac.IContainer.DiagnosticSource"/>;
            it doesn't have to be one of this specific class type.
            </para>
            <para>
            Finally, if you want to use this as a base but to listen for your custom events,
            you can derive from this and override the <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Write(System.String,System.Object)"/>
            method. Handle your custom events, or if it's not one of your custom events, call
            the base to handle the Autofac events.
            </para>
            </remarks>
            <seealso cref="T:Autofac.Diagnostics.DefaultDiagnosticTracer"/>
        </member>
        <member name="F:Autofac.Diagnostics.DiagnosticTracerBase._subscriptions">
            <summary>
            The list of event names to which this observer is subscribed.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.Enable(System.String)">
            <summary>
            Subscribes the observer to a particular named diagnostic event.
            </summary>
            <param name="diagnosticName">
            The name of the event to which the observer should subscribe. Diagnostic
            names are case-sensitive.
            </param>
            <remarks>
            <para>
            By default the observer is not subscribed to any events. You must
            opt-in to any events you wish to handle. You may use
            <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableAll"/> to subscribe to all Autofac events at once.
            </para>
            </remarks>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableAll"/>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Disable(System.String)"/>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableBase(System.String)">
            <summary>
            Subscribes the observer to a particular named diagnostic event.
            </summary>
            <param name="diagnosticName">
            The name of the event to which the observer should subscribe. Diagnostic
            names are case-sensitive.
            </param>
            <remarks>
            <para>
            Derived classes may override the public <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Enable(System.String)"/> method to
            handle consumer calls to enabling events; constructors needing to call
            non-virtual methods may directly call this to avoid executing against
            partially constructed derived classes.
            </para>
            </remarks>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.DisableBase(System.String)"/>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableAll">
            <summary>
            Subscribes the observer to all Autofac events.
            </summary>
            <remarks>
            <para>
            By default the observer is not subscribed to any events. You must
            opt-in to any events you wish to handle. This method helps you
            to quickly subscribe to all the Autofac events at once. You may use
            <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Enable(System.String)"/> to subscribe to individual events.
            </para>
            </remarks>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Enable(System.String)"/>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Disable(System.String)"/>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.Disable(System.String)">
            <summary>
            Unsubscribes the observer from a particular named diagnostic event.
            </summary>
            <param name="diagnosticName">
            The name of the event to which the observer should unsubscribe. Diagnostic
            names are case-sensitive.
            </param>
            <remarks>
            <para>
            By default the observer is not subscribed to any events. You must
            opt-in to any events you wish to handle. You may use
            <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableAll"/> to subscribe to all Autofac events at once,
            or <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Enable(System.String)"/> to subscribe to individual events.
            </para>
            </remarks>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableAll"/>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Enable(System.String)"/>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.DisableBase(System.String)">
            <summary>
            Unsubscribes the observer from a particular named diagnostic event.
            </summary>
            <param name="diagnosticName">
            The name of the event to which the observer should unsubscribe. Diagnostic
            names are case-sensitive.
            </param>
            <remarks>
            <para>
            Derived classes may override the public <see cref="M:Autofac.Diagnostics.DiagnosticTracerBase.Disable(System.String)"/> method to
            handle consumer calls to disabling events; constructors needing to call
            non-virtual methods may directly call this to avoid executing against
            partially constructed derived classes.
            </para>
            </remarks>
            <seealso cref="M:Autofac.Diagnostics.DiagnosticTracerBase.EnableBase(System.String)"/>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.IsEnabled(System.String)">
            <summary>
            Determines if this observer is enabled for listening to a specific
            named event.
            </summary>
            <param name="diagnosticName">
            The name of the event to check. Diagnostic names are case-sensitive.
            </param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.System#IObserver{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#OnCompleted">
            <summary>
            Notifies the observer that the provider has finished sending push-based notifications.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.System#IObserver{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#OnError(System.Exception)">
            <summary>
            Notifies the observer that the provider has experienced an error condition.
            </summary>
            <param name="error">
            An object that provides additional information about the error.
            </param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.System#IObserver{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#OnNext(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Provides the observer with new data.
            </summary>
            <param name="value">
            The current notification information.
            </param>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnMiddlewareFailure(Autofac.Diagnostics.MiddlewareDiagnosticData)">
            <summary>
            Handles the event raised when middleware encounters an error.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnMiddlewareStart(Autofac.Diagnostics.MiddlewareDiagnosticData)">
            <summary>
            Handles the event raised when middleware starts.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnMiddlewareSuccess(Autofac.Diagnostics.MiddlewareDiagnosticData)">
            <summary>
            Handles the event raised when middleware exits successfully.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnOperationFailure(Autofac.Diagnostics.OperationFailureDiagnosticData)">
            <summary>
            Handles the event raised when a resolve operation encounters an error.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnOperationStart(Autofac.Diagnostics.OperationStartDiagnosticData)">
            <summary>
            Handles the event raised when a resolve operation starts.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnOperationSuccess(Autofac.Diagnostics.OperationSuccessDiagnosticData)">
            <summary>
            Handles the event raised when a resolve operation completes successfully.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnRequestFailure(Autofac.Diagnostics.RequestFailureDiagnosticData)">
            <summary>
            Handles the event raised when a resolve request encounters an error.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnRequestStart(Autofac.Diagnostics.RequestDiagnosticData)">
            <summary>
            Handles the event raised when a resolve request starts.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.OnRequestSuccess(Autofac.Diagnostics.RequestDiagnosticData)">
            <summary>
            Handles the event raised when a resolve request completes successfully.
            </summary>
            <param name="data">
            Diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            Derived classes can override this method and perform actions based
            on the event. By default, the base class does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.DiagnosticTracerBase.Write(System.String,System.Object)">
            <summary>
            Handles inbound events and converts the diagnostic data to a
            strongly-typed object that can be handled by the other methods
            in this observer.
            </summary>
            <param name="diagnosticName">
            The name of the event that was raised. Diagnostic names are case-sensitive.
            </param>
            <param name="data">
            The diagnostic data associated with the event.
            </param>
            <remarks>
            <para>
            If you are interested in handling custom events, check out the top-level
            <see cref="T:Autofac.Diagnostics.DiagnosticTracerBase"/> documentation which discusses some
            options.
            </para>
            </remarks>
        </member>
        <member name="T:Autofac.Diagnostics.MiddlewareDiagnosticData">
            <summary>
            Diagnostic data associated with middleware events.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.MiddlewareDiagnosticData.#ctor(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,Autofac.Core.Resolving.Pipeline.IResolveMiddleware)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.MiddlewareDiagnosticData"/> class.
            </summary>
            <param name="requestContext">The context for the resolve request that is running.</param>
            <param name="middleware">The middleware that is running.</param>
        </member>
        <member name="P:Autofac.Diagnostics.MiddlewareDiagnosticData.RequestContext">
            <summary>
            Gets the context for the resolve request that is running.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.MiddlewareDiagnosticData.Middleware">
            <summary>
            Gets the middleware that is running.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.OperationDiagnosticTracerBase`1">
            <summary>
            Base class for tracers that require all operations for logical operation tracing.
            </summary>
            <typeparam name="TContent">
            The type of content generated by the trace at the end of the operation.
            </typeparam>
            <remarks>
            <para>
            Derived classes will be subscribed to all Autofac diagnostic events
            and will raise an <see cref="E:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OperationCompleted"/>
            event when a logical operation has finished and trace data is available.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.OperationDiagnosticTracerBase`1"/> class
            and enables all subscriptions.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.OperationDiagnosticTracerBase`1"/> class
            and enables a specified set of subscriptions.
            </summary>
            <param name="subscriptions">
            The set of subscriptions that should be enabled by default.
            </param>
        </member>
        <member name="M:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.Enable(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.Disable(System.String)">
            <inheritdoc/>
        </member>
        <member name="E:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OperationCompleted">
            <summary>
            Event raised when a resolve operation completes and trace data is available.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OperationsInProgress">
            <summary>
            Gets the number of operations in progress being traced.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> with the number of trace IDs associated
            with in-progress operations being traced by this tracer.
            </value>
        </member>
        <member name="M:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OnOperationCompleted(Autofac.Diagnostics.OperationTraceCompletedArgs{`0})">
            <summary>
            Invokes the <see cref="E:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OperationCompleted"/> event.
            </summary>
            <param name="args">
            The arguments to provide in the raised event.
            </param>
        </member>
        <member name="T:Autofac.Diagnostics.OperationFailureDiagnosticData">
            <summary>
            Diagnostic data associated with resolve operation failure events.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.OperationFailureDiagnosticData.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.OperationFailureDiagnosticData"/> class.
            </summary>
            <param name="operation">The resolve operation that failed.</param>
            <param name="operationException">The exception that caused the operation failure.</param>
        </member>
        <member name="P:Autofac.Diagnostics.OperationFailureDiagnosticData.Operation">
            <summary>
            Gets the resolve operation that failed.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.OperationFailureDiagnosticData.OperationException">
            <summary>
            Gets the exception that caused the operation failure.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.OperationStartDiagnosticData">
            <summary>
            Diagnostic data associated with resolve operation start events.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.OperationStartDiagnosticData.#ctor(Autofac.Core.Resolving.IResolveOperation,Autofac.ResolveRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.OperationStartDiagnosticData"/> class.
            </summary>
            <param name="operation">The pipeline resolve operation that is about to run.</param>
            <param name="initiatingRequest">The request that is responsible for starting this operation.</param>
        </member>
        <member name="P:Autofac.Diagnostics.OperationStartDiagnosticData.Operation">
            <summary>
            Gets the pipeline resolve operation that is about to run.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.OperationStartDiagnosticData.InitiatingRequest">
            <summary>
            Gets the request that is responsible for starting this operation.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.OperationSuccessDiagnosticData">
            <summary>
            Diagnostic data associated with resolve operation success events.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.OperationSuccessDiagnosticData.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.OperationSuccessDiagnosticData"/> class.
            </summary>
            <param name="operation">The resolve operation that succeeded.</param>
            <param name="resolvedInstance">The resolved instance providing the requested service.</param>
        </member>
        <member name="P:Autofac.Diagnostics.OperationSuccessDiagnosticData.Operation">
            <summary>
            Gets the resolve operation that succeeded.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.OperationSuccessDiagnosticData.ResolvedInstance">
            <summary>
            Gets the resolved instance providing the requested service.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.OperationTraceCompletedArgs`1">
            <summary>
            Event data for the <see cref="E:Autofac.Diagnostics.OperationDiagnosticTracerBase`1.OperationCompleted"/> event.
            </summary>
            <typeparam name="TContent">
            The type of content generated by the trace at the end of the operation.
            </typeparam>
        </member>
        <member name="M:Autofac.Diagnostics.OperationTraceCompletedArgs`1.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.OperationTraceCompletedArgs`1"/> class.
            </summary>
            <param name="operation">The operation for which a trace has completed.</param>
            <param name="operationSucceeded">Indicates whether the operation succeeded.</param>
            <param name="traceContent">The content of the trace.</param>
        </member>
        <member name="P:Autofac.Diagnostics.OperationTraceCompletedArgs`1.Operation">
            <summary>
            Gets the operation for which a trace is available.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.OperationTraceCompletedArgs`1.OperationSucceeded">
            <summary>
            Gets a value indicating whether the operation this trace represents succeeded (if true), or failed with an exception (if false).
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.OperationTraceCompletedArgs`1.TraceContent">
            <summary>
            Gets the content of the trace.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.RequestDiagnosticData">
            <summary>
            Diagnostic data associated with resolve request events.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.RequestDiagnosticData.#ctor(Autofac.Core.Resolving.IResolveOperation,Autofac.Core.Resolving.Pipeline.ResolveRequestContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.RequestDiagnosticData"/> class.
            </summary>
            <param name="operation">The pipeline resolve operation that this request is running within.</param>
            <param name="requestContext">The context for the resolve request that is running.</param>
        </member>
        <member name="P:Autofac.Diagnostics.RequestDiagnosticData.Operation">
            <summary>
            Gets the pipeline resolve operation that this request is running within.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.RequestDiagnosticData.RequestContext">
            <summary>
            Gets the context for the resolve request that is running.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.RequestFailureDiagnosticData">
            <summary>
            Diagnostic data associated with resolve request failure events.
            </summary>
        </member>
        <member name="M:Autofac.Diagnostics.RequestFailureDiagnosticData.#ctor(Autofac.Core.Resolving.IResolveOperation,Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Diagnostics.RequestFailureDiagnosticData"/> class.
            </summary>
            <param name="operation">The pipeline resolve operation that this request is running within.</param>
            <param name="requestContext">The context for the resolve request that failed.</param>
            <param name="requestException">The exception that caused the failure.</param>
        </member>
        <member name="P:Autofac.Diagnostics.RequestFailureDiagnosticData.Operation">
            <summary>
            Gets the pipeline resolve operation that this request is running within.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.RequestFailureDiagnosticData.RequestContext">
            <summary>
            Gets the context for the resolve request that failed.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.RequestFailureDiagnosticData.RequestException">
            <summary>
            Gets the exception that caused the failure.
            </summary>
        </member>
        <member name="T:Autofac.Diagnostics.TracerMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ComponentDisplay">
            <summary>
              Looks up a localized string similar to Component: {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.EnterMiddleware">
            <summary>
              Looks up a localized string similar to -&gt; {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.EntryBrace">
            <summary>
              Looks up a localized string similar to {.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ExceptionDisplay">
            <summary>
              Looks up a localized string similar to Exception: {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ExitBrace">
            <summary>
              Looks up a localized string similar to }.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ExitMiddlewareFailure">
            <summary>
              Looks up a localized string similar to X- {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ExitMiddlewareSuccess">
            <summary>
              Looks up a localized string similar to &lt;- {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.InstanceDisplay">
            <summary>
              Looks up a localized string similar to Instance: {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.OperationFailed">
            <summary>
              Looks up a localized string similar to Operation FAILED.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.OperationSucceeded">
            <summary>
              Looks up a localized string similar to Operation Succeeded; result instance was {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.OutdentFailure">
            <summary>
              Looks up a localized string similar to Cannot outdent; no indentation specified..
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.Pipeline">
            <summary>
              Looks up a localized string similar to Pipeline:.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ResolveOperationStarting">
            <summary>
              Looks up a localized string similar to Resolve Operation Starting.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ResolveRequestFailed">
            <summary>
              Looks up a localized string similar to Resolve Request FAILED.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ResolveRequestFailedNested">
            <summary>
              Looks up a localized string similar to Resolve Request FAILED: Nested Resolve Failed.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ResolveRequestStarting">
            <summary>
              Looks up a localized string similar to Resolve Request Starting.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ResolveRequestSucceeded">
            <summary>
              Looks up a localized string similar to Resolve Request Succeeded; result instance was {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.ServiceDisplay">
            <summary>
              Looks up a localized string similar to Service: {0}.
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.SubscriptionsDisabled">
            <summary>
              Looks up a localized string similar to You may not add or remove subscriptions on this tracer. This ensures all required events are properly captured and traces can be correctly handled..
            </summary>
        </member>
        <member name="P:Autofac.Diagnostics.TracerMessages.TargetDisplay">
            <summary>
              Looks up a localized string similar to Target: {0}.
            </summary>
        </member>
        <member name="T:Autofac.Features.AttributeFilters.KeyFilterAttribute">
             <summary>
             Provides an annotation to resolve constructor dependencies
             according to their registered key.
             </summary>
             <remarks>
             <para>
             This attribute allows constructor dependencies to be resolved by key.
             By marking your dependencies with this attribute and associating
             an attribute filter with your type registration, you can be selective
             about which service registration should be used to provide the
             dependency.
             </para>
             </remarks>
             <example>
             <para>
             A simple example might be registration of a specific logger type to be
             used by a class. If many loggers are registered with their own key,
             the consumer can simply specify the key filter as an attribute to
             the constructor parameter.
             </para>
             <code lang="C#">
             public class Manager
             {
               public Manager([KeyFilter("Manager")] ILogger logger)
               {
                 // ...
               }
             }
             </code>
             <para>
             The same thing can be done for enumerable:
             </para>
             <code lang="C#">
             public class SolutionExplorer
             {
               public SolutionExplorer(
                 [KeyFilter("Solution")] IEnumerable&lt;IAdapter&gt; adapters,
                 [KeyFilter("Solution")] ILogger logger)
               {
                 Adapters = adapters.ToList();
                 Logger = logger;
               }
             }
             </code>
             <para>
             When registering your components, the associated key on the
             dependencies will be used. Be sure to specify the
             <see cref="M:Autofac.Features.AttributeFilters.RegistrationExtensions.WithAttributeFiltering``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})" />
             extension on the type with the filtered constructor parameters.
             </para>
             <code lang="C#">
             var builder = new ContainerBuilder();
            
             // Register the components getting filtered with keys
             builder.RegisterType&lt;ConsoleLogger&gt;().Keyed&lt;ILogger&gt;(&quot;Solution&quot;);
             builder.RegisterType&lt;FileLogger&gt;().Keyed&lt;ILogger&gt;(&quot;Other&quot;);
            
             // Attach the filtering behavior to the component with the constructor
             builder.RegisterType&lt;SolutionExplorer&gt;().WithAttributeFiltering();
            
             var container = builder.Build();
            
             // The resolved instance will have the appropriate services in place
             var explorer = container.Resolve&lt;SolutionExplorer&gt;();
             </code>
             </example>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.KeyFilterAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.AttributeFilters.KeyFilterAttribute"/> class.
            </summary>
            <param name="key">The key that the dependency should have in order to satisfy the parameter.</param>
        </member>
        <member name="P:Autofac.Features.AttributeFilters.KeyFilterAttribute.Key">
            <summary>
            Gets the key the dependency is expected to have to satisfy the parameter.
            </summary>
            <value>
            The <see cref="T:System.Object"/> corresponding to a registered service key on a component.
            Resolved components must be keyed with this value to satisfy the filter.
            </value>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.KeyFilterAttribute.ResolveParameter(System.Reflection.ParameterInfo,Autofac.IComponentContext)">
            <summary>
            Resolves a constructor parameter based on keyed service requirements.
            </summary>
            <param name="parameter">The specific parameter being resolved that is marked with this attribute.</param>
            <param name="context">The component context under which the parameter is being resolved.</param>
            <returns>
            The instance of the object that should be used for the parameter value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="parameter" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.KeyFilterAttribute.CanResolveParameter(System.Reflection.ParameterInfo,Autofac.IComponentContext)">
            <summary>
            Checks a constructor parameter can be resolved based on keyed service requirements.
            </summary>
            <param name="parameter">The specific parameter being resolved that is marked with this attribute.</param>
            <param name="context">The component context under which the parameter is being resolved.</param>
            <returns>true if parameter can be resolved; otherwise, false.</returns>
        </member>
        <member name="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute">
             <summary>
             Provides an annotation to filter constructor dependencies
             according to their specified metadata.
             </summary>
             <remarks>
             <para>
             This attribute allows constructor dependencies to be filtered by metadata.
             By marking your dependencies with this attribute and associating
             an attribute filter with your type registration, you can be selective
             about which service registration should be used to provide the
             dependency.
             </para>
             </remarks>
             <example>
             <para>
             A simple example might be registration of a specific logger type to be
             used by a class. If many loggers are registered with the <c>LoggerName</c>
             metadata, the consumer can simply specify the filter as an attribute to
             the constructor parameter.
             </para>
             <code lang="C#">
             public class Manager
             {
               public Manager([MetadataFilter("LoggerName", "Manager")] ILogger logger)
               {
                 // ...
               }
             }
             </code>
             <para>
             The same thing can be done for enumerable:
             </para>
             <code lang="C#">
             public class SolutionExplorer
             {
               public SolutionExplorer(
                 [MetadataFilter("Target", "Solution")] IEnumerable&lt;IAdapter&gt; adapters,
                 [MetadataFilter("LoggerName", "Solution")] ILogger logger)
               {
                 Adapters = adapters.ToList();
                 Logger = logger;
               }
             }
             </code>
             <para>
             When registering your components, the associated metadata on the dependencies will be used.
             Be sure to specify the <see cref="M:Autofac.Features.AttributeFilters.RegistrationExtensions.WithAttributeFiltering``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})" />
             extension on the type with the filtered constructor parameters.
             </para>
             <code lang="C#">
             var builder = new ContainerBuilder();
            
             // Attach metadata to the components getting filtered
             builder.RegisterType&lt;ConsoleLogger&gt;().WithMetadata(&quot;LoggerName&quot;, &quot;Solution&quot;).As&lt;ILogger&gt;();
             builder.RegisterType&lt;FileLogger&gt;().WithMetadata(&quot;LoggerName&quot;, &quot;Other&quot;).As&lt;ILogger&gt;();
            
             // Attach the filtering behavior to the component with the constructor
             builder.RegisterType&lt;SolutionExplorer&gt;().WithAttributeFiltering();
            
             var container = builder.Build();
            
             // The resolved instance will have the appropriate services in place
             var explorer = container.Resolve&lt;SolutionExplorer&gt;();
             </code>
             </example>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.MetadataFilterAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute"/> class.
            </summary>
            <param name="key">The metadata key that the dependency should have in order to satisfy the parameter.</param>
            <param name="value">The metadata value that the dependency should have in order to satisfy the parameter.</param>
        </member>
        <member name="P:Autofac.Features.AttributeFilters.MetadataFilterAttribute.Key">
            <summary>
            Gets the key the dependency is expected to have to satisfy the parameter.
            </summary>
            <value>
            The <see cref="T:System.String"/> corresponding to a registered metadata
            key on a component. Resolved components must have this metadata key to
            satisfy the filter.
            </value>
        </member>
        <member name="P:Autofac.Features.AttributeFilters.MetadataFilterAttribute.Value">
            <summary>
            Gets the value the dependency is expected to have to satisfy the parameter.
            </summary>
            <value>
            The <see cref="T:System.Object"/> corresponding to a registered metadata
            value on a component. Resolved components must have the metadata
            <see cref="P:Autofac.Features.AttributeFilters.MetadataFilterAttribute.Key"/> with
            this value to satisfy the filter.
            </value>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.MetadataFilterAttribute.ResolveParameter(System.Reflection.ParameterInfo,Autofac.IComponentContext)">
            <summary>
            Resolves a constructor parameter based on metadata requirements.
            </summary>
            <param name="parameter">The specific parameter being resolved that is marked with this attribute.</param>
            <param name="context">The component context under which the parameter is being resolved.</param>
            <returns>
            The instance of the object that should be used for the parameter value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="parameter" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.MetadataFilterAttribute.CanResolveParameter(System.Reflection.ParameterInfo,Autofac.IComponentContext)">
            <summary>
            Checks a constructor parameter can be resolved based on metadata requirements.
            </summary>
            <param name="parameter">The specific parameter being resolved that is marked with this attribute.</param>
            <param name="context">The component context under which the parameter is being resolved.</param>
            <returns>true if parameter can be resolved; otherwise, false.</returns>
        </member>
        <member name="T:Autofac.Features.AttributeFilters.ParameterFilterAttribute">
            <summary>
            Base attribute class for marking constructor parameters and enabling
            filtering by attributed criteria.
            </summary>
            <remarks>
            <para>
            Implementations of this attribute can be used to mark constructor parameters
            so filtering can be done based on registered service data. For example, the
            <see cref="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute"/> allows constructor
            parameters to be filtered by registered metadata criteria and the
            <see cref="T:Autofac.Features.AttributeFilters.KeyFilterAttribute"/> allows constructor
            parameters to be filtered by a keyed service registration.
            </para>
            <para>
            If a type uses these attributes, it should be registered with Autofac
            using the
            <see cref="M:Autofac.Features.AttributeFilters.RegistrationExtensions.WithAttributeFiltering``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})" />
            extension to enable the behavior.
            </para>
            <para>
            For specific attribute usage examples, see the attribute documentation.
            </para>
            </remarks>
            <seealso cref="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute"/>
            <seealso cref="T:Autofac.Features.AttributeFilters.KeyFilterAttribute"/>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.ParameterFilterAttribute.ResolveParameter(System.Reflection.ParameterInfo,Autofac.IComponentContext)">
            <summary>
            Implemented in derived classes to resolve a specific parameter marked with this attribute.
            </summary>
            <param name="parameter">The specific parameter being resolved that is marked with this attribute.</param>
            <param name="context">The component context under which the parameter is being resolved.</param>
            <returns>The instance of the object that should be used for the parameter value.</returns>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.ParameterFilterAttribute.CanResolveParameter(System.Reflection.ParameterInfo,Autofac.IComponentContext)">
            <summary>
            Implemented in derived classes to check a specific parameter can be resolved.
            </summary>
            <param name="parameter">The specific parameter being resolved that is marked with this attribute.</param>
            <param name="context">The component context under which the parameter is being resolved.</param>
            <returns>true if parameter can be resolved; otherwise, false.</returns>
        </member>
        <member name="T:Autofac.Features.AttributeFilters.RegistrationExtensions">
            <summary>
            Extends registration syntax for attribute scenarios.
            </summary>
        </member>
        <member name="M:Autofac.Features.AttributeFilters.RegistrationExtensions.WithAttributeFiltering``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Applies attribute-based filtering on constructor dependencies for use with attributes
            derived from the <see cref="T:Autofac.Features.AttributeFilters.ParameterFilterAttribute"/>.
            </summary>
            <typeparam name="TLimit">The type of the registration limit.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
            <param name="builder">The registration builder containing registration data.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
            <remarks>
            <para>
            Apply this extension to component registrations that use attributes
            that derive from the <see cref="T:Autofac.Features.AttributeFilters.ParameterFilterAttribute"/>
            like the <see cref="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute"/>
            in their constructors. Doing so will allow the attribute-based filtering to occur. See
            <see cref="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute"/> for an
            example on how to use the filter and attribute together.
            </para>
            </remarks>
            <seealso cref="T:Autofac.Features.AttributeFilters.MetadataFilterAttribute"/>
        </member>
        <member name="T:Autofac.Features.Collections.CollectionRegistrationSource">
            <summary>
            Registration source providing implicit collection/list/enumerable support.
            </summary>
            <remarks>
            <para>
            This registration source provides enumerable support to allow resolving
            the set of all registered services of a given type.
            </para>
            <para>
            What may not be immediately apparent is that it also means any time there
            are no items of a particular type registered, it will always return an
            empty set rather than <see langword="null" /> or throwing an exception.
            This is by design.
            </para>
            <para>
            Consider the [possibly majority] use case where you're resolving a set
            of message handlers or event handlers from the container. If there aren't
            any handlers, you want an empty set - not <see langword="null" /> or
            an exception. It's valid to have no handlers registered.
            </para>
            <para>
            This implicit support means other areas (like MVC support or manual
            property injection) must take care to only request enumerable values they
            expect to get something back for. In other words, "Don't ask the container
            for something you don't expect to resolve".
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Features.Collections.CollectionRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="P:Autofac.Features.Collections.CollectionRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.Collections.CollectionRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.Collections.CollectionRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.CollectionRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Collection Support (Arrays and Generic Collection Interfaces).
            </summary>
        </member>
        <member name="T:Autofac.Features.Decorators.DecoratorContext">
            <summary>
            Implements the decorator context, exposing the state of the decoration process.
            </summary>
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorContext.ImplementationType">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorContext.ServiceType">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorContext.AppliedDecoratorTypes">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorContext.AppliedDecorators">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorContext.CurrentInstance">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorContext.Create(System.Type,System.Type,System.Object)">
            <summary>
            Create a new <see cref="T:Autofac.Features.Decorators.DecoratorContext"/>.
            </summary>
            <param name="implementationType">The type of the concrete implementation.</param>
            <param name="serviceType">The service type being decorated.</param>
            <param name="implementationInstance">The instance of the implementation to be decorated.</param>
            <returns>A new decorator context.</returns>
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorContext.UpdateContext(System.Object)">
            <summary>
            Creates a new decorator context that consumes the specified decorator instance.
            </summary>
            <param name="decoratorInstance">The decorated instance.</param>
            <returns>A new context.</returns>
        </member>
        <member name="T:Autofac.Features.Decorators.DecoratorMiddleware">
            <summary>
            Service middleware that decorates activated instances of a service.
            </summary>
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorMiddleware.#ctor(Autofac.Features.Decorators.DecoratorService,Autofac.Core.IComponentRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Decorators.DecoratorMiddleware"/> class.
            </summary>
            <param name="decoratorService">The decorator service.</param>
            <param name="decoratorRegistration">The decorator registration.</param>
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorMiddleware.Phase">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorMiddleware.Execute(Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext})">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorMiddleware.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.Decorators.DecoratorService">
            <summary>
            A service that has been registered for the purpose of decorating other components.
            </summary>
            <remarks>
            This service type is used to locate decorator services and is intended for internal use only.
            </remarks>
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorService.ServiceType">
            <inheritdoc />
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorService.Condition">
            <summary>
            Gets the condition that must be met for the decorator to be applied.
            </summary>
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorService.#ctor(System.Type,System.Func{Autofac.Features.Decorators.IDecoratorContext,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Decorators.DecoratorService"/> class.
            </summary>
            <param name="serviceType">The service type for the decorator.</param>
            <param name="condition">The condition that must be met for the decorator to be applied.</param>
        </member>
        <member name="P:Autofac.Features.Decorators.DecoratorService.Description">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorService.ChangeType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorService.Equals(Autofac.Features.Decorators.DecoratorService)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorService.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Features.Decorators.DecoratorService.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Autofac.Features.Decorators.IDecoratorContext">
            <summary>
            Defines the context interface used during the decoration process.
            </summary>
        </member>
        <member name="P:Autofac.Features.Decorators.IDecoratorContext.ImplementationType">
            <summary>
            Gets the implementation type of the service that is being decorated.
            </summary>
        </member>
        <member name="P:Autofac.Features.Decorators.IDecoratorContext.ServiceType">
            <summary>
            Gets the service type of the service that is being decorated.
            </summary>
        </member>
        <member name="P:Autofac.Features.Decorators.IDecoratorContext.AppliedDecoratorTypes">
            <summary>
            Gets the implementation types of the decorators that have been applied.
            </summary>
        </member>
        <member name="P:Autofac.Features.Decorators.IDecoratorContext.AppliedDecorators">
            <summary>
            Gets the decorator instances that have been applied.
            </summary>
        </member>
        <member name="P:Autofac.Features.Decorators.IDecoratorContext.CurrentInstance">
            <summary>
            Gets the current instance in the decorator chain. This will be initialized
            to the service being decorated and will then become the decorated instance
            as each decorator is applied.
            </summary>
        </member>
        <member name="T:Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource">
            <summary>
            Service middleware source that enables open generic decorators.
            </summary>
        </member>
        <member name="M:Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource.#ctor(Autofac.Features.Decorators.DecoratorService,Autofac.Builder.RegistrationData,Autofac.Builder.ReflectionActivatorData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource"/> class.
            </summary>
            <param name="decoratorService">The decorator service.</param>
            <param name="registrationData">The registration data for the decorator.</param>
            <param name="activatorData">The activator data for the decorator.</param>
        </member>
        <member name="M:Autofac.Features.Decorators.OpenGenericDecoratorMiddlewareSource.ProvideMiddleware(Autofac.Core.Service,Autofac.Core.IComponentRegistryServices,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.FactoryGenerator">
            <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.GeneratedFactories.FactoryGenerator"/> class.
            </summary>
            <param name="service">The service that will be activated in
            order to create the products of the factory.</param>
            <param name="delegateType">The delegate to provide as a factory.</param>
            <param name="parameterMapping">The parameter mapping mode to use.</param>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Core.ServiceRegistration,Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.GeneratedFactories.FactoryGenerator"/> class.
            </summary>
            <param name="service">The service that will be activated in
            order to create the products of the factory.</param>
            <param name="productRegistration">The component that will be activated in
            order to create the products of the factory.</param>
            <param name="delegateType">The delegate to provide as a factory.</param>
            <param name="parameterMapping">The parameter mapping mode to use.</param>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData">
            <summary>
            Data used to create factory activators.
            </summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.#ctor(System.Type,Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData"/> class.
            </summary>
            <param name="delegateType">The type of the factory.</param>
            <param name="productService">The service used to provide the products of the factory.</param>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.ParameterMapping">
            <summary>
            Gets or sets a value determining how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            For Func-based delegates, this defaults to ByType. Otherwise, the
            parameters will be mapped by name.
            </summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.Activator">
            <summary>
            Gets the activator data that can provide an IInstanceActivator instance.
            </summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationExtensions">
            <summary>
            Helper methods for registering factories.
            </summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder,System.Type,Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>Factory delegates are provided automatically in Autofac 2, and
            this method is generally not required.</remarks>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource">
            <summary>
            Registration source for generated factory methods (i.e. when resolving <see cref="T:System.Func`1"/> or some variant).
            </summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.DuplicateTypesInTypeMappedFuncParameterList">
            <summary>
              Looks up a localized string similar to Unable to generate a function to return type &apos;{0}&apos; with input parameter types [{1}]. The input parameter type list has duplicate types. Try registering a custom delegate type instead of using a generic Func relationship..
            </summary>
        </member>
        <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.GeneratedFactoryRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Delegate Support (Func&lt;T&gt;and Custom Delegates).
            </summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.ParameterMapping">
            <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.Adaptive">
            <summary>
            Chooses parameter mapping based on the factory type.
            For Func-based factories this is equivalent to ByType, for all
            others ByName will be used.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByName">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as NamedParameters based on the parameter
            names in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByType">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as TypedParameters based on the parameter
            types in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByPosition">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as PositionalParameters based on the parameter
            indices in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="T:Autofac.Features.Indexed.IIndex`2">
            <summary>
            Provides components by lookup operations via an index (key) type.
            </summary>
            <typeparam name="TKey">The type of the index.</typeparam>
            <typeparam name="TValue">The service provided by the indexed components.</typeparam>
            <example>
            Retrieving a value given a key:
            <code>
            IIndex&lt;AccountType, IRenderer&gt; accountRenderers = // ...
            var renderer = accountRenderers[AccountType.User];
            </code>
            </example>
        </member>
        <member name="P:Autofac.Features.Indexed.IIndex`2.Item(`0)">
            <summary>
            Get the value associated with <paramref name="key"/>.
            </summary>
            <param name="key">The value to retrieve.</param>
            <returns>The associated value.</returns>
        </member>
        <member name="M:Autofac.Features.Indexed.IIndex`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value associated with <paramref name="key"/> if any is available.
            </summary>
            <param name="key">The key to look up.</param>
            <param name="value">The retrieved value.</param>
            <returns>True if a value associated with the key exists.</returns>
        </member>
        <member name="T:Autofac.Features.Indexed.KeyedServiceIndex`2">
            <summary>
            Provides components by lookup operations via an index (key) type.
            </summary>
            <typeparam name="TKey">The index key type.</typeparam>
            <typeparam name="TValue">The index value type.</typeparam>
        </member>
        <member name="M:Autofac.Features.Indexed.KeyedServiceIndex`2.#ctor(Autofac.IComponentContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Indexed.KeyedServiceIndex`2"/> class.
            </summary>
            <param name="context">The current component context.</param>
        </member>
        <member name="P:Autofac.Features.Indexed.KeyedServiceIndex`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.Indexed.KeyedServiceIndex`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.LazyDependencies.LazyRegistrationSource">
            <summary>
            Support the <see cref="T:System.Lazy`1"/>
            type automatically whenever type T is registered with the container.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
        </member>
        <member name="M:Autofac.Features.LazyDependencies.LazyRegistrationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.LazyDependencies.LazyRegistrationSource"/> class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSource.Description">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.LazyDependencies.LazyRegistrationSource.ResolveInstance``1(Autofac.IComponentContext,Autofac.ResolveRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.LazyRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Lazy&lt;T&gt; Support.
            </summary>
        </member>
        <member name="T:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource">
            <summary>
            Support the <c>System.Lazy&lt;T, TMetadata&gt;</c>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
        </member>
        <member name="M:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources.LazyWithMetadataRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Lazy&lt;T, TMetadata&gt; Support.
            </summary>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData">
            <summary>
            Describes the basic requirements for generating a lightweight adapter.
            </summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.#ctor(Autofac.Core.Service,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData"/> class.
            </summary>
            <param name="fromService">The service that will be adapted from.</param>
            <param name="adapter">The adapter function.</param>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.Adapter">
            <summary>
            Gets the adapter function.
            </summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.FromService">
            <summary>
            Gets the service to be adapted from.
            </summary>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationExtensions">
            <summary>
            Extension methods for registering adapters.
            </summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>, given the context and parameters.</param>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>, given the context and parameters.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource">
            <summary>
            A registration source for registered adapters.
            </summary>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource.#ctor(Autofac.Builder.RegistrationData,Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource"/> class.
            </summary>
            <param name="registrationData">The registration data for the adapter.</param>
            <param name="activatorData">The activator data for the adapter.</param>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.AdapterFromToDescription">
            <summary>
              Looks up a localized string similar to Lightweight Adapter from {0} to {1}.
            </summary>
        </member>
        <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.FromAndToMustDiffer">
            <summary>
              Looks up a localized string similar to The service {0} cannot be both the adapter&apos;s from and to parameters - these must differ..
            </summary>
        </member>
        <member name="T:Autofac.Features.Metadata.MetadataViewProvider">
            <summary>
            Helper methods for creating a metadata access function that retrieves typed metdata from a dictionary.
            </summary>
        </member>
        <member name="M:Autofac.Features.Metadata.MetadataViewProvider.GetMetadataViewProvider``1">
            <summary>
            Generate a provider function that takes a dictionary of metadata, and outputs a typed metadata object.
            </summary>
            <typeparam name="TMetadata">The metadata type.</typeparam>
            <returns>A provider function.</returns>
        </member>
        <member name="T:Autofac.Features.Metadata.MetadataViewProviderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.InvalidViewImplementation">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; cannot be used as a metadata view. A metadata view must be a concrete class with a parameterless or dictionary constructor..
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.MissingMetadata">
            <summary>
              Looks up a localized string similar to Export metadata for &apos;{0}&apos; is missing and no default value was supplied..
            </summary>
        </member>
        <member name="T:Autofac.Features.Metadata.MetaRegistrationSource">
            <summary>
            Support the <see cref="T:Autofac.Features.Metadata.Meta`1"/>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
        </member>
        <member name="M:Autofac.Features.Metadata.MetaRegistrationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Metadata.MetaRegistrationSource"/> class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetaRegistrationSource.Description">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.Metadata.MetaRegistrationSource.ResolveInstance``1(Autofac.IComponentContext,Autofac.ResolveRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.Metadata.MetaRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.MetaRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Meta&lt;T&gt; Support.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.StronglyTypedMetaRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Meta&lt;T, TMetadata&gt; Support.
            </summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Meta`2">
            <summary>
            Provides a value along with metadata describing the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <typeparam name="TMetadata">An interface to which metadata values can be bound.</typeparam>
        </member>
        <member name="M:Autofac.Features.Metadata.Meta`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Metadata.Meta`2"/> class.
            </summary>
            <param name="value">The value described by the instance.</param>
            <param name="metadata">The metadata describing the value.</param>
        </member>
        <member name="P:Autofac.Features.Metadata.Meta`2.Value">
            <summary>
            Gets the value described by <see cref="P:Autofac.Features.Metadata.Meta`2.Metadata"/>.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Meta`2.Metadata">
            <summary>
            Gets metadata describing the value.
            </summary>
        </member>
        <member name="T:Autofac.Features.Metadata.Meta`1">
            <summary>
            Provides a value along with a dictionary of metadata describing the value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Autofac.Features.Metadata.Meta`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Metadata.Meta`1"/> class.
            </summary>
            <param name="value">The value described by the instance.</param>
            <param name="metadata">The metadata describing the value.</param>
        </member>
        <member name="P:Autofac.Features.Metadata.Meta`1.Value">
            <summary>
            Gets the value described by <see cref="P:Autofac.Features.Metadata.Meta`1.Metadata"/>.
            </summary>
        </member>
        <member name="P:Autofac.Features.Metadata.Meta`1.Metadata">
            <summary>
            Gets the metadata describing the value.
            </summary>
        </member>
        <member name="T:Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource">
            <summary>
            Support the <see cref="T:Autofac.Features.Metadata.Meta`2"/>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
        </member>
        <member name="M:Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData">
            <summary>
            Describes the activator for an open generic decorator.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.#ctor(System.Type,Autofac.Core.IServiceWithType)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData"/> class.
            </summary>
            <param name="implementer">The decorator type.</param>
            <param name="fromService">The open generic service type to decorate.</param>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.FromService">
            <summary>
            Gets the open generic service type to decorate.
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.DecoratedServiceIsNotOpenGeneric">
            <summary>
              Looks up a localized string similar to The service &apos;{0}&apos; is not an open generic type..
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource">
            <summary>
            Registration source for handling open generic decorators.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource.#ctor(Autofac.Builder.RegistrationData,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource"/> class.
            </summary>
            <param name="registrationData">The registration data for the open generic.</param>
            <param name="existingPipelineBuilder">The pipeline for the existing open generic registration.</param>
            <param name="activatorData">The activator data.</param>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.FromAndToMustDiffer">
            <summary>
              Looks up a localized string similar to The service {0} cannot be both the adapter&apos;s from and to parameters - these must differ..
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.OpenGenericDecoratorRegistrationSourceImplFromTo">
            <summary>
              Looks up a localized string similar to Open Generic Decorator {0} from {1} to {2}.
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData">
            <summary>
            Activator data for the open generic delegate activator. Holds the specified factory method.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData.#ctor(System.Func{Autofac.IComponentContext,System.Type[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData"/> class.
            </summary>
            <param name="factory">The factory method that will create a closed generic instance.</param>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData.Factory">
            <summary>
            Gets the factory method that will create a closed generic instance.
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource">
            <summary>
            Generates activators for open generics registered using a delegate.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource.#ctor(Autofac.Builder.RegistrationData,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Features.OpenGenerics.OpenGenericDelegateActivatorData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource"/> class.
            </summary>
            <param name="registrationData">The registration data for the open generic.</param>
            <param name="existingPipelineBuilder">The pipeline for the existing open generic registration.</param>
            <param name="activatorData">The activator data.</param>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericDelegateRegistrationSourceResources.OpenGenericDelegateRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Delegate providing {0}.
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions">
            <summary>
            Extension methods to support open generic registrations.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="builder">Container builder.</param>
            <param name="implementer">The open generic implementation type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Type[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="builder">Container builder.</param>
            <param name="factory">Delegate responsible for generating an instance of a closed generic based on the open generic type being registered.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions.CreateGenericBuilder(System.Type)">
            <summary>
            Creates an un-parameterised generic type, e.g. Repository&lt;&gt;, without registering it.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="implementer">The open generic implementation type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions.CreateGenericBuilder(System.Func{Autofac.IComponentContext,System.Type[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Creates a registration builder for an un-parameterised generic type, e.g. Repository&lt;&gt;, without registering it.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="factory">Delegate responsible for generating an instance of a closed generic based on the open generic type being registered.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensions.RegisterGenericDecorator(Autofac.ContainerBuilder,System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Decorate all components implementing open generic service <paramref name="decoratedServiceType"/>.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="decoratedServiceType">Service type being decorated. Must be an open generic type.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
            <param name="decoratorType">The type of the decorator. Must be an open generic type, and accept a parameter
            of type <paramref name="decoratedServiceType"/>, which will be set to the instance being decorated.</param>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.ImplementorMustBeOpenGenericType">
            <summary>
              Looks up a localized string similar to The type {0} is not an open generic type definition..
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource">
            <summary>
            Generates activators for open generic types.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource.#ctor(Autofac.Builder.RegistrationData,Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Builder.ReflectionActivatorData)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource"/> class.
            </summary>
            <param name="registrationData">The registration data for the open generic.</param>
            <param name="existingPipelineBuilder">The pipeline for the existing open generic registration.</param>
            <param name="activatorData">The activator data.</param>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource.IsAdapterForIndividualComponents">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.OpenGenericRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to {0} providing {1}.
            </summary>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericServiceBinder">
            <summary>
            Helper functions for binding open generic implementations to a known implementation type.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericServiceBinder.TryBindOpenGenericService(Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Type,System.Type@,Autofac.Core.Service[]@)">
            <summary>
            Given a closed generic service (that is being requested), creates a closed generic implementation type
            and associated services from the open generic implementation and services.
            </summary>
            <param name="closedService">The closed generic service to bind.</param>
            <param name="configuredOpenGenericServices">The set of configured open generic services.</param>
            <param name="openGenericImplementationType">The implementation type of the open generic.</param>
            <param name="constructedImplementationType">The built closed generic implementation type.</param>
            <param name="constructedServices">The built closed generic services.</param>
            <returns>True if the closed generic service can be bound. False otherwise.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericServiceBinder.TryBindOpenGenericDelegate(Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Func{Autofac.IComponentContext,System.Type[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object},System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object}@,Autofac.Core.Service[]@)">
            <summary>
            Given a closed generic service (that is being requested), creates a closed generic implementation type
            and associated services from the open generic implementation and services.
            </summary>
            <param name="closedService">The closed generic service to bind.</param>
            <param name="configuredOpenGenericServices">The set of configured open generic services.</param>
            <param name="openGenericFactory">Delegate responsible for generating an instance of a closed generic based on the open generic type being registered.</param>
            <param name="constructedFactory">The built closed generic implementation type.</param>
            <param name="constructedServices">The built closed generic services.</param>
            <returns>True if the closed generic service can be bound. False otherwise.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericServiceBinder.TryBindOpenGenericTypedService(Autofac.Core.IServiceWithType,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Type,System.Type@,Autofac.Core.Service[]@)">
            <summary>
            Given a closed generic service (that is being requested), creates a closed generic implementation type
            and associated services from the open generic implementation and services.
            </summary>
            <param name="serviceWithType">The closed generic service to bind.</param>
            <param name="configuredOpenGenericServices">The set of configured open generic services.</param>
            <param name="openGenericImplementationType">The implementation type of the open generic.</param>
            <param name="constructedImplementationType">The built closed generic implementation type.</param>
            <param name="constructedServices">The built closed generic services.</param>
            <returns>True if the closed generic service can be bound. False otherwise.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericServiceBinder.TryBindOpenGenericDelegateService(Autofac.Core.IServiceWithType,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Func{Autofac.IComponentContext,System.Type[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object},System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object}@,Autofac.Core.Service[]@)">
            <summary>
            Given a closed generic service (that is being requested), creates a regular delegate callback
            and associated services from the open generic delegate and services.
            </summary>
            <param name="serviceWithType">The closed generic service to bind.</param>
            <param name="configuredOpenGenericServices">The set of configured open generic services.</param>
            <param name="openGenericFactory">Delegate responsible for generating an instance of a closed generic based on the open generic type being registered.</param>
            <param name="constructedFactory">The built closed generic implementation type.</param>
            <param name="constructedServices">The built closed generic services.</param>
            <returns>True if the closed generic service can be bound. False otherwise.</returns>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericServiceBinder.EnforceBindable(System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service})">
            <summary>
            Throws an exception if an open generic implementation type cannot implement the set of specified open services.
            </summary>
            <param name="implementationType">The open generic implementation type.</param>
            <param name="services">The set of open generic services.</param>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ImplementorDoesntImplementService">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not implement the interface &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ImplementorMustBeOpenGenericTypeDefinition">
            <summary>
              Looks up a localized string similar to The implementation type &apos;{0}&apos; is not an open generic type definition..
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ServiceTypeMustBeOpenGenericTypeDefinition">
            <summary>
              Looks up a localized string similar to The service &apos;{0}&apos; is not an open generic type definition..
            </summary>
        </member>
        <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.TypesAreNotConvertible">
            <summary>
              Looks up a localized string similar to The service &apos;{1}&apos; is not assignable from implementation type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.InstancePerOwnedKey">
            <summary>
            Defines a key for a matching lifetime scope used by instance-per-owned.
            </summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.InstancePerOwnedKey.#ctor(Autofac.Core.TypedService)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OwnedInstances.InstancePerOwnedKey"/> class.
            </summary>
            <param name="typedService">The encapsulated service.</param>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.InstancePerOwnedKey.Equals(Autofac.Core.IServiceWithType)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.InstancePerOwnedKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.InstancePerOwnedKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.Owned`1">
             <summary>
             Represents a dependency that can be released by the dependent component.
             </summary>
             <typeparam name="T">The service provided by the dependency.</typeparam>
             <remarks>
             <para>
             Autofac automatically provides instances of <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/> whenever the
             service <typeparamref name="T"/> is registered.
             </para>
             <para>
             It is not necessary for <typeparamref name="T"/>, or the underlying component, to implement <see cref="T:System.IDisposable"/>.
             Disposing of the <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/> object is the correct way to handle cleanup of the dependency,
             as this will dispose of any other components created indirectly as well.
             </para>
             <para>
             When <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/> is resolved, a new <see cref="T:Autofac.ILifetimeScope"/> is created for the
             underlying <typeparamref name="T"/>, and tagged with the service matching <typeparamref name="T"/>,
             generally a <see cref="T:Autofac.Core.TypedService"/>. This means that shared instances can be tied to this
             scope by registering them as InstancePerMatchingLifetimeScope(new TypedService(typeof(T))).
             </para>
             </remarks>
             <example>
             The component D below is disposable and implements IService:
             <code>
             public class D : IService, IDisposable
             {
               // ...
             }
             </code>
             The dependent component C can dispose of the D instance whenever required by taking a dependency on
             <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/>:
             <code>
             public class C
             {
               IService _service;
            
               public C(Owned&lt;IService&gt; service)
               {
                 _service = service;
               }
            
               void DoWork()
               {
                 _service.Value.DoSomething();
               }
            
               void OnFinished()
               {
                 _service.Dispose();
               }
             }
             </code>
             In general, rather than depending on <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/> directly, components will depend on
             System.Func&lt;Owned&lt;T&gt;&gt; in order to create and dispose of other components as required.
             </example>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Owned`1.#ctor(`0,System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/> class.
            </summary>
            <param name="value">The value representing the instance.</param>
            <param name="lifetime">An IDisposable interface through which ownership can be released.</param>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.Owned`1.Value">
            <summary>
            Gets or sets the owned value.
            </summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Owned`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.Owned`1.DisposeAsync(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources asynchronously.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource">
            <summary>
            Generates registrations for services of type <see cref="T:Autofac.Features.OwnedInstances.Owned`1"/> whenever the service
            T is available.
            </summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.ResolveInstance``1(Autofac.IComponentContext,Autofac.ResolveRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.BuildRegistration(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle})">
            <inheritdoc/>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.Description">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.OwnedInstanceRegistrationSourceDescription">
            <summary>
              Looks up a localized string similar to Owned&lt;T&gt; Support.
            </summary>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource">
            <summary>
            Provides registrations on-the-fly for any concrete type not already registered with
            the container.
            </summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource"/> class.
            </summary>
            <param name="predicate">A predicate that selects types the source will register.</param>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.IsAdapterForIndividualComponents">
            <summary>
            Gets a value indicating whether the registrations provided by this source are 1:1 adapters on top
            of other components (e.g., Meta, Func, or Owned).
            </summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationConfiguration">
            <summary>
            Gets or sets an expression used to configure generated registrations.
            </summary>
            <value>
            A <see cref="T:System.Action`1"/> that can be used to modify the behavior
            of registrations that are generated by this source.
            </value>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceExtensions">
            <summary>
            Extension methods for configuring the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource"/>.
            </summary>
        </member>
        <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceExtensions.WithRegistrationsAs(Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource,System.Action{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>
            Fluent method for setting the registration configuration on <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource"/>.
            </summary>
            <param name="source">The registration source to configure.</param>
            <param name="configurationAction">A configuration action that will run on any registration provided by the source.</param>
            <returns>
            The <paramref name="source" /> with the registration configuration set.
            </returns>
        </member>
        <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.AnyConcreteTypeNotAlreadyRegisteredSourceDescription">
            <summary>
              Looks up a localized string similar to &quot;Resolve Anything&quot; Support.
            </summary>
        </member>
        <member name="T:Autofac.Features.Scanning.BaseScanningActivatorData`2">
            <summary>
            Base activation data for types located by scanning assemblies.
            </summary>
        </member>
        <member name="M:Autofac.Features.Scanning.BaseScanningActivatorData`2.#ctor(System.Collections.Generic.ICollection{System.Action{System.Type,Autofac.Builder.IRegistrationBuilder{System.Object,`0,`1}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Scanning.BaseScanningActivatorData`2"/> class.
            </summary>
            <param name="configurationActions">Additional actions to be performed on the concrete type registration.</param>
        </member>
        <member name="P:Autofac.Features.Scanning.BaseScanningActivatorData`2.ConfigurationActions">
            <summary>
            Gets the additional actions to be performed on the concrete type registrations.
            </summary>
        </member>
        <member name="P:Autofac.Features.Scanning.BaseScanningActivatorData`2.Filters">
            <summary>
            Gets the filters applied to the types from the scanned assembly.
            </summary>
        </member>
        <member name="P:Autofac.Features.Scanning.BaseScanningActivatorData`2.PostScanningCallbacks">
            <summary>
            Gets the actions to be called once the scanning operation is complete.
            </summary>
        </member>
        <member name="T:Autofac.Features.Scanning.OpenGenericScanningActivatorData">
            <summary>
            Activation data for open generic types located by scanning assemblies.
            </summary>
        </member>
        <member name="M:Autofac.Features.Scanning.OpenGenericScanningActivatorData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Scanning.OpenGenericScanningActivatorData"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Features.Scanning.ScanningRegistrationExtensions">
            <summary>
            Helper methods to assist in scanning registration.
            </summary>
            <summary>
            Helper methods to assist in scanning registration.
            </summary>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.RegisterOpenGenericAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register open generic types from the specified assemblies.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="assemblies">The set of assemblies.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.As``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}})">
            <summary>
            Specifies how an open generic type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AssignableTo``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Type)">
            <summary>
            Filters the scanned types to include only those assignable to the provided.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TRegistrationStyle">The registration style.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="openGenericServiceType">The type or interface which all classes must be assignable from.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AssignableTo``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Type,System.Object)">
            <summary>
            Filters the scanned types to include only those assignable to the provided.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TRegistrationStyle">The registration style.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="openGenericServiceType">The type or interface which all classes must be assignable from.</param>
            <param name="serviceKey">The service key.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AssignableTo``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Filters the scanned types to include only those assignable to the provided.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TRegistrationStyle">The registration style.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="openGenericServiceType">The type or interface which all classes must be assignable from.</param>
            <param name="serviceKeyMapping">A function to determine the service key for a given type.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register types from the specified assemblies.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="assemblies">The set of assemblies.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.RegisterTypes(Autofac.ContainerBuilder,System.Type[])">
            <summary>
            Register the specified types.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="types">The set of types.</param>
            <returns>A registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Configures the scanning registration builder to register all closed types of the specified open generic.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TScanningActivatorData">The activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">The registration style.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="openGenericServiceType">The open generic to register closed types of.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,System.Object)">
            <summary>
            Configures the scanning registration builder to register all closed types of the specified open generic as a keyed service.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TScanningActivatorData">The activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">The registration style.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="openGenericServiceType">The open generic to register closed types of.</param>
            <param name="serviceKey">The service key.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Configures the scanning registration builder to register all closed types of the specified open generic as a keyed service.
            </summary>
            <typeparam name="TLimit">The limit type.</typeparam>
            <typeparam name="TScanningActivatorData">The activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">The registration style.</typeparam>
            <param name="registration">The registration builder.</param>
            <param name="openGenericServiceType">The open generic to register closed types of.</param>
            <param name="serviceKeyMapping">A function to determine the service key for a given type.</param>
            <returns>The registration builder.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.AssignableTo``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="type">The type or interface which all classes must be assignable from.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningRegistrationExtensions.PreserveExistingDefaults``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Specifies that the components being registered should only be made the default for services
            that have not already been registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="T:Autofac.Features.Scanning.ScanningActivatorData">
            <summary>
            Activation data for types located by scanning assemblies.
            </summary>
        </member>
        <member name="M:Autofac.Features.Scanning.ScanningActivatorData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.Scanning.ScanningActivatorData"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Features.Variance.ContravariantRegistrationSource">
             <summary>
             Enables contravariant <c>Resolve()</c> for interfaces that have a single contravariant ('in') parameter.
             </summary>
             <example>
             <code>
             interface IHandler&lt;in TCommand&gt;
             {
                 void Handle(TCommand command);
             }
            
             class Command { }
            
             class DerivedCommand : Command { }
            
             class CommandHandler : IHandler&lt;Command&gt; { ... }
            
             var builder = new ContainerBuilder();
             builder.RegisterSource(new ContravariantRegistrationSource());
             builder.RegisterType&lt;CommandHandler&gt;();
             var container = builder.Build();
             // Source enables this line, even though IHandler&lt;Command&gt; is the
             // actual registered type.
             var handler = container.Resolve&lt;IHandler&lt;DerivedCommand&gt;&gt;();
             handler.Handle(new DerivedCommand());
             </code>
             </example>
        </member>
        <member name="M:Autofac.Features.Variance.ContravariantRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.ServiceRegistration}})">
            <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
            <returns>Registrations providing the service.</returns>
            <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service"/>.
            </remarks>
        </member>
        <member name="P:Autofac.Features.Variance.ContravariantRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets a value indicating whether the registrations provided by this source are 1:1 adapters on top
            of other components (e.g., Meta, Func, or Owned).
            </summary>
        </member>
        <member name="T:Autofac.IComponentContext">
            <summary>
            The context in which a service can be accessed or a component's
            dependencies resolved. Disposal of a context will dispose any owned
            components.
            </summary>
        </member>
        <member name="P:Autofac.IComponentContext.ComponentRegistry">
            <summary>
            Gets the associated services with the components that provide them.
            </summary>
        </member>
        <member name="M:Autofac.IComponentContext.ResolveComponent(Autofac.ResolveRequest)">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="request">The resolve request.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="T:Autofac.IContainer">
            <summary>
            Creates, wires dependencies and manages lifetime for a set of components.
            Most instances of <see cref="T:Autofac.IContainer"/> are created
            by a <see cref="T:Autofac.ContainerBuilder"/>.
            </summary>
            <example>
            <code>
            // See ContainerBuilder for the definition of the builder variable
            using (var container = builder.Build())
            {
                var program = container.Resolve&lt;Program&gt;();
                program.Run();
            }
            </code>
            </example>
            <remarks>
            Most <see cref="T:Autofac.IContainer"/> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.IComponentContext"/> interface.
            </remarks>
            <seealso cref="T:Autofac.ILifetimeScope"/>
            <seealso cref="T:Autofac.IComponentContext"/>
            <seealso cref="T:Autofac.ResolutionExtensions"/>
            <seealso cref="T:Autofac.ContainerBuilder"/>
        </member>
        <member name="P:Autofac.IContainer.DiagnosticSource">
            <summary>
            Gets the <see cref="T:System.Diagnostics.DiagnosticListener"/> to which
            trace events should be written.
            </summary>
        </member>
        <member name="T:Autofac.ILifetimeScope">
             <summary>
             <para>
             An <see cref="T:Autofac.ILifetimeScope"/> tracks the instantiation of component instances.
             It defines a boundary in which instances are shared and configured.
             </para>
             <para>
             Disposing an <see cref="T:Autofac.ILifetimeScope"/> will dispose any components that were
             newly created when resolving from it, provided those components were not registered as
             <see cref="M:Autofac.Builder.IRegistrationBuilder`3.ExternallyOwned"/>.
             </para>
             </summary>
             <example>
             <code>
             // See IContainer for definition of the container variable
             using (var requestScope = container.BeginLifetimeScope())
             {
                 // Note that handler is resolved from requestScope, not
                 // from the container:
            
                 var handler = requestScope.Resolve&lt;IRequestHandler&gt;();
                 handler.Handle(request);
            
                 // When requestScope is disposed, all resources used in processing
                 // the request will be released.
             }
             </code>
             </example>
             <remarks>
             <para>
             All long-running applications should resolve components via an
             <see cref="T:Autofac.ILifetimeScope"/>. Choosing the duration of the lifetime is application-
             specific.
             </para>
             <para>
             The standard Autofac integrations are already configured
             to create and dispose <see cref="T:Autofac.ILifetimeScope"/>s as appropriate. For example, the
             integration with ASP.NET Core (via the .NET DI library) will create and dispose
             one <see cref="T:Autofac.ILifetimeScope"/> per HTTP request.
             </para>
             <para>
             Most <see cref="T:Autofac.ILifetimeScope"/> functionality is provided by extension methods
             on the inherited <see cref="T:Autofac.IComponentContext"/> interface.
             </para>
             </remarks>
             <seealso cref="T:Autofac.IContainer"/>
             <seealso cref="T:Autofac.IComponentContext"/>
             <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])"/>
             <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope"/>
             <seealso cref="T:Autofac.Core.InstanceSharing"/>
             <seealso cref="T:Autofac.Core.IComponentLifetime"/>
        </member>
        <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Object)">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <remarks>
            <para>
            Any components registered in the sub-scope will only be resolvable from this new scope,
            or additional child scopes subsequently resolved from it.
            </para>
            <para>
            Components registered in the sub-scope that provide services already registered
            in a parent <see cref="T:Autofac.ILifetimeScope"/> (or root <see cref="T:Autofac.IContainer"/>) will
            override that same service registration when resolving instances.
            </para>
            <para>
            If you resolve an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in the new scope, the returned set of components will
            include both components registered in the new sub-scope, plus all registered components all the way back
            up to the root <see cref="T:Autofac.IContainer"/>.
            </para>
            <para>
            Resolving a service from this scope that was only defined in a parent <see cref="T:Autofac.ILifetimeScope"/> (or root <see cref="T:Autofac.IContainer"/>)
            will result in a component 'owned' by the scope it was registered in (rather than this new scope).
            For example, if you registered a <c>SingleInstance()</c> component in the root container, but resolved it in the new sub-scope, the instance you get will
            be attached to the root container, not your scope, so the same instance will be shared by all other <see cref="T:Autofac.ILifetimeScope"/> instances.
            </para>
            <para>
            <c>SingleInstance()</c> components registered in this scope will be held as long as this scope exists, but will be discarded
            when the scope is disposed.
            </para>
            </remarks>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <remarks>
            <para>
            Any components registered in the sub-scope will only be resolvable from this new scope,
            or additional child scopes subsequently resolved from it.
            </para>
            <para>
            Components registered in the sub-scope that provide services already registered
            in a parent <see cref="T:Autofac.ILifetimeScope"/> (or root <see cref="T:Autofac.IContainer"/>) will
            override that same service registration when resolving instances.
            </para>
            <para>
            If you resolve an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in the new scope, the returned set of components will
            include both components registered in the new sub-scope, plus all registered components all the way back
            up to the root <see cref="T:Autofac.IContainer"/>.
            </para>
            <para>
            Resolving a service from this scope that was only defined in a parent <see cref="T:Autofac.ILifetimeScope"/> (or root <see cref="T:Autofac.IContainer"/>)
            will result in a component 'owned' by the scope it was registered in (rather than this new scope).
            For example, if you registered a <c>SingleInstance()</c> component in the root container, but resolved it in the new sub-scope, the instance you get will
            be attached to the root container, not your scope, so the same instance will be shared by all other <see cref="T:Autofac.ILifetimeScope"/> instances.
            </para>
            <para>
            <c>SingleInstance()</c> components registered in this scope will be held as long as this scope exists, but will be discarded
            when the scope is disposed.
            </para>
            </remarks>
            <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/>
            that adds component registrations visible only in the new scope.</param>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="P:Autofac.ILifetimeScope.Disposer">
            <summary>
            Gets the disposer associated with this <see cref="T:Autofac.ILifetimeScope"/>.
            Component instances can be associated with it manually if required.
            </summary>
            <remarks>Typical usage does not require interaction with this member- it
            is used when extending the container.</remarks>
        </member>
        <member name="P:Autofac.ILifetimeScope.Tag">
            <summary>
            Gets the tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
            <remarks>Tags allow a level in the lifetime hierarchy to be identified.
            In most applications, tags are not necessary.</remarks>
            <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])"/>
        </member>
        <member name="E:Autofac.ILifetimeScope.ChildLifetimeScopeBeginning">
            <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
        </member>
        <member name="E:Autofac.ILifetimeScope.CurrentScopeEnding">
            <summary>
            Fired when this scope is ending.
            </summary>
        </member>
        <member name="E:Autofac.ILifetimeScope.ResolveOperationBeginning">
            <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
        </member>
        <member name="T:Autofac.IStartable">
            <summary>
            When implemented by a component, an instance of the component will be resolved
            and started as soon as the container is built. Autofac will not call the Start()
            method when subsequent instances are resolved. If this behavior is required, use
            an <c>OnActivated()</c> event handler instead.
            </summary>
            <remarks>
            <para>
            For equivalent "Stop" functionality, implement <see cref="T:System.IDisposable"/>. Autofac
            will always dispose a component before any of its dependencies (except in the presence
            of circular dependencies, in which case the components in the cycle are disposed in
            reverse-construction order.)
            </para>
            <para>
            Components that implement <see cref="T:Autofac.IStartable"/> and configured with a InstancePerLifetimeScope()
            lifetime are still only started *once*, in the root <see cref="T:Autofac.IContainer"/> or <see cref="T:Autofac.ILifetimeScope"/>
            where the component was registered.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.IStartable.Start">
            <summary>
            Perform once-off startup processing.
            </summary>
        </member>
        <member name="T:Autofac.Module">
             <summary>
             Base class for user-defined modules. Modules can add a set of related components
             to a container (<see cref="M:Autofac.Module.Load(Autofac.ContainerBuilder)"/>) or attach cross-cutting functionality
             to other components (<see cref="M:Autofac.Module.AttachToComponentRegistration(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IComponentRegistration)"/>.
             Modules are given special support in the XML configuration feature - see
             https://autofac.readthedocs.io/en/latest/configuration/modules.html.
             </summary>
             <remarks>Provides a user-friendly way to implement <see cref="T:Autofac.Core.IModule"/>
             via <see cref="T:Autofac.ContainerBuilder"/>.</remarks>
             <example>
             Defining a module:
             <code>
             public class DataAccessModule : Module
             {
                 public string ConnectionString { get; set; }
            
                 public override void Load(ContainerBuilder moduleBuilder)
                 {
                     moduleBuilder.RegisterGeneric(typeof(MyRepository&lt;&gt;))
                         .As(typeof(IRepository&lt;&gt;))
                         .InstancePerLifetimeScope();
            
                     moduleBuilder.Register(c =&gt; new MyDbConnection(ConnectionString))
                         .As&lt;IDbConnection&gt;()
                         .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                 }
             }
             </code>
             Using the module...
             <code>
             var builder = new ContainerBuilder();
             builder.RegisterModule(new DataAccessModule { ConnectionString = "..." });
             var container = builder.Build();
             var customers = container.Resolve&lt;IRepository&lt;Customer&gt;&gt;();
             </code>
             </example>
        </member>
        <member name="M:Autofac.Module.Configure(Autofac.Core.Registration.IComponentRegistryBuilder)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Module.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">The builder through which components can be
            registered.</param>
        </member>
        <member name="M:Autofac.Module.AttachToComponentRegistration(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
            Override to attach module-specific functionality to a
            component registration.
            </summary>
            <remarks>This method will be called for all existing <i>and future</i> component
            registrations - ordering is not important.</remarks>
            <param name="componentRegistry">The component registry.</param>
            <param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="M:Autofac.Module.AttachToRegistrationSource(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IRegistrationSource)">
            <summary>
            Override to perform module-specific processing on a registration source.
            </summary>
            <remarks>This method will be called for all existing <i>and future</i> sources
            - ordering is not important.</remarks>
            <param name="componentRegistry">The component registry into which the source was added.</param>
            <param name="registrationSource">The registration source.</param>
        </member>
        <member name="P:Autofac.Module.ThisAssembly">
            <summary>
            Gets the assembly in which the concrete module type is located. To avoid bugs whereby deriving from a module will
            change the target assembly, this property can only be used by modules that inherit directly from
            <see cref="T:Autofac.Module"/>.
            </summary>
        </member>
        <member name="T:Autofac.ModuleRegistrationExtensions">
            <summary>
            Extension methods for registering <see cref="T:Autofac.Core.IModule"/> instances with a container.
            </summary>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterAssemblyModules(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Registers modules found in an assembly.
            </summary>
            <param name="builder">The builder to register the modules with.</param>
            <param name="assemblies">The assemblies from which to register modules.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterAssemblyModules(Autofac.Core.Registration.IModuleRegistrar,System.Reflection.Assembly[])">
            <summary>
            Registers modules found in an assembly.
            </summary>
            <param name="registrar">The module registrar that will make the registrations into the container.</param>
            <param name="assemblies">The assemblies from which to register modules.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterAssemblyModules``1(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Registers modules found in an assembly.
            </summary>
            <param name="builder">The builder to register the modules with.</param>
            <param name="assemblies">The assemblies from which to register modules.</param>
            <typeparam name="TModule">The type of the module to add.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterAssemblyModules``1(Autofac.Core.Registration.IModuleRegistrar,System.Reflection.Assembly[])">
            <summary>
            Registers modules found in an assembly.
            </summary>
            <param name="registrar">The module registrar that will make the registrations into the container.</param>
            <param name="assemblies">The assemblies from which to register modules.</param>
            <typeparam name="TModule">The type of the module to add.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterAssemblyModules(Autofac.ContainerBuilder,System.Type,System.Reflection.Assembly[])">
            <summary>
            Registers modules found in an assembly.
            </summary>
            <param name="builder">The builder to register the modules with.</param>
            <param name="moduleType">The <see cref="T:System.Type"/> of the module to add.</param>
            <param name="assemblies">The assemblies from which to register modules.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="moduleType"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterAssemblyModules(Autofac.Core.Registration.IModuleRegistrar,System.Type,System.Reflection.Assembly[])">
            <summary>
            Registers modules found in an assembly.
            </summary>
            <param name="registrar">The module registrar that will make the registrations into the container.</param>
            <param name="moduleType">The <see cref="T:System.Type"/> of the module to add.</param>
            <param name="assemblies">The assemblies from which to register modules.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> or <paramref name="moduleType"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterModule``1(Autofac.ContainerBuilder)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="builder">The builder to register the module with.</param>
            <typeparam name="TModule">The module to add.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterModule``1(Autofac.Core.Registration.IModuleRegistrar)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="registrar">The module registrar that will make the registration into the container.</param>
            <typeparam name="TModule">The module to add.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.RegisterModule(Autofac.ContainerBuilder,Autofac.Core.IModule)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="builder">The builder to register the module with.</param>
            <param name="module">The module to add.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> or <paramref name="module"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.OnlyIf(Autofac.Core.Registration.IModuleRegistrar,System.Predicate{Autofac.Core.Registration.IComponentRegistryBuilder})">
            <summary>
            Attaches a predicate to evaluate prior to executing the registration of the module.
            The predicate will run at registration time, not runtime, to determine
            whether the module registration should execute.
            </summary>
            <param name="registrar">The module registrar that will make the registrations into the container.</param>
            <param name="predicate">The predicate to run to determine if the registration should be made.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="M:Autofac.ModuleRegistrationExtensions.IfNotRegistered(Autofac.Core.Registration.IModuleRegistrar,System.Type)">
            <summary>
            Attaches a predicate such that a module registration will only be made if
            a specific service type is not already registered.
            The predicate will run at registration time, not runtime, to determine
            whether the registration should execute.
            </summary>
            <param name="registrar">The module registrar that will make the registrations into the container.</param>
            <param name="serviceType">
            The service type to check for to determine if the registration should be made.
            Note this is the *service type* - the <c>As&lt;T&gt;</c> part.
            </param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.IModuleRegistrar"/> to allow
            additional chained module registrations.
            </returns>
        </member>
        <member name="T:Autofac.ModuleResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ModuleResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ModuleResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ModuleResources.ThisAssemblyUnavailable">
            <summary>
              Looks up a localized string similar to Module.ThisAssembly is only available in modules that inherit directly from Module. It can&apos;t be used in &apos;{0}&apos; which inherits from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.NamedParameter">
            <summary>
            A parameter identified by name. When applied to a reflection-based
            component, <see cref="P:Autofac.NamedParameter.Name"/> will be matched against
            the name of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)"/>.
            </summary>
            <example>
            <para>
            Component with parameter...
            </para>
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            <para>
            Providing the parameter...
            </para>
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new NamedParameter("amount", 123));
            </code>
            </example>
        </member>
        <member name="P:Autofac.NamedParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="M:Autofac.NamedParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.NamedParameter"/> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="T:Autofac.ParameterExtensions">
            <summary>
            Extension methods that simplify extraction of parameter values from
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is <see cref="T:Autofac.Core.Parameter"/>.
            Each method returns the first matching parameter value, or throws an exception if
            none is provided.
            </summary>
            <example>
            At configuration time, delegate registrations can retrieve parameter values using
            the methods <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)"/>, <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)"/> and <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})"/>:
            <code>
            builder.Register((c, p) => new FtpClient(p.Named&lt;string&gt;("server")));
            </code>
            These parameters can be provided at resolution time:
            <code>
            container.Resolve&lt;FtpClient&gt;(new NamedParameter("server", "ftp.example.com"));
            </code>
            Alternatively, the parameters can be provided via a <i>Generated Factory</i> - http://code.google.com/p/autofac/wiki/DelegateFactories.
            </example>
        </member>
        <member name="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)">
            <summary>
            Retrieve a named parameter value from a <see cref="T:Autofac.NamedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="name">The name of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
            <seealso cref="T:Autofac.NamedParameter"/>
        </member>
        <member name="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)">
            <summary>
            Retrieve a positional parameter value from a <see cref="T:Autofac.PositionalParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="position">The zero-based position of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
            <remarks>The position value is the one associated with the parameter when
            it was constructed, <b>not</b> its index into the <paramref name="parameters"/>
            sequence.</remarks>
            <seealso cref="T:Autofac.PositionalParameter"/>
        </member>
        <member name="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a typed parameter value from a <see cref="T:Autofac.TypedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <returns>The value of the selected parameter.</returns>
            <seealso cref="T:Autofac.TypedParameter"/>
        </member>
        <member name="T:Autofac.PipelineBuilderExtensions">
            <summary>
            Extension methods for adding pipeline middleware.
            </summary>
        </member>
        <member name="M:Autofac.PipelineBuilderExtensions.Use(Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Core.Resolving.Pipeline.PipelinePhase,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Use a middleware callback in a resolve pipeline.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Autofac.PipelineBuilderExtensions.Use(Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,Autofac.Core.Resolving.Pipeline.PipelinePhase,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Use a middleware callback in a resolve pipeline.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="insertionMode">The insertion mode specifying whether to add at the start or end of the phase.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Autofac.PipelineBuilderExtensions.Use(Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,System.String,Autofac.Core.Resolving.Pipeline.PipelinePhase,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Use a middleware callback in a resolve pipeline.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="descriptor">A description for the middleware; this will show up in any resolve tracing.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="M:Autofac.PipelineBuilderExtensions.Use(Autofac.Core.Resolving.Pipeline.IResolvePipelineBuilder,System.String,Autofac.Core.Resolving.Pipeline.PipelinePhase,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Use a middleware callback in a resolve pipeline.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="descriptor">A description for the middleware; this will show up in any resolve tracing.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="insertionMode">The insertion mode specifying whether to add at the start or end of the phase.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
            <returns>The same builder instance.</returns>
        </member>
        <member name="T:Autofac.PositionalParameter">
            <summary>
            A parameter that is identified according to an integer representing its
            position in an argument list. When applied to a reflection-based
            component, <see cref="P:Autofac.PositionalParameter.Position"/> will be matched against
            the indices of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)"/>.
            </summary>
            <example>
            <para>
            Component with parameter...
            </para>
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            <para>
            Providing the parameter...
            </para>
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new PositionalParameter(0, 123));
            </code>
            </example>
        </member>
        <member name="P:Autofac.PositionalParameter.Position">
            <summary>
            Gets the zero-based position of the parameter.
            </summary>
        </member>
        <member name="M:Autofac.PositionalParameter.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.PositionalParameter"/> class.
            </summary>
            <param name="position">The zero-based position of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="T:Autofac.PropertyWiringOptions">
            <summary>
            Options that can be applied when autowiring properties on a component. (Multiple options can
            be specified using bitwise 'or' - e.g. AllowCircularDependencies | PreserveSetValues.
            </summary>
        </member>
        <member name="F:Autofac.PropertyWiringOptions.None">
            <summary>
            Default behavior. Circular dependencies are not allowed; existing non-default
            property values are overwritten.
            </summary>
        </member>
        <member name="F:Autofac.PropertyWiringOptions.AllowCircularDependencies">
            <summary>
            Allows property-property and property-constructor circular dependency wiring.
            This flag moves property wiring from the Activating to the Activated event.
            </summary>
        </member>
        <member name="F:Autofac.PropertyWiringOptions.PreserveSetValues">
            <summary>
            If specified, properties that already have a non-default value will be left
            unchanged in the wiring operation.
            </summary>
        </member>
        <member name="T:Autofac.RegistrationExtensions">
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>, given the context and parameters.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>, given the context.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{``0,``1})">
            <summary>
            Adapt all components implementing service <typeparamref name="TFrom"/>
            to provide <typeparamref name="TTo"/> using the provided <paramref name="adapter"/>
            function.
            </summary>
            <typeparam name="TFrom">Service type to adapt from.</typeparam>
            <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom"/>.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="adapter">Function adapting <typeparamref name="TFrom"/> to
            service <typeparamref name="TTo"/>.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register all types in an assembly.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="assemblies">The assemblies from which to register types.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,Autofac.Core.Service})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Type})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type from a scanned assembly provides its own concrete type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsSelf``2(Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle})">
            <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type from a scanned assembly is registered as providing all of its
            implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``2(Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle})">
            <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.PreserveExistingDefaults``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1})">
            <summary>
            Specifies that the components being registered should only be made the default for services
            that have not already been registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterTypes(Autofac.ContainerBuilder,System.Type[])">
            <summary>
            Register the types in a list.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="types">The types to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Specifies that a type from a scanned assembly is registered if it implements an interface
            that closes the provided open generic interface type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The open generic interface or base class type for which implementations will be found.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,System.Object)">
            <summary>
            Specifies that a type from a scanned assembly is registered if it implements an interface
            that closes the provided open generic interface type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The open generic interface or base class type for which implementations will be found.</param>
            <param name="serviceKey">Key of the service.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Specifies that a type from a scanned assembly is registered if it implements an interface
            that closes the provided open generic interface type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The open generic interface or base class type for which implementations will be found.</param>
            <param name="serviceKeyMapping">Function mapping types to service keys.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AssignableTo``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="type">The type or interface which all classes must be assignable from.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AssignableTo``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">The type or interface which all classes must be assignable from.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Except``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned types to exclude the provided type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">The concrete type to exclude.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Except``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Action{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
            <summary>
            Filters the scanned types to exclude the provided type, providing specific configuration for
            the excluded type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <param name="customizedRegistration">Registration for the excepted type.</param>
            <typeparam name="T">The concrete type to exclude.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.InNamespaceOf``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned types to include only those in the namespace of the provided type
            or one of its sub-namespaces.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">A type in the target namespace.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.InNamespace``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
            <summary>
            Filters the scanned types to include only those in the provided namespace
            or one of its sub-namespaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="ns">The namespace from which types will be selected.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Where``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Boolean})">
            <summary>
            Specifies a subset of types to register from a scanned assembly.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="predicate">Predicate that returns true for types to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterComposite``2(Autofac.ContainerBuilder)">
            <summary>
            <para>
            Register a composite type that should always provide the instance of <typeparamref name="TService"/> when it is resolved,
            regardless of what other registrations for <typeparamref name="TService"/> are available.
            </para>
            <para>
            Composite registrations are not included when resolving a collection of <typeparamref name="TService"/>.
            </para>
            </summary>
            <typeparam name="TComposite">
            Service type of the composite. Must accept a parameter
            of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.IList`1"/> or <typeparamref name="TService[][]"/>,
            which will be set to collection of registered implementations.
            </typeparam>
            <typeparam name="TService">Service type to provide a composite for.</typeparam>
            <param name="builder">Container builder.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterComposite(Autofac.ContainerBuilder,System.Type,System.Type)">
            <summary>
            <para>
            Register a composite type that should always provide the instance of <paramref name="serviceType"/> when it is resolved,
            regardless of what other registrations for <paramref name="serviceType"/> are available.
            </para>
            <para>
            Composite registrations are not included when resolving a collection of <paramref name="serviceType"/>.
            </para>
            </summary>
            <param name="builder">Container builder.</param>
            <param name="compositeType">
            Service type of the composite. Must accept a parameter
            of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.IList`1"/> or an array of <paramref name="serviceType"/>,
            which will be set to the collection of registered implementations.
            </param>
            <param name="serviceType">Service type to provide a composite for.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterComposite``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>
            <para>
            Register a delegate that should always provide the composite instance of a service type when it is resolved,
            regardless of what other registrations for <typeparamref name="TService"/> are available.
            </para>
            <para>
             Composite registrations are not included when resolving a collection of <typeparamref name="TService"/>.
            </para>
            </summary>
            <param name="builder">Container builder.</param>
            <param name="compositeDelegate">
            Callback to create a new instance of the composite, which takes the set of concrete implementations.
            </param>
            <typeparam name="TService">Service type to provide a composite for.</typeparam>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterComposite``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>
            <para>
            Register a delegate that should always provide the composite instance of a service type when it is resolved,
            regardless of what other registrations for <typeparamref name="TService"/> are available.
            </para>
            <para>
            Composite registrations are not included when resolving a collection of <typeparamref name="TService"/>.
            </para>
            </summary>
            <param name="builder">Container builder.</param>
            <param name="compositeDelegate">
            Callback to create a new instance of the composite, which takes the set of concrete implementations.
            </param>
            <typeparam name="TService">Service type to provide a composite for.</typeparam>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGenericComposite(Autofac.ContainerBuilder,System.Type,System.Type)">
            <summary>
            <para>
            Register an un-parameterised generic type, e.g. Composite&lt;&gt; to function as a composite
            for an open generic service, e.g. IRepository&lt;&gt;. Composites will be made as they are requested,
            e.g. with Resolve&lt;IRepository&lt;int&gt;&gt;().
            </para>
            <para>
             Composite registrations are not included when resolving a collection of <paramref name="serviceType"/>.
            </para>
            </summary>
            <param name="builder">Container builder.</param>
            <param name="compositeType">
            Service type of the composite. Must accept a parameter
            of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.IList`1"/> or an array of <paramref name="serviceType"/>,
            which will be set to the collection of registered implementations.
            </param>
            <param name="serviceType">Service type to provide a composite for.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.OnlyIf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Predicate{Autofac.Core.Registration.IComponentRegistryBuilder})">
            <summary>
            Attaches a predicate to evaluate prior to executing the registration.
            The predicate will run at registration time, not runtime, to determine
            whether the registration should execute.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">The registration to configure.</param>
            <param name="predicate">The predicate to run to determine if the registration should be made.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> or <paramref name="predicate" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if <paramref name="registration" /> has no reference to the original callback
            with which it was associated (e.g., it wasn't made with a standard registration method
            as part of a <see cref="T:Autofac.ContainerBuilder"/>).
            </exception>
        </member>
        <member name="M:Autofac.RegistrationExtensions.IfNotRegistered``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
            <summary>
            Attaches a predicate such that a registration will only be made if
            a specific service type is not already registered.
            The predicate will run at registration time, not runtime, to determine
            whether the registration should execute.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">The registration to configure.</param>
            <param name="serviceType">
            The service type to check for to determine if the registration should be made.
            Note this is the *service type* - the <c>As&lt;T&gt;</c> part.
            </param>
            <returns>A registration builder allowing further configuration of the component.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> or <paramref name="serviceType" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if <paramref name="registration" /> has no reference to the original callback
            with which it was associated (e.g., it wasn't made with a standard registration method
            as part of a <see cref="T:Autofac.ContainerBuilder"/>).
            </exception>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterComponent(Autofac.ContainerBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
            Add a component to the container.
            </summary>
            <param name="builder">The builder to register the component with.</param>
            <param name="registration">The component to add.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterInstance``1(Autofac.ContainerBuilder,``0)">
            <summary>
            Register an instance as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="instance">The instance to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
            <remarks>If no services are explicitly specified for the instance, the
            static type <typeparamref name="T"/> will be used as the default service (i.e. *not* <c>instance.GetType()</c>).</remarks>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterType``1(Autofac.ContainerBuilder)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <typeparam name="TImplementer">The type of the component implementation.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterType(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <param name="implementationType">The type of the component implementation.</param>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.PreserveExistingDefaults``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Specifies that the component being registered should only be made the default for services
            that have not already been registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithMetadata``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set metadata on.</param>
            <param name="metadataMapping">A function mapping the type to a list of metadata items.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithMetadataFrom``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Use the properties of an attribute (or interface implemented by an attribute) on the scanned type
            to provide metadata values.
            </summary>
            <remarks>Inherited attributes are supported; however, there must be at most one matching attribute
            in the inheritance chain.</remarks>
            <typeparam name="TAttribute">The attribute applied to the scanned type.</typeparam>
            <param name="registration">Registration to set metadata on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithMetadata``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Func{System.Type,System.Object})">
            <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="metadataKey">Key of the metadata item.</param>
            <param name="metadataValueMapping">A function retrieving the value of the item from the component type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorFinder)">
            <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorFinder">Policy to be used when searching for constructors.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Reflection.ConstructorInfo[]})">
            <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="finder">A function that returns the constructors to select from.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.PropertiesAutowired``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.PropertyWiringOptions)">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
            <param name="registration">Registration to auto-wire properties.</param>
            <param name="wiringFlags">Set wiring options such as circular dependency wiring support.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.PropertiesAutowired``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Reflection.PropertyInfo,System.Object,System.Boolean})">
            <summary>
            Set the policy used to find candidate properties on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="propertySelector">Policy to be used when searching for properties to inject.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="signature">Constructor signature to match.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorSelector)">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorSelector">Policy to be used when selecting a constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorSelector">Expression demonstrating how the constructor is called.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameterName">Name of a constructor parameter on the target type.</param>
            <param name="parameterValue">Value to supply to the parameter.</param>0
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameter">The parameter to supply to the constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameterSelector">A predicate selecting the parameter to set.</param>
            <param name="valueProvider">The provider that will generate the parameter value.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithParameters``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Configure explicit values for constructor parameters.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameters">The parameters to supply to the constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithProperty``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
            <summary>
            Configure an explicit value for a property.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set property on.</param>
            <param name="propertyName">Name of a property on the target type.</param>
            <param name="propertyValue">Value to supply to the property.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithProperty``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
            <summary>
            Configure an explicit value for a property.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="property">The property to supply.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithProperty``4(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``0,``3}},``3)">
            <summary>
            Configure an explicit value for a property.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TProperty">Type of the property being assigned.</typeparam>
            <param name="registration">Registration to set property on.</param>
            <param name="propertyExpression">Expression of a property on the target type.</param>
            <param name="propertyValue">Value to supply to the property.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithProperties``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Configure explicit values for properties.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="properties">The properties to supply.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Targeting``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.IComponentRegistration)">
            <summary>
            Sets the target of the registration (used for metadata generation).
            </summary>
            <typeparam name="TLimit">The type of the limit.</typeparam>
            <typeparam name="TActivatorData">The type of the activator data.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set target for.</param>
            <param name="target">The target.</param>
            <returns>
            Registration builder allowing the registration to be configured.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> or <paramref name="target" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AutoActivate``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Wraps a registration in an implicit <see cref="T:Autofac.IStartable"/> and automatically
            activates the registration after the container is built.
            </summary>
            <param name="registration">Registration to set release action for.</param>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
            <remarks>
            <para>
            While you can implement an <see cref="T:Autofac.IStartable"/> to perform some logic at
            container build time, sometimes you need to just activate a registered component and
            that's it. This extension allows you to automatically activate a registration on
            container build. No additional logic is executed and the resolved instance is not held
            so container disposal will end up disposing of the instance.
            </para>
            <para>
            Depending on how you register the lifetime of the component, you may get an exception
            when you build the container - components that are scoped to specific lifetimes (like
            ASP.NET components scoped to a request lifetime) will fail to resolve because the
            appropriate lifetime is not available.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.RegistrationExtensions.InstancePerRequest``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Object[])">
            <summary>
            Share one instance of the component within the context of a single
            web/HTTP/API request. Only available for integration that supports
            per-request dependencies (e.g., MVC, Web API, web forms, etc.).
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">The registration to configure.</param>
            <param name="lifetimeScopeTags">Additional tags applied for matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGenericDecorator(Autofac.ContainerBuilder,System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Decorate all components implementing open generic service <paramref name="decoratedServiceType"/>.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="decoratedServiceType">Service type being decorated. Must be an open generic type.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
            <param name="decoratorType">The type of the decorator. Must be an open generic type, and accept a parameter
            of type <paramref name="decoratedServiceType"/>, which will be set to the instance being decorated.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>, given the context and parameters.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>, given the context.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{``0,``0},System.Object,System.Object)">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            The <paramref name="fromKey"/> and <paramref name="toKey"/> parameters must be different values.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>.</param>
            <param name="fromKey">Service key or name associated with the components being decorated.</param>
            <param name="toKey">Service key or name given to the decorated components.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``2(Autofac.ContainerBuilder,System.Func{Autofac.Features.Decorators.IDecoratorContext,System.Boolean})">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            with decorator service <typeparamref name="TDecorator"/>.
            </summary>
            <typeparam name="TDecorator">Service type of the decorator. Must accept a parameter
            of type <typeparamref name="TService"/>, which will be set to the instance being decorated.</typeparam>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="condition">A function that when provided with an <see cref="T:Autofac.Features.Decorators.IDecoratorContext"/>
            instance determines if the decorator should be applied.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDecorator(Autofac.ContainerBuilder,System.Type,System.Type,System.Func{Autofac.Features.Decorators.IDecoratorContext,System.Boolean})">
            <summary>
            Decorate all components implementing service <paramref name="serviceType"/>
            with decorator service <paramref name="decoratorType"/>.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="decoratorType">Service type of the decorator. Must accept a parameter
            of type <paramref name="serviceType"/>, which will be set to the instance being decorated.</param>
            <param name="serviceType">Service type being decorated.</param>
            <param name="condition">A function that when provided with an <see cref="T:Autofac.Features.Decorators.IDecoratorContext"/>
            instance determines if the decorator should be applied.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``0},System.Func{Autofac.Features.Decorators.IDecoratorContext,System.Boolean})">
            <summary>
            Decorate all components implementing service <typeparamref name="TService"/>
            using the provided <paramref name="decorator"/> function.
            </summary>
            <typeparam name="TService">Service type being decorated.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService"/>, given the context, parameters and service to decorate.</param>
            <param name="condition">A function that when provided with an <see cref="T:Autofac.Features.Decorators.IDecoratorContext"/>
            instance determines if the decorator should be applied.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGenericDecorator(Autofac.ContainerBuilder,System.Type,System.Type,System.Func{Autofac.Features.Decorators.IDecoratorContext,System.Boolean})">
            <summary>
            Decorate all components implementing open generic service <paramref name="serviceType"/>.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="decoratorType">The type of the decorator. Must be an open generic type, and accept a parameter
            of type <paramref name="serviceType"/>, which will be set to the instance being decorated.</param>
            <param name="serviceType">Service type being decorated. Must be an open generic type.</param>
            <param name="condition">A function that when provided with an <see cref="T:Autofac.Features.Decorators.IDecoratorContext"/>
            instance determines if the decorator should be applied.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.OnRegistered``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{Autofac.Core.ComponentRegisteredEventArgs})">
            <summary>
            Provide a handler to be called when the component is registered.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration add handler to.</param>
            <param name="handler">The handler.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.OnRegistered``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1},System.Action{Autofac.Core.ComponentRegisteredEventArgs})">
            <summary>
            Provide a handler to be called when the component is registred.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration add handler to.</param>
            <param name="handler">The handler.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.OnRelease``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{``0})">
            <summary>
            Run a supplied action instead of disposing instances when they're no
            longer required.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set release action for.</param>
            <param name="releaseAction">An action to perform instead of disposing the instance.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.OnRelease``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{``0,System.Threading.Tasks.ValueTask})">
            <summary>
            Run a supplied async action instead of disposing instances when they're no
            longer required.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set release action for.</param>
            <param name="releaseAction">
            An action to perform instead of disposing the instance.
            The release/disposal process will not continue until the returned task completes.
            </param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="builder">Container builder.</param>
            <param name="implementer">The open generic implementation type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Type[],System.Object})">
            <summary>
            Register a delegate that can provide instances of an open generic registration.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="factory">Delegate responsible for generating an instance of a closed generic based on the open generic type being registered. It will be called with the current <see cref="T:Autofac.IComponentContext"/> and the array of generic type arguments expected to be in the closed generic.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Type[],System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Register a delegate that can provide instances of an open generic registration.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="factory">Delegate responsible for generating an instance of a closed generic based on the open generic type being registered. It will be called with the current <see cref="T:Autofac.IComponentContext"/>, the array of generic type arguments expected to be in the closed generic, and any parameters passed to the resolve operation.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Keyed``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.Object})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
            <param name="registration">Registration to set service mapping on.</param>
            <typeparam name="TService">Service type provided by the component.</typeparam>
            <param name="serviceKeyMapping">Function mapping types to service keys.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Keyed``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Object},System.Type)">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceType">Service type provided by the component.</param>
            <param name="serviceKeyMapping">Function mapping types to service keys.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Named``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.String})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
            <param name="registration">Registration to set service mapping on.</param>
            <typeparam name="TService">Service type provided by the component.</typeparam>
            <param name="serviceNameMapping">Function mapping types to service names.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Named``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.String},System.Type)">
            <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceType">Service type provided by the component.</param>
            <param name="serviceNameMapping">Function mapping types to service names.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyOpenGenericTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
            <summary>
            Register all open generic types in an assembly.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="assemblies">The assemblies from which to register open generic types.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}})">
            <summary>
            Specifies how an open generic type from a scanned assembly is mapped to services.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,Autofac.Core.Service})">
            <summary>
            Specifies how an open generic type from a scanned assembly is mapped to a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,System.Type})">
            <summary>
            Specifies how an open generic type from a scanned assembly is mapped to a type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.As``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Specifies how a type from a scanned assembly is mapped to types.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="serviceMapping">Function mapping types to services.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that an open generic type from a scanned assembly provides its own open generic type as a service.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Except(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.OpenGenericScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Type)">
            <summary>
            Filters the scanned open generic types to exclude the provided type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <param name="openGenericType">The open generic type to exclude.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Except(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.OpenGenericScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Type,System.Action{Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle}})">
            <summary>
            Filters the scanned open generic types to exclude the provided type, providing specific configuration for
            the excluded type.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <param name="openGenericType">The concrete type to exclude.</param>
            <param name="customizedRegistration">Registration for the excepted type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Where``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,System.Boolean})">
            <summary>
            Specifies a subset of open generic types to register from a scanned assembly.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="predicate">Predicate that returns true for types to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AssignableTo``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Type)">
            <summary>
            Filters the scanned types to include only those assignable to the provided.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The type or interface which all classes must be assignable from.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AssignableTo``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Type,System.Object)">
            <summary>
            Filters the scanned types to include only those assignable to the provided.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The type or interface which all classes must be assignable from.</param>
            <param name="serviceKey">Key of the service.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AssignableTo``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Filters the scanned types to include only those assignable to the provided.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <param name="openGenericServiceType">The type or interface which all classes must be assignable from.</param>
            <param name="serviceKeyMapping">Function mapping types to service keys.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.InNamespaceOf``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.OpenGenericScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Filters the scanned open generic types to include only those in the namespace of the provided type
            or one of its sub-namespaces.
            </summary>
            <param name="registration">Registration to filter types from.</param>
            <typeparam name="T">A type in the target namespace.</typeparam>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.InNamespace``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.String)">
            <summary>
            Filters the scanned types to include only those in the provided namespace
            or one of its sub-namespaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <param name="ns">The namespace from which types will be selected.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Specifies that an open generic type from a scanned assembly is registered as providing all of its
            implemented interfaces.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <param name="registration">Registration to set service mapping on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithMetadata``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.OpenGenericScanningActivatorData,``1},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to set metadata on.</param>
            <param name="metadataMapping">A function mapping the type to a list of metadata items.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithMetadataFrom``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.OpenGenericScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
            <summary>
            Use the properties of an attribute (or interface implemented by an attribute) on the scanned type
            to provide metadata values.
            </summary>
            <remarks>Inherited attributes are supported; however, there must be at most one matching attribute
            in the inheritance chain.</remarks>
            <typeparam name="TAttribute">The attribute applied to the scanned type.</typeparam>
            <param name="registration">Registration to set metadata on.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``2(Autofac.ContainerBuilder,System.Func{``0,``1})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``3(Autofac.ContainerBuilder,System.Func{``0,``1,``2})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``3(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``4(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``4(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``5(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``5(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``6(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``6(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4,``5})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``7(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``7(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``8(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``8(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``9(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency8">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``9(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency8">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``10(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency8">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency9">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``10(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency8">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency9">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``11(Autofac.ContainerBuilder,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency8">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency9">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency10">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.Register``11(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="TDependency1">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency2">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency3">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency4">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency5">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency6">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency7">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency8">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency9">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TDependency10">The type of a dependency to inject into the delegate.</typeparam>
            <typeparam name="TComponent">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="T:Autofac.RegistrationExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.CompositesCannotProvideMultipleServices">
            <summary>
              Looks up a localized string similar to A composite registration ({0}) is registered against multiple services. Composites can only be registered as providing a single service..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.DecoratorRequiresInstanceParameter">
            <summary>
              Looks up a localized string similar to A decorator for &apos;{0}&apos; was not provided with an instance parameter..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.ExpressionDoesNotReferToProperty">
            <summary>
              Looks up a localized string similar to Expression does not refer to a property..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.InstanceRegistrationsAreSingleInstanceOnly">
            <summary>
              Looks up a localized string similar to The instance registration &apos;{0}&apos; can support SingleInstance() sharing only..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.MetadataAttributeNotFound">
            <summary>
              Looks up a localized string similar to A metadata attribute of type &apos;{0}&apos; was not found on &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.MultipleMetadataAttributesSameType">
            <summary>
              Looks up a localized string similar to More than one metadata attribute of type &apos;{0}&apos; was found on &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.NoMatchingConstructorExists">
            <summary>
              Looks up a localized string similar to No matching constructor exists on type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.RegistrationExtensionsResources.OnlyIfRequiresCallbackContainer">
            <summary>
              Looks up a localized string similar to You can only attach a registration predicate to a registration that has a callback container attached (e.g., one that was made with a standard ContainerBuilder extension method)..
            </summary>
        </member>
        <member name="T:Autofac.ResolutionExtensions">
            <summary>
            Adds syntactic convenience methods to the <see cref="T:Autofac.IComponentContext"/> interface.
            </summary>
        </member>
        <member name="F:Autofac.ResolutionExtensions.PropertyInjectedInstanceTypeNamedParameter">
            <summary>
            The <see cref="T:Autofac.NamedParameter"/> name, provided when properties are injected onto an existing instance.
            </summary>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved in the context.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved in the context.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="parameters">Optional parameters to use during the property injection.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0,Autofac.Core.Parameter[])">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved in the context.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="parameters">Optional parameters to use during the property injection.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0,Autofac.Core.IPropertySelector)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be resolved by service and that satisfy the
            constraints imposed by <paramref name="propertySelector"/>.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="propertySelector">Selector to determine with properties should be injected.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0,Autofac.Core.IPropertySelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Set any properties on <paramref name="instance"/> that can be resolved by service and that satisfy the
            constraints imposed by <paramref name="propertySelector"/>.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="propertySelector">Selector to determine with properties should be injected.</param>
            <param name="parameters">Optional parameters to use during the property injection.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0,Autofac.Core.IPropertySelector,Autofac.Core.Parameter[])">
            <summary>
            Set any properties on <paramref name="instance"/> that can be resolved by service and that satisfy the
            constraints imposed by <paramref name="propertySelector"/>.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="propertySelector">Selector to determine with properties should be injected.</param>
            <param name="parameters">Optional parameters to use during the property injection.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectUnsetProperties``1(Autofac.IComponentContext,``0)">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectUnsetProperties``1(Autofac.IComponentContext,``0,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="parameters">Optional parameters to use during the property injection.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectUnsetProperties``1(Autofac.IComponentContext,``0,Autofac.Core.Parameter[])">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <param name="parameters">Optional parameters to use during the property injection.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegistered``1(Autofac.IComponentContext)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegistered(Autofac.IComponentContext,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegisteredService(Autofac.IComponentContext,Autofac.Core.Service)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithKey``1(Autofac.IComponentContext,System.Object)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to test for the registration of.</param>
            <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithKey(Autofac.IComponentContext,System.Object,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to test for the registration of.</param>
            <param name="serviceType">Type type of the service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithName``1(Autofac.IComponentContext,System.String)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to test for the registration of.</param>
            <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithName(Autofac.IComponentContext,System.String,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to test for the registration of.</param>
            <param name="serviceType">Type type of the service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <returns>The component instance that provides the service.</returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
            <exception cref="T:Autofac.Core.DependencyResolutionException" />
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveKeyed(Autofac.IComponentContext,System.Object,System.Type)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveKeyed(Autofac.IComponentContext,System.Object,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveKeyed(Autofac.IComponentContext,System.Object,System.Type,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">Key of the service.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceKey">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceKey">The key of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolve``1(Autofac.IComponentContext,``0@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The resulting component instance providing the service, or default(T).</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.IComponentContext,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service type to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolveKeyed``1(Autofac.IComponentContext,System.Object,``0@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolveKeyed(Autofac.IComponentContext,System.Object,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The key of the service to resolve.</param>
            <param name="serviceType">The type of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolveNamed``1(Autofac.IComponentContext,System.String,``0@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolveNamed(Autofac.IComponentContext,System.String,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to resolve.</param>
            <param name="serviceType">The type of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="context" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.ResolutionExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ResolutionExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ResolutionExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ResolutionExtensionsResources.CouldNotCastInstance">
            <summary>
              Looks up a localized string similar to Resolved instance of type &apos;{0}&apos; could not be cast to the requested service type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.ResolutionValueExtensions">
            <summary>
            Adds syntactic convenience methods to the <see cref="T:Autofac.IComponentContext"/> interface,
            specifically to support value types in the nullable reference scenario.
            </summary>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptional``1(Autofac.IComponentContext)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptional``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptional``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceKey">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceKey">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceKey">The key of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionValueExtensions.TryResolve``1(Autofac.IComponentContext,System.Nullable{``0}@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <typeparam name="T">The service type to resolve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The resulting component instance providing the service, or default(T).</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="T:Autofac.ResolveRequest">
            <summary>
            The details of an individual request to resolve a service.
            </summary>
        </member>
        <member name="F:Autofac.ResolveRequest.NoParameters">
            <summary>
            Shared constant value defining an empty set of parameters.
            </summary>
        </member>
        <member name="M:Autofac.ResolveRequest.#ctor(Autofac.Core.Service,Autofac.Core.ServiceRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.Core.IComponentRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ResolveRequest"/> class.
            </summary>
            <param name="service">The service being resolved.</param>
            <param name="serviceRegistration">The component registration for the service.</param>
            <param name="parameters">The parameters used when resolving the service.</param>
            <param name="decoratorTarget">The target component to be decorated.</param>
        </member>
        <member name="P:Autofac.ResolveRequest.Service">
            <summary>
            Gets the service being resolved.
            </summary>
        </member>
        <member name="P:Autofac.ResolveRequest.Registration">
            <summary>
            Gets the component registration for the service being resolved. This may be null if a service is being supplied without registrations.
            </summary>
        </member>
        <member name="P:Autofac.ResolveRequest.ResolvePipeline">
            <summary>
            Gets the resolve pipeline for the request.
            </summary>
        </member>
        <member name="P:Autofac.ResolveRequest.Parameters">
            <summary>
            Gets the parameters used when resolving the service.
            </summary>
        </member>
        <member name="P:Autofac.ResolveRequest.DecoratorTarget">
            <summary>
            Gets the component registration for the decorator target if configured.
            </summary>
        </member>
        <member name="T:Autofac.ScanningFilterExtensions">
            <summary>
            Convenience filters for use with assembly scanning registrations.
            </summary>
        </member>
        <member name="M:Autofac.ScanningFilterExtensions.PublicOnly``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Filters scanned assembly types to be only the public types.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
            <param name="registration">Registration to filter types from.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="T:Autofac.ServiceMiddlewareRegistrationExtensions">
            <summary>
            Extension methods for registering service middleware.
            </summary>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddleware(Autofac.ContainerBuilder,Autofac.Core.Service,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Register a resolve middleware for a particular service.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="service">The service to register middleware for.</param>
            <param name="middleware">The middleware to register.</param>
            <param name="insertionMode">The insertion mode of the middleware (start or end of phase).</param>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddleware``1(Autofac.ContainerBuilder,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Register a resolve middleware for services providing a particular type.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="builder">The container builder.</param>
            <param name="middleware">The middleware to register.</param>
            <param name="insertionMode">The insertion mode of the middleware (start or end of phase).</param>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddleware``1(Autofac.ContainerBuilder,Autofac.Core.Resolving.Pipeline.PipelinePhase,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Register a resolve middleware for services providing a particular type.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="builder">The container builder.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddleware``1(Autofac.ContainerBuilder,System.String,Autofac.Core.Resolving.Pipeline.PipelinePhase,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Register a resolve middleware for services providing a particular type.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="builder">The container builder.</param>
            <param name="descriptor">A description for the middleware; this will show up in any resolve tracing.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddleware``1(Autofac.ContainerBuilder,System.String,Autofac.Core.Resolving.Pipeline.PipelinePhase,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext,System.Action{Autofac.Core.Resolving.Pipeline.ResolveRequestContext}})">
            <summary>
            Register a resolve middleware for services providing a particular type.
            </summary>
            <typeparam name="TService">The service type.</typeparam>
            <param name="builder">The container builder.</param>
            <param name="descriptor">A description for the middleware; this will show up in any resolve tracing.</param>
            <param name="phase">The phase of the pipeline the middleware should run at.</param>
            <param name="callback">
            A callback invoked to run your middleware.
            This callback takes a <see cref="T:Autofac.Core.Resolving.Pipeline.ResolveRequestContext"/>, containing the context for the resolve request, plus
            a callback to invoke to continue the pipeline.
            </param>
            <param name="insertionMode">The insertion mode of the middleware (start or end of phase).</param>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddleware(Autofac.ContainerBuilder,System.Type,Autofac.Core.Resolving.Pipeline.IResolveMiddleware,Autofac.Core.Resolving.Pipeline.MiddlewareInsertionMode)">
            <summary>
            Register a resolve middleware for services providing a particular type.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="serviceType">The service type.</param>
            <param name="middleware">The middleware to register.</param>
            <param name="insertionMode">The insertion mode of the middleware (start or end of phase).</param>
        </member>
        <member name="M:Autofac.ServiceMiddlewareRegistrationExtensions.RegisterServiceMiddlewareSource(Autofac.ContainerBuilder,Autofac.Core.Registration.IServiceMiddlewareSource)">
            <summary>
            Register a source of service middleware.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="serviceMiddlewareSource">The source to add.</param>
            <returns>A registrar to assist with fluent addition of sources.</returns>
        </member>
        <member name="T:Autofac.SourceRegistrationExtensions">
            <summary>
            Extension methods for registering <see cref="T:Autofac.Core.IRegistrationSource"/> instances with a container.
            </summary>
        </member>
        <member name="M:Autofac.SourceRegistrationExtensions.RegisterSource(Autofac.ContainerBuilder,Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="builder">The builder to register the registration source via.</param>
            <param name="registrationSource">The registration source to add.</param>
            <returns>
            The <see cref="T:Autofac.Core.Registration.ISourceRegistrar"/> to allow additional chained registration source registrations.
            </returns>
        </member>
        <member name="M:Autofac.SourceRegistrationExtensions.RegisterSource``1(Autofac.ContainerBuilder)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="builder">The builder to register the registration source with.</param>
            <typeparam name="TRegistrationSource">The registration source to add.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.ISourceRegistrar"/> to allow additional chained registration source registrations.
            </returns>
        </member>
        <member name="M:Autofac.SourceRegistrationExtensions.RegisterSource``1(Autofac.Core.Registration.ISourceRegistrar)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="registrar">The source registrar that will make the registration into the container.</param>
            <typeparam name="TRegistrationSource">The registration source to add.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:Autofac.Core.Registration.ISourceRegistrar"/> to allow additional chained registration source registrations.
            </returns>
        </member>
        <member name="T:Autofac.TypedParameter">
            <summary>
            A parameter that can supply values to sites that exactly
            match a specified type. When applied to a reflection-based
            component, <see cref="P:Autofac.TypedParameter.Type"/> will be matched against
            the types of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})"/>.
            </summary>
            <example>
            <para>
            Component with parameter...
            </para>
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            <para>
            Providing the parameter...
            </para>
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new TypedParameter(typeof(int), 123));
            </code>
            </example>
        </member>
        <member name="P:Autofac.TypedParameter.Type">
            <summary>
            Gets the type against which targets are matched.
            </summary>
        </member>
        <member name="M:Autofac.TypedParameter.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.TypedParameter"/> class.
            </summary>
            <param name="type">The exact type to match.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Autofac.TypedParameter.From``1(``0)">
            <summary>
            Shortcut for creating <see cref="T:Autofac.TypedParameter"/>
            by using the <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to be used for the parameter.</typeparam>
            <param name="value">The parameter value.</param>
            <returns>New typed parameter.</returns>
        </member>
        <member name="T:Autofac.TypeExtensions">
            <summary>
            Extends <see cref="T:System.Type"/> with methods that are useful in
            building scanning rules for <see cref="M:Autofac.RegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])"/>.
            </summary>
        </member>
        <member name="M:Autofac.TypeExtensions.IsInNamespace(System.Type,System.String)">
            <summary>
            Returns true if this type is in the <paramref name="namespace"/> namespace
            or one of its sub-namespaces.
            </summary>
            <param name="this">The type to test.</param>
            <param name="namespace">The namespace to test.</param>
            <returns>True if this type is in the <paramref name="namespace"/> namespace
            or one of its sub-namespaces; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.IsInNamespaceOf``1(System.Type)">
            <summary>
            Returns true if this type is in the same namespace as <typeparamref name="T"/>
            or one of its sub-namespaces.
            </summary>
            <param name="this">The type to test.</param>
            <returns>True if this type is in the same namespace as <typeparamref name="T"/>
            or one of its sub-namespaces; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.IsClosedTypeOf(System.Type,System.Type)">
            <summary>
            Determines whether the candidate type supports any base or
            interface that closes the provided generic type.
            </summary>
            <param name="this">The type to test.</param>
            <param name="openGeneric">The open generic against which the type should be tested.</param>
        </member>
        <member name="M:Autofac.TypeExtensions.IsAssignableTo``1(System.Type)">
            <summary>
            Determines whether this type is assignable to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to test assignability to.</typeparam>
            <param name="this">The type to test.</param>
            <returns>True if this type is assignable to references of type
            <typeparamref name="T"/>; otherwise, False.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.GetDeclaredMethod(System.Type,System.String)">
            <summary>
            Returns an object that represents the specified method declared by the
            current type.
            </summary>
            <param name="this">The type.</param>
            <param name="methodName">The name of the method.</param>
            <returns>An object that represents the specified method, if found; otherwise, null.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.GetDeclaredProperty(System.Type,System.String)">
            <summary>
            Returns an object that represents the specified property declared by the
            current type.
            </summary>
            <param name="this">The type.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>An object that represents the specified property, if found; otherwise, null.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.GetDeclaredConstructors(System.Type)">
            <summary>
            Returns a collection of instance constructor information that represents the declared constructors
            for the type (public and private).
            </summary>
            <param name="this">The type.</param>
            <returns>A collection of instance constructors.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.GetDeclaredPublicConstructors(System.Type)">
            <summary>
            Returns a collection of instance constructor information that represents the declared constructors
            for the type (public only).
            </summary>
            <param name="this">The type.</param>
            <returns>A collection of instance constructors.</returns>
        </member>
        <member name="M:Autofac.TypeExtensions.GetMatchingConstructor(System.Type,System.Type[])">
            <summary>
            Finds an instance constructor with the matching type parameters.
            </summary>
            <param name="type">The type being tested.</param>
            <param name="constructorParameterTypes">The types of the contractor to find.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> is a match is found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Autofac.TypeExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.TypeExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.TypeExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.TypeExtensionsResources.MemberNotFound">
            <summary>
              Looks up a localized string similar to Requested type member cannot be found..
            </summary>
        </member>
        <member name="P:Autofac.TypeExtensionsResources.NotOpenGenericType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an open generic class or interface type so it won&apos;t work with methods that act on open generics..
            </summary>
        </member>
        <member name="T:Autofac.Util.AssemblyExtensions">
            <summary>
            Extension methods for <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Autofac.Util.AssemblyExtensions.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Safely returns the set of loadable types from an assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> from which to load types.</param>
            <returns>
            The set of types from the <paramref name="assembly" />, or the subset
            of types that could be loaded if there was any error.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assembly" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Autofac.Util.AsyncReleaseAction`1">
            <summary>
            Adapts an async action to the <see cref="T:System.IAsyncDisposable"/> interface.
            </summary>
        </member>
        <member name="M:Autofac.Util.AsyncReleaseAction`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Util.AsyncReleaseAction`1"/> class.
            </summary>
            <param name="action">
            The async action to execute on disposal.
            </param>
            <param name="factory">
            A factory that retrieves the value on which the <paramref name="action" />
            should be executed.
            </param>
        </member>
        <member name="M:Autofac.Util.AsyncReleaseAction`1.DisposeAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Util.AsyncReleaseAction`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Util.Disposable">
            <summary>
            Base class for disposable objects.
            </summary>
        </member>
        <member name="M:Autofac.Util.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Autofac.Util.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Autofac.Util.Disposable.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance has been disposed.
            </summary>
        </member>
        <member name="M:Autofac.Util.Disposable.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Autofac.Util.Disposable.DisposeAsync(System.Boolean)">
            <summary>
             Releases unmanaged and - optionally - managed resources, asynchronously.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Autofac.Util.Enforce">
            <summary>
            Helper methods used throughout the codebase.
            </summary>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentElementNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Enforce that sequence does not contain null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:Autofac.Util.Enforce.NotNull``1(``0)">
            <summary>
            Enforces that the provided object is non-null.
            </summary>
            <typeparam name="T">The type of value being checked.</typeparam>
            <param name="value">The value.</param>
            <returns><paramref name="value"/> if not null.</returns>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Enforce that an argument is not null or empty. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <returns><paramref name="value"/>if not null or empty.</returns>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentTypeIsFunction(System.Type)">
            <summary>
            Enforce that the argument is a delegate type.
            </summary>
            <param name="delegateType">The type to test.</param>
        </member>
        <member name="T:Autofac.Util.EnforceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.CannotBeEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; cannot be empty..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.CannotBeNull">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.DelegateReturnsVoid">
            <summary>
              Looks up a localized string similar to Type {0} returns void..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.ElementCannotBeNull">
            <summary>
              Looks up a localized string similar to The sequence provided as argument &apos;{0}&apos; cannot contain null elements..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.NotDelegate">
            <summary>
              Looks up a localized string similar to Type {0} is not a delegate type..
            </summary>
        </member>
        <member name="T:Autofac.Util.FallbackDictionary`2">
            <summary>
            Dictionary used to allow local property get/set and fall back to parent values.
            </summary>
        </member>
        <member name="F:Autofac.Util.FallbackDictionary`2._localValues">
            <summary>
            Storage for local values set in the dictionary.
            </summary>
        </member>
        <member name="F:Autofac.Util.FallbackDictionary`2._parent">
            <summary>
            The parent dictionary to which values should fall back when not present in the current dictionary.
            </summary>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Util.FallbackDictionary`2"/> class
            with an empty parent.
            </summary>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Util.FallbackDictionary`2"/> class
            with a specified parent.
            </summary>
            <param name="parent">
            The parent dictionary to which values should fall back when not present in the current dictionary.
            </param>
        </member>
        <member name="P:Autofac.Util.FallbackDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
            <value>
            The number of elements contained in this collection plus the parent collection, minus overlapping key counts.
            </value>
        </member>
        <member name="P:Autofac.Util.FallbackDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this collection is read-only.
            </summary>
            <value>
            Always returns <see langword="false" />.
            </value>
        </member>
        <member name="P:Autofac.Util.FallbackDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the dictionary.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the dictionary without duplicates.
            </value>
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified,
            but it is guaranteed to be the same order as the corresponding values in the <see cref="T:System.Collections.Generic.ICollection`1"/>
            returned by the <see cref="P:Autofac.Util.FallbackDictionary`2.Values"/> property.
            </remarks>
        </member>
        <member name="P:Autofac.Util.FallbackDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the dictionary.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values of the dictionary with overrides taken into account.
            </value>
            <remarks>
            The order of the keys in the returned <see cref="T:System.Collections.Generic.ICollection`1"/> is unspecified,
            but it is guaranteed to be the same order as the corresponding keys in the <see cref="T:System.Collections.Generic.ICollection`1"/>
            returned by the <see cref="P:Autofac.Util.FallbackDictionary`2.Keys"/> property.
            </remarks>
        </member>
        <member name="P:Autofac.Util.FallbackDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value>
            The <typeparamref name="TValue"/>.
            </value>
            <param name="key">The key.</param>
            <remarks>
            <para>
            Changes made to this dictionary do not affect the parent.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the dictionary.
            </summary>
            <param name="item">The object to add to the dictionary.</param>
            <remarks>
            <para>
            Changes made to this dictionary do not affect the parent.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <remarks>
            <para>
            Changes made to this dictionary do not affect the parent.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="key" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if an element with the same key is already present in the local or parent dictionary.
            </exception>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.Clear">
            <summary>
            Removes all items from the dictionary. Does not clear parent entries, only local overrides.
            </summary>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <param name="item">The object to locate in the dictionary.</param>
            <returns>
            <see langword="true" /> if <paramref name="item" /> is found in the dictionary; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>
            <see langword="true" /> if the dictionary or its parent contains an element with the key; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
            the dictionary. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the dictionary.
            </summary>
            <param name="item">The object to remove from the dictionary.</param>
            <returns>
            <see langword="true" /> if <paramref name="item" /> was successfully removed from the dictionary; otherwise, <see langword="false" />.
            This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original dictionary.
            </returns>
            <remarks>
            <para>
            Changes made to this dictionary do not affect the parent.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.
            This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original dictionary.
            </returns>
            <remarks>
            <para>
            Changes made to this dictionary do not affect the parent.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            <see langword="true" /> if the dictionary or parent contains an element with the specified key; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Autofac.Util.FallbackDictionary`2.OrderedKeys">
            <summary>
            Gets the list of correctly ordered unique keys from the local and parent dictionaries.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the unique set of all keys.
            </returns>
        </member>
        <member name="T:Autofac.Util.FallbackDictionaryResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Util.FallbackDictionaryResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Util.FallbackDictionaryResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Util.FallbackDictionaryResources.DuplicateItem">
            <summary>
              Looks up a localized string similar to Item has already been added with key &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Util.ReflectionExtensions">
            <summary>
            Extension methods for reflection-related types.
            </summary>
        </member>
        <member name="M:Autofac.Util.ReflectionExtensions.CreateDelegate``1(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Create a typed delegate from a method info and the target object.
            </summary>
            <typeparam name="TDelegate">The delegate.</typeparam>
            <param name="method">The method.</param>
            <param name="target">The target object for the delegate.</param>
            <returns>A constructed delegate.</returns>
        </member>
        <member name="M:Autofac.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
            <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
            <param name="pi">Parameter to the property setter.</param>
            <param name="prop">The property info on which the setter is specified.</param>
            <returns>True if the parameter is a property setter.</returns>
        </member>
        <member name="M:Autofac.Util.ReflectionExtensions.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get a PropertyInfo object from an expression of the form
            x =&gt; x.P.
            </summary>
            <typeparam name="TDeclaring">Type declaring the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyAccessor">Expression mapping an instance of the
            declaring type to the property value.</param>
            <returns>Property info.</returns>
        </member>
        <member name="M:Autofac.Util.ReflectionExtensions.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Get the MethodInfo for a method called in the
            expression.
            </summary>
            <typeparam name="TDeclaring">Type on which the method is called.</typeparam>
            <param name="methodCallExpression">Expression demonstrating how the method appears.</param>
            <returns>The method info for the called method.</returns>
        </member>
        <member name="M:Autofac.Util.ReflectionExtensions.GetConstructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.ConstructorInfo"/> for the new operation called in the expression.
            </summary>
            <typeparam name="TDeclaring">The type on which the constructor is called.</typeparam>
            <param name="constructorCallExpression">Expression demonstrating how the constructor is called.</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> for the called constructor.</returns>
        </member>
        <member name="T:Autofac.Util.ReflectionExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Util.ReflectionExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Util.ReflectionExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotConstructorCall">
            <summary>
              Looks up a localized string similar to The provided expression must be of the form () =&gt;new X(), but the provided expression was {0}..
            </summary>
        </member>
        <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotMethodCall">
            <summary>
              Looks up a localized string similar to The provided expression must be of the form x =&gt;x.M(), but the provided expression was {0}..
            </summary>
        </member>
        <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotPropertyAccessor">
            <summary>
              Looks up a localized string similar to The provided expression must be of the form x =&gt;x.P, but the provided expression was {0}..
            </summary>
        </member>
        <member name="T:Autofac.Util.ReleaseAction`1">
            <summary>
            Adapts an action to the <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="M:Autofac.Util.ReleaseAction`1.#ctor(System.Action{`0},System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Util.ReleaseAction`1"/> class.
            </summary>
            <param name="action">
            The action to execute on disposal.
            </param>
            <param name="factory">
            A factory that retrieves the value on which the <paramref name="action" />
            should be executed.
            </param>
        </member>
        <member name="M:Autofac.Util.ReleaseAction`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Util.SequenceExtensions">
            <summary>
            Provides extension methods for working with sequences.
            </summary>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the strings into one single string interspersing the elements with the separator (a-la
            System.String.Join()).
            </summary>
            <param name="elements">The elements.</param>
            <param name="separator">The separator.</param>
            <returns>The joined string.</returns>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.AppendItem``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the item to the specified sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="trailingItem">The trailing item.</param>
            <returns>The sequence with an item appended to the end.</returns>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the item to the specified sequence.
            </summary>
            <typeparam name="T">The type of element in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="leadingItem">The leading item.</param>
            <returns>The sequence with an item prepended.</returns>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a set of items to the given collection.
            </summary>
            <typeparam name="T">The set type.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="items">The set of items to add.</param>
        </member>
        <member name="T:Autofac.Util.SequenceGenerator">
            <summary>
            Provides access to a unique sequenced number.
            </summary>
        </member>
        <member name="M:Autofac.Util.SequenceGenerator.GetNextUniqueSequence">
            <summary>
            Get the next unique sequence value.
            </summary>
            <returns>A new sequence value.</returns>
        </member>
        <member name="T:Autofac.Util.Traverse">
            <summary>
            Provides a method to support traversing structures.
            </summary>
        </member>
        <member name="M:Autofac.Util.Traverse.Across``1(``0,System.Func{``0,``0})">
            <summary>
            Traverse across a set, taking the first item in the set, and a function to determine the next item.
            </summary>
            <typeparam name="T">The set type.</typeparam>
            <param name="first">The first item in the set.</param>
            <param name="next">A callback that will take the current item in the set, and output the next one.</param>
            <returns>An enumerable of the set.</returns>
        </member>
        <member name="T:Autofac.Util.TypeExtensions">
            <summary>
            Provides helper methods for manipulating and inspecting types.
            </summary>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.FunctionReturnType(System.Type)">
            <summary>
            For a delegate type, outputs the return type of the delegate.
            </summary>
            <param name="type">The delegate type.</param>
            <returns>The delegate return type.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsOpenGeneric(System.Type)">
            <summary>
            Determine whether a given type is an open generic.
            </summary>
            <param name="type">The input type.</param>
            <returns>True if the type is an open generic; false otherwise.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.GetTypesThatClose(System.Type,System.Type)">
            <summary>Returns the first concrete interface supported by the candidate type that
            closes the provided open generic service type.</summary>
            <param name="this">The type that is being checked for the interface.</param>
            <param name="openGeneric">The open generic type to locate.</param>
            <returns>The type of the interface.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsClosedTypeOf(System.Type,System.Type)">
            <summary>
            Checks whether this type is a closed type of a given generic type.
            </summary>
            <param name="this">The type we are checking.</param>
            <param name="openGeneric">The open generic type to validate against.</param>
            <returns>True if <paramref name="this"/> is a closed type of <paramref name="openGeneric"/>. False otherwise.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsCompatibleWithGenericParameterConstraints(System.Type,System.Type[])">
            <summary>
            Determines whether a given generic type definition is compatible with the specified type parameters (i.e. is it possible to create a closed generic type from those parameters).
            </summary>
            <param name="genericTypeDefinition">The generic type definition.</param>
            <param name="parameters">The set of parameters to check against.</param>
            <returns>True if the parameters match the generic parameter constraints.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsCompilerGenerated(System.Type)">
            <summary>
            Checks whether a type is compiler generated.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is compiler generated; false otherwise.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Checks whether a given type is a delegate type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a delegate; false otherwise.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsGenericEnumerableInterfaceType(System.Type)">
            <summary>
            Checks whether a given type is a generic enumerable interface type, e.g. <see cref="T:System.Collections.Generic.IEnumerable`1" />, <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, etc.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is one of the supported enumerable interface types.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsGenericListOrCollectionInterfaceType(System.Type)">
            <summary>
            Checks whether a given type is a generic list of colleciton interface type, e.g. <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/> and the read-only variants.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is one of the supported list/collection types.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsGenericTypeDefinedBy(System.Type,System.Type)">
            <summary>
            Checks whether a given type is a closed generic defined by the specifed open generic.
            </summary>
            <param name="this">The type to check.</param>
            <param name="openGeneric">The open generic to check against.</param>
            <returns>True if the type is defined by the specified open generic; false otherwise.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.IsOpenGenericTypeOf(System.Type,System.Type)">
            <summary>
            Checks whether this type is an open generic type of a given type.
            </summary>
            <param name="this">The type we are checking.</param>
            <param name="type">The type to validate against.</param>
            <returns>True if <paramref name="this"/> is a open generic type of <paramref name="type"/>. False otherwise.</returns>
        </member>
        <member name="M:Autofac.Util.TypeExtensions.FindAssignableTypesThatClose(System.Type,System.Type)">
            <summary>
            Looks for an interface on the candidate type that closes the provided open generic interface type.
            </summary>
            <param name="candidateType">The type that is being checked for the interface.</param>
            <param name="openGenericServiceType">The open generic service type to locate.</param>
            <returns>True if a closed implementation was found; otherwise false.</returns>
        </member>
        <member name="T:Autofac.Util.ValidatedNotNullAttribute">
            <summary>
            Signal attribute for static analysis that indicates a helper method is
            validating arguments for <see langword="null" />.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
            <summary>
            Fake version for pre-net-5.0 targets.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
            <summary>
            Fake attribute for older versions.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requries unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
    </members>
</doc>
